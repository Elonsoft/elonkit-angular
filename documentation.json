{
    "pipes": [],
    "interfaces": [
        {
            "name": "ESActonHeadingDefaultOptions",
            "id": "interface-ESActonHeadingDefaultOptions-5242b7c4735365dceae03ca8d35f0a7c",
            "file": "projects/elonkit/src/ui/action-heading/action-heading.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Inject,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectorRef\n} from '@angular/core';\n\nexport type ESActionHeadingType = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nexport interface ESActonHeadingDefaultOptions {\n  type?: ESActionHeadingType;\n  typography?: string;\n  actionIcon?: string;\n  actionSvgIcon?: string;\n  actionLabel?: string;\n}\n\nexport const ES_ACTION_HEADING_DEFAULT_OPTIONS = new InjectionToken<ESActonHeadingDefaultOptions>(\n  'ES_ACTION_HEADING_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-action-heading',\n  templateUrl: './action-heading.component.html',\n  styleUrls: ['./action-heading.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESActionHeadingComponent {\n  private _type: ESActionHeadingType;\n  private _typography: string;\n  private _actionIcon: string;\n  private _actionSvgIcon: string;\n  private _actionLabel: string;\n\n  /**\n   * Heading text.\n   */\n  @Input()\n  public text: string;\n\n  /**\n   * Heading text type.\n   */\n  @Input()\n  public get type(): ESActionHeadingType {\n    return this._type;\n  }\n  public set type(value: ESActionHeadingType) {\n    this._type = value || this.defaultOptions?.type || 'h1';\n  }\n\n  /**\n   * Heading text typography.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography = value || this.defaultOptions?.typography || 'es-h1';\n  }\n\n  /**\n   * Action icon.\n   */\n  @Input()\n  public get actionIcon(): string {\n    return this._actionIcon;\n  }\n  public set actionIcon(value: string) {\n    this._actionIcon = value || this.defaultOptions?.actionIcon || 'add';\n  }\n\n  /**\n   * Action svg icon.\n   */\n  @Input()\n  public get actionSvgIcon(): string {\n    return this._actionSvgIcon;\n  }\n  public set actionSvgIcon(value: string) {\n    this._actionSvgIcon = value || this.defaultOptions?.actionSvgIcon;\n  }\n\n  /**\n   * Aria-label of the action button.\n   */\n  @Input()\n  public get actionLabel(): string {\n    return this._actionLabel;\n  }\n  public set actionLabel(value: string) {\n    this._actionLabel = value || this.defaultOptions?.actionLabel || 'add';\n  }\n\n  /**\n   * Color of the action button.\n   */\n  @Input()\n  public color: 'primary' | 'warn' | 'accent' = 'primary';\n\n  /**\n   * Event emitted when user clicks button.\n   */\n  @Output()\n  public action: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_ACTION_HEADING_DEFAULT_OPTIONS)\n    private defaultOptions: ESActonHeadingDefaultOptions\n  ) {\n    this.type = this.defaultOptions?.type;\n    this.typography = this.defaultOptions?.typography;\n  }\n}\n",
            "properties": [
                {
                    "name": "actionIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "actionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "actionSvgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESActionHeadingType",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESAlertDefaultOptions",
            "id": "interface-ESAlertDefaultOptions-f1e7d8ceb07ce872ac9eeb4917fdbf75",
            "file": "projects/elonkit/src/ui/alert/alert.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter,\n  InjectionToken,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport { Observable } from 'rxjs';\n\nimport { ESAlertVariant } from './alert.types';\nimport { ESLocaleService, ESLocale } from '../locale';\n\nexport interface ESAlertDefaultOptions {\n  typography?: string;\n  titleTypography?: string;\n  iconMapping?: { [key in ESAlertVariant]?: { icon?: string; svgIcon?: string } };\n}\n\nconst DEFAULT_TYPOGRAPHY = 'es-body-100';\nconst DEFAULT_TITLE_TYPOGRAPHY = 'es-body-100';\n\nconst DEFAULT_ICON_MAPPING = {\n  default: { icon: 'info' },\n  info: { icon: 'info' },\n  success: { icon: 'check_circle' },\n  warning: { icon: 'warning' },\n  error: { icon: 'error' }\n};\n\nexport const ES_ALERT_DEFAULT_OPTIONS = new InjectionToken<ESAlertDefaultOptions>(\n  'ES_ALERT_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESAlertComponent {\n  private iconMapping: { [key in ESAlertVariant]: { icon?: string; svgIcon?: string } };\n\n  /**\n   * The variant of the alert. This defines the color and icon used.\n   */\n  @Input() public variant: ESAlertVariant = 'default';\n\n  private _typography;\n\n  /**\n   * Class applied to text.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography =\n      value || (this.defaultOptions && this.defaultOptions.typography) || DEFAULT_TYPOGRAPHY;\n  }\n\n  private _titleTypography;\n\n  /**\n   * Class applied to title.\n   */\n  @Input()\n  public get titleTypography(): string {\n    return this._titleTypography;\n  }\n  public set titleTypography(value: string) {\n    this._titleTypography =\n      value ||\n      (this.defaultOptions && this.defaultOptions.titleTypography) ||\n      DEFAULT_TITLE_TYPOGRAPHY;\n  }\n\n  private _closable = false;\n\n  /**\n   * Show close button.\n   */\n  @Input()\n  public get closable() {\n    return this._closable;\n  }\n  public set closable(closable: any) {\n    this._closable = coerceBooleanProperty(closable);\n  }\n\n  /**\n   * Override the icon displayed before the text.\n   * Unless provided, the icon is mapped to the value of the variant input.\n   */\n  @Input() public icon?: string;\n\n  /**\n   * Override the icon displayed before the text.\n   * Unless provided, the icon is mapped to the value of the variant input.\n   */\n  @Input() public svgIcon?: string;\n\n  /**\n   * Event emitted when user clicks close button.\n   */\n  @Output() public closed = new EventEmitter();\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    private localeService: ESLocaleService,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_ALERT_DEFAULT_OPTIONS)\n    private defaultOptions: ESAlertDefaultOptions\n  ) {\n    this.locale$ = this.localeService.locale();\n\n    this.typography = (defaultOptions && defaultOptions.typography) || DEFAULT_TYPOGRAPHY;\n    this.titleTypography =\n      (defaultOptions && defaultOptions.titleTypography) || DEFAULT_TITLE_TYPOGRAPHY;\n    this.iconMapping = { ...DEFAULT_ICON_MAPPING, ...defaultOptions?.iconMapping };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClose() {\n    this.closed.emit();\n  }\n\n  public get currentIcon() {\n    if (this.icon) {\n      return { icon: this.icon };\n    }\n    if (this.svgIcon) {\n      return { svgIcon: this.svgIcon };\n    }\n    return this.iconMapping[this.variant];\n  }\n}\n",
            "properties": [
                {
                    "name": "iconMapping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "titleTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESAutocompleteMultipleDefaultOptions",
            "id": "interface-ESAutocompleteMultipleDefaultOptions-b3c7308616714ffcf04629a5fd43225f",
            "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  OnInit,\n  OnDestroy,\n  Input,\n  ViewChild,\n  HostBinding,\n  Optional,\n  Self,\n  Host,\n  ElementRef,\n  AfterViewInit,\n  Renderer2,\n  Inject,\n  InjectionToken\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  UntypedFormControl,\n  UntypedFormGroup,\n  FormGroupDirective,\n  NgControl\n} from '@angular/forms';\n\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\n\nimport { MatButton } from '@angular/material/button';\nimport { MatChipListbox } from '@angular/material/chips';\nimport { MatFormField, MatFormFieldControl } from '@angular/material/form-field';\nimport { MatSelectionList, MatSelectionListChange } from '@angular/material/list';\n\nimport { Observable, Subject, combineLatest, of, BehaviorSubject } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  filter,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\n\nimport { resizeObserver } from '../../utils/resize-observer';\nimport { ESLocale, ESLocaleService } from '../locale';\n\nimport { ES_AUTOCOMPLETE_ANIMATIONS } from './autocomplete-multiple.animations';\nimport { ESAutocompleteMultipleSearchScope } from '.';\n\nexport interface ESAutocompleteMultipleDefaultOptionsSizes {\n  chipLeftMargin: number;\n  countBadgeMaxWidth: number;\n}\n\nexport interface ESAutocompleteMultipleDefaultOptions {\n  sizes?: ESAutocompleteMultipleDefaultOptionsSizes;\n}\n\nexport const ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES = {\n  chipLeftMargin: 4,\n  countBadgeMaxWidth: 40\n};\n\nexport const ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS = new InjectionToken<ESAutocompleteMultipleDefaultOptions>(\n  'ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS'\n);\n\nconst MIN_PANEL_WIDTH = 320;\n\n@Component({\n  selector: 'es-autocomplete-multiple',\n  templateUrl: './autocomplete-multiple.component.html',\n  styleUrls: ['./autocomplete-multiple.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{ provide: MatFormFieldControl, useExisting: ESAutocompleteMultipleComponent }],\n  animations: ES_AUTOCOMPLETE_ANIMATIONS\n})\nexport class ESAutocompleteMultipleComponent\n  implements MatFormFieldControl<any[]>, ControlValueAccessor, OnInit, OnDestroy, AfterViewInit {\n  private static nextId = 0;\n  @HostBinding() public id = `es-autocomplete-multiple-${ESAutocompleteMultipleComponent.nextId++}`;\n  @HostBinding('style.display') public styleDisplay = 'block';\n  @HostBinding('style.width') public styleWidth = '100%';\n\n  @ViewChild('input', { static: false }) private input?: ElementRef<HTMLInputElement>;\n  @ViewChild('arrow', { static: true }) private arrow?: MatButton;\n  @ViewChild('selectionList', { static: false }) private selectionList?: MatSelectionList;\n  @ViewChild('chipList', { static: false }) private chipList?: MatChipListbox;\n\n  /** Options search service. When second argument is present, the search should be performed by passed down options. */\n  @Input() public service!: (search: string, options?: any[]) => Observable<any[]>;\n\n  /** Function that maps an option control value to its display value in the trigger. */\n  @Input() public displayWith!: (option: any) => string;\n\n  /** Delay before starting search after entering search text. */\n  @Input() public searchDebounce = 400;\n\n  /** Placeholder for search input. */\n  @Input()\n  public get placeholder() {\n    return this._placeholder;\n  }\n  public set placeholder(placeholder) {\n    this._placeholder = placeholder;\n    this.stateChanges.next();\n  }\n  private _placeholder = '';\n\n  /** Whether the control is required. */\n  @Input()\n  public get required() {\n    return this._required;\n  }\n  public set required(required) {\n    this._required = coerceBooleanProperty(required);\n    this.stateChanges.next();\n  }\n  private _required = false;\n\n  /** Whether the control is disabled. */\n  @Input()\n  public get disabled() {\n    return this._disabled;\n  }\n  public set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n    this.stateChanges.next();\n  }\n  private _disabled = false;\n\n  /**\n   * Sizes of component elements which are used for collapse calculations.\n   */\n  @Input()\n  public get sizes(): ESAutocompleteMultipleDefaultOptionsSizes {\n    return this._sizes;\n  }\n  public set sizes(value: ESAutocompleteMultipleDefaultOptionsSizes) {\n    this._sizes = value || this.defaultOptions?.sizes || ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES;\n  }\n  private _sizes;\n\n  /** Total number of options. */\n  @Input()\n  public get optionsCount(): number {\n    return this._optionsCount || 0;\n  }\n  public set optionsCount(value: number) {\n    this._optionsCount = value || 0;\n  }\n  private _optionsCount;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public origin!: CdkOverlayOrigin;\n\n  /**\n   * @ignore\n   */\n  public describedBy = '';\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private destoryed$ = new Subject<void>();\n\n  /**\n   * @ignore\n   */\n  public stateChanges = new Subject<void>();\n\n  /**\n   * @ignore\n   */\n  public value: any[] = [];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public isOpen = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public width = 0;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public selectionChanged$ = new BehaviorSubject(null);\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public options$: Observable<any[]>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public filteredOptions$: Observable<any[]>;\n\n  /**\n   * @ignore\n   */\n  public focused = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public searchScope = ESAutocompleteMultipleSearchScope;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public form = new UntypedFormGroup({\n    scope: new UntypedFormControl(this.searchScope.ALL),\n    text: new UntypedFormControl('')\n  });\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public hiddenChipCount = 0;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private filteredOptionsCount = 0;\n\n  /**\n   * @ignore\n   */\n  @HostBinding('class.floating')\n  public get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  /**\n   * @ignore\n   */\n  public get errorState(): boolean {\n    const control = this.ngControl;\n    const form = this.ngForm;\n\n    if (control) {\n      return !!(control.invalid && (control.touched || form?.submitted));\n    }\n\n    return false;\n  }\n\n  /**\n   * @ignore\n   */\n  public get empty() {\n    return !this.value.length;\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() public ngForm: FormGroupDirective,\n    /**\n     * @internal\n     */\n    @Optional() @Host() private matFormField: MatFormField,\n    @Optional()\n    @Inject(ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS)\n    private defaultOptions: ESAutocompleteMultipleDefaultOptions,\n    /**\n     * @internal\n     */\n    private changeDetectorRef: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    private focusMonitor: FocusMonitor,\n    /**\n     * @internal\n     */\n    private rendered2: Renderer2,\n    /**\n     * @internal\n     */\n    private elementRef: ElementRef,\n    /**\n     * @internal\n     */\n    public localeService: ESLocaleService\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this as any;\n    }\n    this.locale$ = this.localeService.locale();\n\n    this.sizes = defaultOptions?.sizes || ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES;\n\n    this.options$ = this.form.valueChanges.pipe(\n      startWith({ scope: this.searchScope.ALL, text: '' }),\n      debounceTime(this.searchDebounce),\n      switchMap(({ scope, text }) => {\n        this.filteredOptionsCount = 0;\n\n        if (scope === this.searchScope.SELECTED) {\n          return this.service(text, this.value).pipe(catchError(() => of([])));\n        }\n\n        return this.service(text).pipe(catchError(() => of([])));\n      }),\n      shareReplay(1)\n    );\n\n    this.filteredOptions$ = combineLatest([\n      this.options$,\n      this.selectionChanged$.pipe(filter(() => this.isOpen))\n    ]).pipe(\n      debounceTime(100),\n      map(([options]) => {\n        const { scope } = this.form.value;\n\n        if (scope === this.searchScope.ALL) {\n          return options;\n        }\n\n        const filtered =\n          scope === this.searchScope.SELECTED\n            ? options.filter((option) => this.value.some((o) => o.id === option.id))\n            : options.filter((option) => !this.value.some((o) => o.id === option.id));\n\n        this.optionsCount = this.optionsCount - options.length + filtered.length;\n\n        return filtered;\n      }),\n      tap((options) => {\n        this.filteredOptionsCount = options.length;\n      })\n    );\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnInit() {\n    if (this.matFormField) {\n      this.origin = {\n        elementRef: this.matFormField.getConnectedOverlayOrigin()\n      };\n    }\n\n    this.stateChanges.subscribe(() => {\n      this.changeDetectorRef.detectChanges();\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterViewInit() {\n    combineLatest([\n      // tslint:disable-next-line:deprecation\n      resizeObserver(this.elementRef.nativeElement).pipe(startWith(null), debounceTime(10)),\n      this.selectionChanged$\n    ])\n      .pipe(takeUntil(this.destoryed$))\n      .subscribe(() => {\n        this.updateDisplayedChips();\n      });\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnDestroy() {\n    this.destoryed$.next();\n    this.destoryed$.complete();\n    this.stateChanges.complete();\n  }\n\n  /**\n   * @ignore\n   */\n  public setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  public onContainerClick() {\n    if (this.ngControl.disabled || this.disabled) {\n      return;\n    }\n\n    this.isOpen = true;\n    if (this.matFormField) {\n      const width = this.matFormField._elementRef.nativeElement.clientWidth;\n\n      this.width = width < MIN_PANEL_WIDTH ? MIN_PANEL_WIDTH : width;\n    }\n    this.stateChanges.next();\n\n    setTimeout(() => {\n      if (this.input) {\n        this.input.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public writeValue(value: any[]) {\n    if (value) {\n      this.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  public registerOnChange(onChange: (value: any) => void) {\n    this.onChange = onChange;\n  }\n\n  /**\n   * @ignore\n   */\n  public onChange = (_: any[]) => {};\n\n  /**\n   * @ignore\n   */\n  public registerOnTouched(onTouched: () => void) {\n    this.onTouched = onTouched;\n  }\n\n  /**\n   * @ignore\n   */\n  public onTouched = () => {};\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClose(shouldFocusArrow?: boolean) {\n    this.onTouched();\n    this.isOpen = false;\n    this.form.patchValue({ text: '', scope: this.searchScope.ALL });\n\n    if (shouldFocusArrow && this.arrow) {\n      this.focusMonitor.focusVia(this.arrow._elementRef.nativeElement, 'keyboard');\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClear() {\n    this.form.patchValue({ text: '' });\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSelectionChange(event: MatSelectionListChange) {\n    const newValue = this.value.slice();\n    const option = event.options[0].value;\n\n    const index = newValue.findIndex((o) => o.id === option.id);\n    if (index !== -1) {\n      newValue.splice(index, 1);\n    } else {\n      newValue.push(option);\n    }\n\n    this.value = newValue;\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSelectAll() {\n    const newValue = this.value.slice();\n\n    this.selectionList.options.forEach((option) => {\n      const index = newValue.findIndex((o) => o.id === option.value.id);\n\n      if (index === -1) {\n        newValue.push(option.value);\n      }\n    });\n\n    this.value = newValue;\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onDeSelectAll() {\n    if (this.value.length) {\n      const newValue = this.value.slice();\n\n      this.selectionList.options.forEach((option) => {\n        const index = newValue.findIndex((o) => o.id === option.value.id);\n\n        if (index !== -1) {\n          newValue.splice(index, 1);\n        }\n      });\n\n      this.value = newValue;\n      this.changeState(this.value);\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onRemoveAll(event?: Event) {\n    event.stopPropagation();\n\n    this.value = [];\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onRemove(index: number) {\n    this.value.splice(index, 1);\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onShowSelectedTab() {\n    this.form.patchValue({ scope: this.searchScope.SELECTED });\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public isSelected(option: any) {\n    return !!this.value.find((o) => o.id === option.id);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public getShownCountInfo(labelShown: string, labelOf: string) {\n    return `${labelShown}: ${this.filteredOptionsCount} ${labelOf} ${this.optionsCount}`;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public updateDisplayedChips() {\n    if (this.chipList) {\n      let count = 0;\n\n      const chips = this.chipList._chips;\n\n      let isOverflow = false;\n      let offset = 0;\n\n      chips.forEach((chip, index) => {\n        this.rendered2.setStyle(chip._elementRef.nativeElement, 'display', 'inline-flex');\n        this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', 'auto');\n\n        const {\n          width: chipListWidth\n        } = chip._elementRef.nativeElement.parentElement.getBoundingClientRect();\n\n        const { width: chipWidth } = chip._elementRef.nativeElement.getBoundingClientRect();\n\n        offset += chipWidth;\n\n        if (isOverflow) {\n          count += 1;\n\n          this.rendered2.setStyle(chip._elementRef.nativeElement, 'display', 'none');\n        } else if (chips.length === 1 && chipWidth > chipListWidth) {\n          this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', `${chipListWidth}px`);\n        } else if (chips.length === 1) {\n          this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', 'auto');\n        } else {\n          if (offset <= chipListWidth && index === chips.length - 1) {\n            return;\n          } else if (offset > chipListWidth - this.sizes.countBadgeMaxWidth && index) {\n            count += 1;\n\n            isOverflow = true;\n\n            this.rendered2.setStyle(chip._elementRef.nativeElement, 'display', 'none');\n          } else {\n            const width =\n              chipWidth + this.sizes.countBadgeMaxWidth > chipListWidth\n                ? chipListWidth - this.sizes.countBadgeMaxWidth\n                : chipWidth;\n\n            this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', `${width}px`);\n          }\n        }\n\n        offset += this.sizes.chipLeftMargin;\n      });\n\n      if (this.hiddenChipCount !== count) {\n        this.hiddenChipCount = count;\n        this.stateChanges.next();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private changeState(value: any[]) {\n    this.onChange(value);\n    this.stateChanges.next();\n    this.selectionChanged$.next(true);\n  }\n}\n",
            "properties": [
                {
                    "name": "sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESAutocompleteMultipleDefaultOptionsSizes",
                    "optional": true,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESAutocompleteMultipleDefaultOptionsSizes",
            "id": "interface-ESAutocompleteMultipleDefaultOptionsSizes-b3c7308616714ffcf04629a5fd43225f",
            "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  OnInit,\n  OnDestroy,\n  Input,\n  ViewChild,\n  HostBinding,\n  Optional,\n  Self,\n  Host,\n  ElementRef,\n  AfterViewInit,\n  Renderer2,\n  Inject,\n  InjectionToken\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  UntypedFormControl,\n  UntypedFormGroup,\n  FormGroupDirective,\n  NgControl\n} from '@angular/forms';\n\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\n\nimport { MatButton } from '@angular/material/button';\nimport { MatChipListbox } from '@angular/material/chips';\nimport { MatFormField, MatFormFieldControl } from '@angular/material/form-field';\nimport { MatSelectionList, MatSelectionListChange } from '@angular/material/list';\n\nimport { Observable, Subject, combineLatest, of, BehaviorSubject } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  filter,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\n\nimport { resizeObserver } from '../../utils/resize-observer';\nimport { ESLocale, ESLocaleService } from '../locale';\n\nimport { ES_AUTOCOMPLETE_ANIMATIONS } from './autocomplete-multiple.animations';\nimport { ESAutocompleteMultipleSearchScope } from '.';\n\nexport interface ESAutocompleteMultipleDefaultOptionsSizes {\n  chipLeftMargin: number;\n  countBadgeMaxWidth: number;\n}\n\nexport interface ESAutocompleteMultipleDefaultOptions {\n  sizes?: ESAutocompleteMultipleDefaultOptionsSizes;\n}\n\nexport const ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES = {\n  chipLeftMargin: 4,\n  countBadgeMaxWidth: 40\n};\n\nexport const ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS = new InjectionToken<ESAutocompleteMultipleDefaultOptions>(\n  'ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS'\n);\n\nconst MIN_PANEL_WIDTH = 320;\n\n@Component({\n  selector: 'es-autocomplete-multiple',\n  templateUrl: './autocomplete-multiple.component.html',\n  styleUrls: ['./autocomplete-multiple.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{ provide: MatFormFieldControl, useExisting: ESAutocompleteMultipleComponent }],\n  animations: ES_AUTOCOMPLETE_ANIMATIONS\n})\nexport class ESAutocompleteMultipleComponent\n  implements MatFormFieldControl<any[]>, ControlValueAccessor, OnInit, OnDestroy, AfterViewInit {\n  private static nextId = 0;\n  @HostBinding() public id = `es-autocomplete-multiple-${ESAutocompleteMultipleComponent.nextId++}`;\n  @HostBinding('style.display') public styleDisplay = 'block';\n  @HostBinding('style.width') public styleWidth = '100%';\n\n  @ViewChild('input', { static: false }) private input?: ElementRef<HTMLInputElement>;\n  @ViewChild('arrow', { static: true }) private arrow?: MatButton;\n  @ViewChild('selectionList', { static: false }) private selectionList?: MatSelectionList;\n  @ViewChild('chipList', { static: false }) private chipList?: MatChipListbox;\n\n  /** Options search service. When second argument is present, the search should be performed by passed down options. */\n  @Input() public service!: (search: string, options?: any[]) => Observable<any[]>;\n\n  /** Function that maps an option control value to its display value in the trigger. */\n  @Input() public displayWith!: (option: any) => string;\n\n  /** Delay before starting search after entering search text. */\n  @Input() public searchDebounce = 400;\n\n  /** Placeholder for search input. */\n  @Input()\n  public get placeholder() {\n    return this._placeholder;\n  }\n  public set placeholder(placeholder) {\n    this._placeholder = placeholder;\n    this.stateChanges.next();\n  }\n  private _placeholder = '';\n\n  /** Whether the control is required. */\n  @Input()\n  public get required() {\n    return this._required;\n  }\n  public set required(required) {\n    this._required = coerceBooleanProperty(required);\n    this.stateChanges.next();\n  }\n  private _required = false;\n\n  /** Whether the control is disabled. */\n  @Input()\n  public get disabled() {\n    return this._disabled;\n  }\n  public set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n    this.stateChanges.next();\n  }\n  private _disabled = false;\n\n  /**\n   * Sizes of component elements which are used for collapse calculations.\n   */\n  @Input()\n  public get sizes(): ESAutocompleteMultipleDefaultOptionsSizes {\n    return this._sizes;\n  }\n  public set sizes(value: ESAutocompleteMultipleDefaultOptionsSizes) {\n    this._sizes = value || this.defaultOptions?.sizes || ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES;\n  }\n  private _sizes;\n\n  /** Total number of options. */\n  @Input()\n  public get optionsCount(): number {\n    return this._optionsCount || 0;\n  }\n  public set optionsCount(value: number) {\n    this._optionsCount = value || 0;\n  }\n  private _optionsCount;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public origin!: CdkOverlayOrigin;\n\n  /**\n   * @ignore\n   */\n  public describedBy = '';\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private destoryed$ = new Subject<void>();\n\n  /**\n   * @ignore\n   */\n  public stateChanges = new Subject<void>();\n\n  /**\n   * @ignore\n   */\n  public value: any[] = [];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public isOpen = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public width = 0;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public selectionChanged$ = new BehaviorSubject(null);\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public options$: Observable<any[]>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public filteredOptions$: Observable<any[]>;\n\n  /**\n   * @ignore\n   */\n  public focused = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public searchScope = ESAutocompleteMultipleSearchScope;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public form = new UntypedFormGroup({\n    scope: new UntypedFormControl(this.searchScope.ALL),\n    text: new UntypedFormControl('')\n  });\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public hiddenChipCount = 0;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private filteredOptionsCount = 0;\n\n  /**\n   * @ignore\n   */\n  @HostBinding('class.floating')\n  public get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  /**\n   * @ignore\n   */\n  public get errorState(): boolean {\n    const control = this.ngControl;\n    const form = this.ngForm;\n\n    if (control) {\n      return !!(control.invalid && (control.touched || form?.submitted));\n    }\n\n    return false;\n  }\n\n  /**\n   * @ignore\n   */\n  public get empty() {\n    return !this.value.length;\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() public ngForm: FormGroupDirective,\n    /**\n     * @internal\n     */\n    @Optional() @Host() private matFormField: MatFormField,\n    @Optional()\n    @Inject(ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS)\n    private defaultOptions: ESAutocompleteMultipleDefaultOptions,\n    /**\n     * @internal\n     */\n    private changeDetectorRef: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    private focusMonitor: FocusMonitor,\n    /**\n     * @internal\n     */\n    private rendered2: Renderer2,\n    /**\n     * @internal\n     */\n    private elementRef: ElementRef,\n    /**\n     * @internal\n     */\n    public localeService: ESLocaleService\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this as any;\n    }\n    this.locale$ = this.localeService.locale();\n\n    this.sizes = defaultOptions?.sizes || ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES;\n\n    this.options$ = this.form.valueChanges.pipe(\n      startWith({ scope: this.searchScope.ALL, text: '' }),\n      debounceTime(this.searchDebounce),\n      switchMap(({ scope, text }) => {\n        this.filteredOptionsCount = 0;\n\n        if (scope === this.searchScope.SELECTED) {\n          return this.service(text, this.value).pipe(catchError(() => of([])));\n        }\n\n        return this.service(text).pipe(catchError(() => of([])));\n      }),\n      shareReplay(1)\n    );\n\n    this.filteredOptions$ = combineLatest([\n      this.options$,\n      this.selectionChanged$.pipe(filter(() => this.isOpen))\n    ]).pipe(\n      debounceTime(100),\n      map(([options]) => {\n        const { scope } = this.form.value;\n\n        if (scope === this.searchScope.ALL) {\n          return options;\n        }\n\n        const filtered =\n          scope === this.searchScope.SELECTED\n            ? options.filter((option) => this.value.some((o) => o.id === option.id))\n            : options.filter((option) => !this.value.some((o) => o.id === option.id));\n\n        this.optionsCount = this.optionsCount - options.length + filtered.length;\n\n        return filtered;\n      }),\n      tap((options) => {\n        this.filteredOptionsCount = options.length;\n      })\n    );\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnInit() {\n    if (this.matFormField) {\n      this.origin = {\n        elementRef: this.matFormField.getConnectedOverlayOrigin()\n      };\n    }\n\n    this.stateChanges.subscribe(() => {\n      this.changeDetectorRef.detectChanges();\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterViewInit() {\n    combineLatest([\n      // tslint:disable-next-line:deprecation\n      resizeObserver(this.elementRef.nativeElement).pipe(startWith(null), debounceTime(10)),\n      this.selectionChanged$\n    ])\n      .pipe(takeUntil(this.destoryed$))\n      .subscribe(() => {\n        this.updateDisplayedChips();\n      });\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnDestroy() {\n    this.destoryed$.next();\n    this.destoryed$.complete();\n    this.stateChanges.complete();\n  }\n\n  /**\n   * @ignore\n   */\n  public setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  public onContainerClick() {\n    if (this.ngControl.disabled || this.disabled) {\n      return;\n    }\n\n    this.isOpen = true;\n    if (this.matFormField) {\n      const width = this.matFormField._elementRef.nativeElement.clientWidth;\n\n      this.width = width < MIN_PANEL_WIDTH ? MIN_PANEL_WIDTH : width;\n    }\n    this.stateChanges.next();\n\n    setTimeout(() => {\n      if (this.input) {\n        this.input.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public writeValue(value: any[]) {\n    if (value) {\n      this.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  public registerOnChange(onChange: (value: any) => void) {\n    this.onChange = onChange;\n  }\n\n  /**\n   * @ignore\n   */\n  public onChange = (_: any[]) => {};\n\n  /**\n   * @ignore\n   */\n  public registerOnTouched(onTouched: () => void) {\n    this.onTouched = onTouched;\n  }\n\n  /**\n   * @ignore\n   */\n  public onTouched = () => {};\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClose(shouldFocusArrow?: boolean) {\n    this.onTouched();\n    this.isOpen = false;\n    this.form.patchValue({ text: '', scope: this.searchScope.ALL });\n\n    if (shouldFocusArrow && this.arrow) {\n      this.focusMonitor.focusVia(this.arrow._elementRef.nativeElement, 'keyboard');\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClear() {\n    this.form.patchValue({ text: '' });\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSelectionChange(event: MatSelectionListChange) {\n    const newValue = this.value.slice();\n    const option = event.options[0].value;\n\n    const index = newValue.findIndex((o) => o.id === option.id);\n    if (index !== -1) {\n      newValue.splice(index, 1);\n    } else {\n      newValue.push(option);\n    }\n\n    this.value = newValue;\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSelectAll() {\n    const newValue = this.value.slice();\n\n    this.selectionList.options.forEach((option) => {\n      const index = newValue.findIndex((o) => o.id === option.value.id);\n\n      if (index === -1) {\n        newValue.push(option.value);\n      }\n    });\n\n    this.value = newValue;\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onDeSelectAll() {\n    if (this.value.length) {\n      const newValue = this.value.slice();\n\n      this.selectionList.options.forEach((option) => {\n        const index = newValue.findIndex((o) => o.id === option.value.id);\n\n        if (index !== -1) {\n          newValue.splice(index, 1);\n        }\n      });\n\n      this.value = newValue;\n      this.changeState(this.value);\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onRemoveAll(event?: Event) {\n    event.stopPropagation();\n\n    this.value = [];\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onRemove(index: number) {\n    this.value.splice(index, 1);\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onShowSelectedTab() {\n    this.form.patchValue({ scope: this.searchScope.SELECTED });\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public isSelected(option: any) {\n    return !!this.value.find((o) => o.id === option.id);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public getShownCountInfo(labelShown: string, labelOf: string) {\n    return `${labelShown}: ${this.filteredOptionsCount} ${labelOf} ${this.optionsCount}`;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public updateDisplayedChips() {\n    if (this.chipList) {\n      let count = 0;\n\n      const chips = this.chipList._chips;\n\n      let isOverflow = false;\n      let offset = 0;\n\n      chips.forEach((chip, index) => {\n        this.rendered2.setStyle(chip._elementRef.nativeElement, 'display', 'inline-flex');\n        this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', 'auto');\n\n        const {\n          width: chipListWidth\n        } = chip._elementRef.nativeElement.parentElement.getBoundingClientRect();\n\n        const { width: chipWidth } = chip._elementRef.nativeElement.getBoundingClientRect();\n\n        offset += chipWidth;\n\n        if (isOverflow) {\n          count += 1;\n\n          this.rendered2.setStyle(chip._elementRef.nativeElement, 'display', 'none');\n        } else if (chips.length === 1 && chipWidth > chipListWidth) {\n          this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', `${chipListWidth}px`);\n        } else if (chips.length === 1) {\n          this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', 'auto');\n        } else {\n          if (offset <= chipListWidth && index === chips.length - 1) {\n            return;\n          } else if (offset > chipListWidth - this.sizes.countBadgeMaxWidth && index) {\n            count += 1;\n\n            isOverflow = true;\n\n            this.rendered2.setStyle(chip._elementRef.nativeElement, 'display', 'none');\n          } else {\n            const width =\n              chipWidth + this.sizes.countBadgeMaxWidth > chipListWidth\n                ? chipListWidth - this.sizes.countBadgeMaxWidth\n                : chipWidth;\n\n            this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', `${width}px`);\n          }\n        }\n\n        offset += this.sizes.chipLeftMargin;\n      });\n\n      if (this.hiddenChipCount !== count) {\n        this.hiddenChipCount = count;\n        this.stateChanges.next();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private changeState(value: any[]) {\n    this.onChange(value);\n    this.stateChanges.next();\n    this.selectionChanged$.next(true);\n  }\n}\n",
            "properties": [
                {
                    "name": "chipLeftMargin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "countBadgeMaxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESAvatarDefaultOptions",
            "id": "interface-ESAvatarDefaultOptions-37221f6837c0d71257449af285865199",
            "file": "projects/elonkit/src/ui/avatar/avatar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ESAvatarDefaultOptions {\n  size?: number;\n  typography?: string;\n  variant?: ESAvatarVariant;\n}\n\nexport enum ESAvatarVariant {\n  Round = 'round',\n  Square = 'square'\n}\n",
            "properties": [
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESAvatarVariant",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESBreadcrumb",
            "id": "interface-ESBreadcrumb-9f1bbd15ef14df3ba554455c84771b82",
            "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ESBreadcrumbData {\n  icon?: string;\n  svgIcon?: string;\n  label?: string;\n  ariaLabel?: string;\n  breadcrumbs?: Array<{\n    path: string | number;\n    icon?: string;\n    svgIcon?: string;\n    label?: string;\n    ariaLabel?: string;\n  }>;\n}\n\nexport interface ESBreadcrumb {\n  path: string;\n  parentPath: string;\n  data: ESBreadcrumbData;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESBreadcrumbData",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "parentPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESBreadcrumbData",
            "id": "interface-ESBreadcrumbData-9f1bbd15ef14df3ba554455c84771b82",
            "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ESBreadcrumbData {\n  icon?: string;\n  svgIcon?: string;\n  label?: string;\n  ariaLabel?: string;\n  breadcrumbs?: Array<{\n    path: string | number;\n    icon?: string;\n    svgIcon?: string;\n    label?: string;\n    ariaLabel?: string;\n  }>;\n}\n\nexport interface ESBreadcrumb {\n  path: string;\n  parentPath: string;\n  data: ESBreadcrumbData;\n}\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "breadcrumbs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "svgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESBreadcrumbsDefaultOptions",
            "id": "interface-ESBreadcrumbsDefaultOptions-921e872d7a15c8d47214fce3ff09fd8c",
            "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  AfterContentInit,\n  InjectionToken,\n  Optional,\n  Inject,\n  Input,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\n\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil, delay } from 'rxjs/operators';\n\nimport { ESBreadcrumb } from './breadcrumbs.types';\nimport { ESBreadcrumbsService } from './breadcrumbs.service';\n\nimport { ESBreadcrumbsMoreDirective } from './directives/breadcrumbs-more.directive';\nimport { ESBreadcrumbsSeparatorDirective } from './directives/breadcrumbs-separator.directive';\nimport { ESBreadcrumbsBackDirective } from './directives/breadcrumbs-back.directive';\nimport { ESLocaleService, ESLocale } from '../locale';\n\nexport interface ESBreadcrumbsDefaultOptionsSizes {\n  itemPadding: number;\n  icon: number;\n  iconMargin: number;\n  menu: number;\n  separator: number;\n  more: number;\n}\n\nexport interface ESBreadcrumbsDefaultOptions {\n  typography?: string;\n  sizes?: ESBreadcrumbsDefaultOptionsSizes;\n}\n\nexport const ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY = 'es-caption';\n\nexport const ES_BREADCRUMBS_DEFAULT_SIZES = {\n  itemPadding: 4,\n  icon: 24,\n  iconMargin: 4,\n  menu: 20,\n  separator: 16,\n  more: 24\n};\n\nexport const ES_BREADCRUMBS_DEFAULT_OPTIONS = new InjectionToken<ESBreadcrumbsDefaultOptions>(\n  'ES_BREADCRUMBS_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESBreadcrumbsComponent implements OnInit, OnDestroy, AfterContentInit {\n  private _typography;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public windowHistoryLength: number;\n\n  /**\n   * Whether to show Back button.\n   */\n  @Input() public withBackButton: ESBreadcrumb;\n\n  /**\n   * Class applied to breadcrumb labels.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography =\n      value || this.defaultOptions?.typography || ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY;\n  }\n\n  private _sizes;\n\n  /**\n   * Sizes of component elements which are used for collapse calculations.\n   */\n  @Input()\n  public get sizes(): ESBreadcrumbsDefaultOptionsSizes {\n    return this._sizes;\n  }\n  public set sizes(value: ESBreadcrumbsDefaultOptionsSizes) {\n    this._sizes = value || this.defaultOptions?.sizes || ES_BREADCRUMBS_DEFAULT_SIZES;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(ESBreadcrumbsMoreDirective, { read: TemplateRef, static: false })\n  public moreTemplate: any;\n\n  /**\n   * @ignore\n   */\n  @ContentChild(ESBreadcrumbsBackDirective, { read: TemplateRef, static: false })\n  public backTemplate: any;\n\n  /**\n   * @ignore\n   */\n  @ContentChild(ESBreadcrumbsSeparatorDirective, { read: TemplateRef, static: false })\n  public separatorTemplate: any;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('navigation', { static: true }) public elementNavigation: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('width', { static: true }) public elementWidth: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('backButton', { static: true }) public elementBackButton: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @HostListener('window:resize') public onResize() {\n    const element = this.elementNavigation.nativeElement;\n    const goBackButton = this.elementBackButton.nativeElement;\n\n    if (element && this.breadcrumbs.length > 2) {\n      const sizes = this.sizes;\n      const widths = this.breadcrumbs.map(({ data: { label, icon, breadcrumbs } }) => {\n        let result = 0;\n\n        if (label) {\n          result += sizes.itemPadding;\n          result += this.getLabelWidth(label);\n        }\n        if (icon) {\n          result += sizes.icon;\n        }\n        if (label && icon) {\n          result += sizes.iconMargin;\n        }\n        if (breadcrumbs) {\n          result += sizes.menu;\n        }\n\n        return result;\n      });\n      let scrollWidth =\n        widths.reduce((acc, w) => acc + w, 0) + sizes.separator * (widths.length - 1);\n      const clientWidth = element.clientWidth - goBackButton.clientWidth;\n\n      const collapseIndexes = [];\n      const collapseBreadcrumbs = [];\n\n      for (let i = 1; i < widths.length - 1 && scrollWidth > clientWidth; i++) {\n        if (!collapseIndexes.length) {\n          scrollWidth += sizes.more + sizes.separator;\n        }\n\n        collapseIndexes.push(i);\n        collapseBreadcrumbs.push(this.breadcrumbs[i]);\n        scrollWidth -= widths[i] + sizes.separator;\n      }\n\n      this.collapseIndexes = collapseIndexes;\n      this.collapseBreadcrumbs = collapseBreadcrumbs;\n    } else if (this.collapseIndexes.length) {\n      this.collapseIndexes = [];\n      this.collapseBreadcrumbs = [];\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public breadcrumbs: ESBreadcrumb[] = [];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public collapseIndexes: number[] = [];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public collapseBreadcrumbs: ESBreadcrumb[] = [];\n\n  private destroyed$ = new Subject<void>();\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private breadcrumbsService: ESBreadcrumbsService,\n    @Optional()\n    @Inject(ES_BREADCRUMBS_DEFAULT_OPTIONS)\n    private defaultOptions: ESBreadcrumbsDefaultOptions,\n\n    private localeService: ESLocaleService\n  ) {\n    this.typography = defaultOptions?.typography || ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY;\n    this.sizes = defaultOptions?.sizes || ES_BREADCRUMBS_DEFAULT_SIZES;\n    this.locale$ = this.localeService.locale();\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnInit() {\n    this.breadcrumbsService.breadcrumbs$\n      .pipe(takeUntil(this.destroyed$), delay(1))\n      .subscribe((breadcrumbs) => {\n        this.breadcrumbs = breadcrumbs;\n        this.onResize();\n        this.changeDetector.detectChanges();\n      });\n\n    this.locale$.pipe(takeUntil(this.destroyed$)).subscribe((value) => {\n      this.onResize();\n    });\n    this.windowHistoryLength = window.history.length;\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterContentInit() {\n    if ((document as any).fonts?.ready) {\n      (document as any).fonts.ready.then(() => {\n        this.onResize();\n\n        // Tests in CI fail without this check.\n        // tslint:disable-next-line\n        if (!this.changeDetector['destroyed']) {\n          this.changeDetector.detectChanges();\n        }\n      });\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  private getLabelWidth(text: string) {\n    const container = this.elementWidth.nativeElement;\n    container.textContent = text;\n    const width = container.clientWidth + 1;\n    container.textContent = '';\n    return width;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClick() {\n    if (window.history.length) {\n      window.history.back();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESBreadcrumbsDefaultOptionsSizes",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESBreadcrumbsDefaultOptionsSizes",
            "id": "interface-ESBreadcrumbsDefaultOptionsSizes-921e872d7a15c8d47214fce3ff09fd8c",
            "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  AfterContentInit,\n  InjectionToken,\n  Optional,\n  Inject,\n  Input,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\n\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil, delay } from 'rxjs/operators';\n\nimport { ESBreadcrumb } from './breadcrumbs.types';\nimport { ESBreadcrumbsService } from './breadcrumbs.service';\n\nimport { ESBreadcrumbsMoreDirective } from './directives/breadcrumbs-more.directive';\nimport { ESBreadcrumbsSeparatorDirective } from './directives/breadcrumbs-separator.directive';\nimport { ESBreadcrumbsBackDirective } from './directives/breadcrumbs-back.directive';\nimport { ESLocaleService, ESLocale } from '../locale';\n\nexport interface ESBreadcrumbsDefaultOptionsSizes {\n  itemPadding: number;\n  icon: number;\n  iconMargin: number;\n  menu: number;\n  separator: number;\n  more: number;\n}\n\nexport interface ESBreadcrumbsDefaultOptions {\n  typography?: string;\n  sizes?: ESBreadcrumbsDefaultOptionsSizes;\n}\n\nexport const ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY = 'es-caption';\n\nexport const ES_BREADCRUMBS_DEFAULT_SIZES = {\n  itemPadding: 4,\n  icon: 24,\n  iconMargin: 4,\n  menu: 20,\n  separator: 16,\n  more: 24\n};\n\nexport const ES_BREADCRUMBS_DEFAULT_OPTIONS = new InjectionToken<ESBreadcrumbsDefaultOptions>(\n  'ES_BREADCRUMBS_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESBreadcrumbsComponent implements OnInit, OnDestroy, AfterContentInit {\n  private _typography;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public windowHistoryLength: number;\n\n  /**\n   * Whether to show Back button.\n   */\n  @Input() public withBackButton: ESBreadcrumb;\n\n  /**\n   * Class applied to breadcrumb labels.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography =\n      value || this.defaultOptions?.typography || ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY;\n  }\n\n  private _sizes;\n\n  /**\n   * Sizes of component elements which are used for collapse calculations.\n   */\n  @Input()\n  public get sizes(): ESBreadcrumbsDefaultOptionsSizes {\n    return this._sizes;\n  }\n  public set sizes(value: ESBreadcrumbsDefaultOptionsSizes) {\n    this._sizes = value || this.defaultOptions?.sizes || ES_BREADCRUMBS_DEFAULT_SIZES;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(ESBreadcrumbsMoreDirective, { read: TemplateRef, static: false })\n  public moreTemplate: any;\n\n  /**\n   * @ignore\n   */\n  @ContentChild(ESBreadcrumbsBackDirective, { read: TemplateRef, static: false })\n  public backTemplate: any;\n\n  /**\n   * @ignore\n   */\n  @ContentChild(ESBreadcrumbsSeparatorDirective, { read: TemplateRef, static: false })\n  public separatorTemplate: any;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('navigation', { static: true }) public elementNavigation: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('width', { static: true }) public elementWidth: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('backButton', { static: true }) public elementBackButton: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @HostListener('window:resize') public onResize() {\n    const element = this.elementNavigation.nativeElement;\n    const goBackButton = this.elementBackButton.nativeElement;\n\n    if (element && this.breadcrumbs.length > 2) {\n      const sizes = this.sizes;\n      const widths = this.breadcrumbs.map(({ data: { label, icon, breadcrumbs } }) => {\n        let result = 0;\n\n        if (label) {\n          result += sizes.itemPadding;\n          result += this.getLabelWidth(label);\n        }\n        if (icon) {\n          result += sizes.icon;\n        }\n        if (label && icon) {\n          result += sizes.iconMargin;\n        }\n        if (breadcrumbs) {\n          result += sizes.menu;\n        }\n\n        return result;\n      });\n      let scrollWidth =\n        widths.reduce((acc, w) => acc + w, 0) + sizes.separator * (widths.length - 1);\n      const clientWidth = element.clientWidth - goBackButton.clientWidth;\n\n      const collapseIndexes = [];\n      const collapseBreadcrumbs = [];\n\n      for (let i = 1; i < widths.length - 1 && scrollWidth > clientWidth; i++) {\n        if (!collapseIndexes.length) {\n          scrollWidth += sizes.more + sizes.separator;\n        }\n\n        collapseIndexes.push(i);\n        collapseBreadcrumbs.push(this.breadcrumbs[i]);\n        scrollWidth -= widths[i] + sizes.separator;\n      }\n\n      this.collapseIndexes = collapseIndexes;\n      this.collapseBreadcrumbs = collapseBreadcrumbs;\n    } else if (this.collapseIndexes.length) {\n      this.collapseIndexes = [];\n      this.collapseBreadcrumbs = [];\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public breadcrumbs: ESBreadcrumb[] = [];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public collapseIndexes: number[] = [];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public collapseBreadcrumbs: ESBreadcrumb[] = [];\n\n  private destroyed$ = new Subject<void>();\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private breadcrumbsService: ESBreadcrumbsService,\n    @Optional()\n    @Inject(ES_BREADCRUMBS_DEFAULT_OPTIONS)\n    private defaultOptions: ESBreadcrumbsDefaultOptions,\n\n    private localeService: ESLocaleService\n  ) {\n    this.typography = defaultOptions?.typography || ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY;\n    this.sizes = defaultOptions?.sizes || ES_BREADCRUMBS_DEFAULT_SIZES;\n    this.locale$ = this.localeService.locale();\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnInit() {\n    this.breadcrumbsService.breadcrumbs$\n      .pipe(takeUntil(this.destroyed$), delay(1))\n      .subscribe((breadcrumbs) => {\n        this.breadcrumbs = breadcrumbs;\n        this.onResize();\n        this.changeDetector.detectChanges();\n      });\n\n    this.locale$.pipe(takeUntil(this.destroyed$)).subscribe((value) => {\n      this.onResize();\n    });\n    this.windowHistoryLength = window.history.length;\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterContentInit() {\n    if ((document as any).fonts?.ready) {\n      (document as any).fonts.ready.then(() => {\n        this.onResize();\n\n        // Tests in CI fail without this check.\n        // tslint:disable-next-line\n        if (!this.changeDetector['destroyed']) {\n          this.changeDetector.detectChanges();\n        }\n      });\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  private getLabelWidth(text: string) {\n    const container = this.elementWidth.nativeElement;\n    container.textContent = text;\n    const width = container.clientWidth + 1;\n    container.textContent = '';\n    return width;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClick() {\n    if (window.history.length) {\n      window.history.back();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "iconMargin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "itemPadding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "more",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESDropzoneDefaultOptions",
            "id": "interface-ESDropzoneDefaultOptions-2a3e4a9875e19d5c21be686b6a935a79",
            "file": "projects/elonkit/src/ui/dropzone/dropzones.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ESDropzoneFile {\n  id?: number;\n  type?: string;\n  base64?: string;\n  name: string;\n  size: number;\n  content: File | string;\n}\n\nexport interface ESDropzoneDefaultOptions {\n  accept?: string;\n  svgIcon?: string;\n  maxSize?: number;\n  type?: 'base64' | 'binary';\n  headingTypography?: string;\n  subheadingTypography?: string;\n}\n\nexport interface ESDropzoneValidationError {\n  fileName: string;\n  error: 'FILE_TYPE' | 'FILE_SIZE';\n}\n",
            "properties": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "headingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "maxSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "subheadingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "svgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"base64\" | \"binary\"",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESDropzoneFile",
            "id": "interface-ESDropzoneFile-2a3e4a9875e19d5c21be686b6a935a79",
            "file": "projects/elonkit/src/ui/dropzone/dropzones.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ESDropzoneFile {\n  id?: number;\n  type?: string;\n  base64?: string;\n  name: string;\n  size: number;\n  content: File | string;\n}\n\nexport interface ESDropzoneDefaultOptions {\n  accept?: string;\n  svgIcon?: string;\n  maxSize?: number;\n  type?: 'base64' | 'binary';\n  headingTypography?: string;\n  subheadingTypography?: string;\n}\n\nexport interface ESDropzoneValidationError {\n  fileName: string;\n  error: 'FILE_TYPE' | 'FILE_SIZE';\n}\n",
            "properties": [
                {
                    "name": "base64",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESDropzoneValidationError",
            "id": "interface-ESDropzoneValidationError-2a3e4a9875e19d5c21be686b6a935a79",
            "file": "projects/elonkit/src/ui/dropzone/dropzones.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ESDropzoneFile {\n  id?: number;\n  type?: string;\n  base64?: string;\n  name: string;\n  size: number;\n  content: File | string;\n}\n\nexport interface ESDropzoneDefaultOptions {\n  accept?: string;\n  svgIcon?: string;\n  maxSize?: number;\n  type?: 'base64' | 'binary';\n  headingTypography?: string;\n  subheadingTypography?: string;\n}\n\nexport interface ESDropzoneValidationError {\n  fileName: string;\n  error: 'FILE_TYPE' | 'FILE_SIZE';\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"FILE_TYPE\" | \"FILE_SIZE\"",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESEmptyStateDefaultOptions",
            "id": "interface-ESEmptyStateDefaultOptions-df72c397f2b1825f432f8f13796dd99e",
            "file": "projects/elonkit/src/ui/empty-state/empty-state.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  Input,\n  InjectionToken,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { ESEmptyStateIcon } from './empty-state.types';\n\nexport interface ESEmptyStateDefaultOptions {\n  icon?: ESEmptyStateIcon;\n  headingTypography?: string;\n  subheadingTypography?: string;\n}\n\nexport const ES_EMPTY_STATE_DEFAULT_OPTIONS = new InjectionToken<ESEmptyStateDefaultOptions>(\n  'ES_EMPTY_STATE_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-empty-state',\n  templateUrl: './empty-state.component.html',\n  styleUrls: ['./empty-state.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESEmptyStateComponent {\n  private _icon;\n\n  /**\n   * Icon to diaplsy.\n   */\n  @Input()\n  public get icon(): ESEmptyStateIcon {\n    return this._icon;\n  }\n  public set icon(value: ESEmptyStateIcon) {\n    this._icon = value || this.defaultOptions?.icon || 'box';\n  }\n\n  /**\n   * Path to image to display instead of the prebuilt icon.\n   */\n  @Input() public src?: string;\n\n  /**\n   * Heading text.\n   */\n  @Input() public heading: string;\n\n  private _headingTypography;\n\n  /**\n   * Class applied to heading text.\n   */\n  @Input()\n  public get headingTypography(): string {\n    return this._headingTypography;\n  }\n  public set headingTypography(value: string) {\n    this._headingTypography = value || this.defaultOptions?.headingTypography || 'es-body-200';\n  }\n\n  /**\n   * Subheading text.\n   */\n  @Input() public subheading: string;\n\n  private _subheadingTypography;\n\n  /**\n   * Class applied to subheading text.\n   */\n  @Input()\n  public get subheadingTypography(): string {\n    return this._subheadingTypography;\n  }\n  public set subheadingTypography(value: string) {\n    this._subheadingTypography = value || this.defaultOptions?.subheadingTypography || 'es-caption';\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_EMPTY_STATE_DEFAULT_OPTIONS)\n    private defaultOptions: ESEmptyStateDefaultOptions\n  ) {\n    this.icon = this.defaultOptions?.icon;\n    this.headingTypography = this.defaultOptions?.headingTypography;\n    this.subheadingTypography = this.defaultOptions?.subheadingTypography;\n  }\n}\n",
            "properties": [
                {
                    "name": "headingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESEmptyStateIcon",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subheadingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESInlineFormFieldDefaultOptions",
            "id": "interface-ESInlineFormFieldDefaultOptions-63d49ac53167edc43c1af281eb1c3298",
            "file": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter,\n  ContentChild,\n  InjectionToken,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { UntypedFormControl, FormControlName, NgModel } from '@angular/forms';\n\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormField } from '@angular/material/form-field';\n\nimport { Observable } from 'rxjs';\n\nimport { ESLocaleService, ESLocale } from '../locale';\n\nexport interface ESInlineFormFieldDefaultOptions {\n  typography?: string;\n}\n\nconst DEFAULT_TYPOGRAPHY = 'es-body-200';\n\nexport const ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken<ESInlineFormFieldDefaultOptions>(\n  'ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-inline-form-field',\n  templateUrl: './inline-form-field.component.html',\n  styleUrls: ['./inline-form-field.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: {\n        appearance: 'standard',\n        floatLabel: 'never'\n      }\n    }\n  ]\n})\nexport class ESInlineFormFieldComponent {\n  private _typography;\n\n  /**\n   * Class applied to text.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography =\n      value || (this.defaultOptions && this.defaultOptions.typography) || DEFAULT_TYPOGRAPHY;\n  }\n\n  /**\n   * Text to display.\n   */\n  @Input() public text: string;\n\n  /**\n   * Disable default behaviour of \"save\" button and only emit event.\n   */\n  @Input() public manualSave = false;\n\n  /**\n   * Event emitted when user clicks \"edit\" button.\n   */\n  @Output() public edit = new EventEmitter<ESInlineFormFieldComponent>();\n\n  /**\n   * Event emitted when user clicks \"save\" button.\n   */\n  @Output() public save = new EventEmitter<ESInlineFormFieldComponent>();\n\n  /**\n   * Event emitted when user clicks \"cancel\" button.\n   */\n  @Output() public cancel = new EventEmitter<ESInlineFormFieldComponent>();\n\n  @ContentChild(MatFormField) private formField: MatFormField;\n\n  @ContentChild(NgModel) private ngModel: NgModel;\n  @ContentChild(UntypedFormControl) private formControl: UntypedFormControl;\n  @ContentChild(FormControlName) private formControlName: FormControlName;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public isHidden = true;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  private previousValue;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    public localeService: ESLocaleService,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS)\n    private defaultOptions: ESInlineFormFieldDefaultOptions\n  ) {\n    this.locale$ = this.localeService.locale();\n\n    this.typography = (defaultOptions && defaultOptions.typography) || DEFAULT_TYPOGRAPHY;\n  }\n\n  private getControl(): UntypedFormControl | null {\n    if (this.formControl) {\n      return this.formControl;\n    }\n    if (this.formControlName) {\n      return this.formControlName.control;\n    }\n    if (this.ngModel) {\n      return this.ngModel.control;\n    }\n    return null;\n  }\n\n  /**\n   * Use this method to manually switch between display value and input.\n   */\n  public setHidden(isHidden: boolean) {\n    this.isHidden = isHidden;\n    this.changeDetector.detectChanges();\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onEdit() {\n    const control = this.getControl();\n    if (control) {\n      this.previousValue = control.value;\n    }\n\n    this.edit.emit(this);\n    this.isHidden = false;\n    if (this.formField) {\n      const element = this.formField._elementRef.nativeElement as HTMLElement;\n      const input = element.querySelector('input') || element.querySelector('textarea');\n\n      if (input) {\n        setTimeout(() => {\n          input.focus();\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSave() {\n    if (this.manualSave) {\n      this.save.emit(this);\n      return;\n    }\n\n    const control = this.getControl();\n    if (control && control.invalid) {\n      return;\n    }\n\n    this.save.emit(this);\n    this.isHidden = true;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onCancel() {\n    const control = this.getControl();\n    if (control) {\n      control.setValue(this.previousValue);\n    }\n\n    this.cancel.emit(this);\n    this.isHidden = true;\n  }\n}\n",
            "properties": [
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESPaginatorDefaultOptions",
            "id": "interface-ESPaginatorDefaultOptions-f3c6cc72fdd53f8950b57b6a17131423",
            "file": "projects/elonkit/src/ui/paginator/paginator.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter,\n  InjectionToken,\n  Optional,\n  Inject,\n  HostListener\n} from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ESLocaleService, ESLocale } from '../locale';\n\nfunction range(start: number, end: number) {\n  const length = end - start + 1;\n  return Array.from({ length }, (_, i) => start + i);\n}\n\nexport interface ESPaginatorDefaultOptions {\n  pageSizeOptions?: number[];\n  siblingCount?: number;\n  boundaryCount?: number;\n  typography?: string;\n}\n\nexport const ES_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken<ESPaginatorDefaultOptions>(\n  'ES_PAGINATOR_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-paginator',\n  templateUrl: './paginator.component.html',\n  styleUrls: ['./paginator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESPaginatorComponent {\n  /**\n   * The count of the total number of items that are being paginated.\n   */\n  @Input() public count: number;\n\n  // tslint:disable-next-line\n  private _page: number;\n\n  /**\n   * The current page.\n   */\n  @Input()\n  public set page(page: number) {\n    this.pageGoTo = '';\n    this._page = page;\n  }\n  public get page() {\n    return this._page;\n  }\n\n  /**\n   * Number of items to display on a page.\n   */\n  @Input() public pageSize: number;\n\n  private _pageSizeOptions: number[];\n\n  /**\n   * The set of provided page size options to display to the user.\n   */\n  @Input()\n  public set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = value ||\n      this.defaultOptions?.pageSizeOptions || [5, 10, 25, 50, 100, 250, 500];\n  }\n  public get pageSizeOptions(): number[] {\n    return this._pageSizeOptions;\n  }\n\n  private _siblingCount: number;\n\n  /**\n   * Number of always visible pages before and after the current page.\n   */\n  @Input()\n  public set siblingCount(value: number) {\n    this._siblingCount = value ?? this.defaultOptions?.siblingCount ?? 2;\n  }\n  public get siblingCount(): number {\n    return this._siblingCount;\n  }\n\n  private _boundaryCount: number;\n\n  /**\n   * Number of always visible pages at the beginning and end.\n   */\n  @Input()\n  public set boundaryCount(value: number) {\n    this._boundaryCount = value ?? this.defaultOptions?.boundaryCount ?? 1;\n  }\n  public get boundaryCount(): number {\n    return this._boundaryCount;\n  }\n\n  private _typography;\n\n  /**\n   * Class applied to text.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography = value || this.defaultOptions?.typography || 'es-caption';\n  }\n\n  /**\n   * Event emitted when the paginator changes the page index.\n   */\n  @Output() public pageChange = new EventEmitter<number>();\n\n  /**\n   * Event emitted when the paginator changes the page size.\n   */\n  @Output() public pageSizeChange = new EventEmitter<number>();\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public pageGoTo = '';\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    private localeService: ESLocaleService,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_PAGINATOR_DEFAULT_OPTIONS)\n    private defaultOptions: ESPaginatorDefaultOptions\n  ) {\n    this.locale$ = this.localeService.locale();\n\n    this.pageSizeOptions = this.defaultOptions?.pageSizeOptions;\n    this.siblingCount = this.defaultOptions?.siblingCount;\n    this.boundaryCount = this.defaultOptions?.boundaryCount;\n    this.typography = this.defaultOptions?.typography;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public get countStart() {\n    return (this.page - 1) * this.pageSize + (this.count ? 1 : 0);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public get countEnd() {\n    return Math.min(this.page * this.pageSize, this.count);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public get pagesCount() {\n    return Math.ceil(this.count / this.pageSize);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public get pages() {\n    const startPages = range(1, Math.min(this.boundaryCount, this.pagesCount));\n    const endPages = range(\n      Math.max(this.pagesCount - this.boundaryCount + 1, this.boundaryCount + 1),\n      this.pagesCount\n    );\n\n    const siblingsStart = Math.max(\n      Math.min(\n        // Natural start\n        this.page - this.siblingCount,\n        // Lower boundary when page is high\n        this.pagesCount - this.boundaryCount - this.siblingCount * 2 - 1\n      ),\n      // Greater than startPages\n      this.boundaryCount + 2\n    );\n\n    const siblingsEnd = Math.min(\n      Math.max(\n        // Natural end\n        this.page + this.siblingCount,\n        // Upper boundary when page is low\n        this.boundaryCount + this.siblingCount * 2 + 2\n      ),\n      // Less than endPages\n      endPages[0] - 2\n    );\n\n    const itemList = [\n      ...startPages,\n\n      // Start ellipsis\n      ...(siblingsStart > this.boundaryCount + 2\n        ? [null]\n        : this.boundaryCount + 1 < this.pagesCount - this.boundaryCount\n        ? [this.boundaryCount + 1]\n        : []),\n\n      // Sibling pages\n      ...range(siblingsStart, siblingsEnd),\n\n      // End ellipsis\n      ...(siblingsEnd < this.pagesCount - this.boundaryCount - 1\n        ? [null]\n        : this.pagesCount - this.boundaryCount > this.boundaryCount\n        ? [this.pagesCount - this.boundaryCount]\n        : []),\n\n      ...endPages\n    ];\n\n    return itemList;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onPageSizeChange(pageSize: number) {\n    this.pageSizeChange.emit(pageSize);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onPageClick(page: number) {\n    this.pageChange.emit(page);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onNextPage() {\n    this.pageChange.emit(Math.min(this.page + 1, this.pagesCount));\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onPrevPage() {\n    this.pageChange.emit(Math.max(1, this.page - 1));\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSubmit(event: Event) {\n    event.preventDefault();\n    if (this.pageGoTo) {\n      const page = Math.max(1, Math.min(+this.pageGoTo, this.pagesCount));\n      this.pageChange.emit(page);\n    }\n  }\n\n  /**\n   * Prevent letter typing\n   */\n  /**\n   * @internal\n   * @ignore\n   */\n  public onKeyPress(event: KeyboardEvent) {\n    const key = event.key;\n    const regex = /[0-9]/;\n\n    if (key === 'Enter' || regex.test(key)) {\n      return;\n    }\n\n    event.preventDefault();\n  }\n\n  @HostListener('window:keydown.shift.arrowright', ['$event']) public onKeyWrightDown(\n    event: KeyboardEvent\n  ) {\n    this.onNextPage();\n  }\n\n  @HostListener('window:keydown.shift.arrowleft', ['$event']) public onKeyLeftDown(\n    event: KeyboardEvent\n  ) {\n    if (this.page !== 1) {\n      this.onPrevPage();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "boundaryCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "pageSizeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "siblingCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESTooltipDefaultOptions",
            "id": "interface-ESTooltipDefaultOptions-04bf355533bc0c852c0e46236b58d9a8",
            "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  InjectionToken,\n  ViewContainerRef,\n  AfterViewInit,\n  HostBinding,\n  HostListener\n} from '@angular/core';\n\nimport { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';\nimport { getInnerFocusableElement } from '../../cdk/a11y';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput, coerceBooleanProperty, NumberInput } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedOverlayPositionChange\n} from '@angular/cdk/overlay';\nimport { Platform, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\n\nimport {\n  TooltipPosition,\n  TooltipTouchGestures,\n  getMatTooltipInvalidPositionError,\n  MAT_TOOLTIP_SCROLL_STRATEGY,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltipDefaultOptions\n} from '@angular/material/tooltip';\n\nimport { Subject } from 'rxjs';\nimport { take, takeUntil, delay as delayPipe } from 'rxjs/operators';\n\nimport { ESTooltipComponent } from './tooltip.component';\nimport { ESTooltipService } from './tooltip.service';\n\n/** CSS class that will be attached to the overlay panel. */\nconst TOOLTIP_PANEL_CLASS = 'es-tooltip-panel';\n\n/** Margin of .es-tooltip container */\nconst TOOLTIP_MARGIN = 12;\n\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n\n/**\n * Number of past mouse locations to track.\n */\nconst MOUSE_LOCATIONS_TRACKED = 3;\n\n/**\n * Delay in ms before closing a tooltip when mouse moves towards the component.\n */\nconst MOUSE_AIM_DELAY = 300;\n\nexport interface ESTooltipDefaultOptions {\n  arrow?: boolean;\n  mouseAimDelay?: number;\n}\n\nexport const ES_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken<ESTooltipDefaultOptions>(\n  'ES_TOOLTIP_DEFAULT_OPTIONS'\n);\n\ninterface ESTooltipMouseLocation {\n  x: number;\n  y: number;\n}\n\nfunction slope(a: ESTooltipMouseLocation, b: ESTooltipMouseLocation) {\n  return (b.y - a.y) / (b.x - a.x);\n}\n\n@Directive({\n  selector: '[esTooltip]',\n  exportAs: 'esTooltip'\n})\nexport class ESTooltipDirective implements OnDestroy, AfterViewInit {\n  @HostBinding('class.es-tooltip-trigger') public class = true;\n\n  @HostListener('document:mousemove', ['$event']) public onMouseMove(event: MouseEvent) {\n    this.mouseLocations.push({ x: event.pageX, y: event.pageY });\n\n    if (this.mouseLocations.length > MOUSE_LOCATIONS_TRACKED) {\n      this.mouseLocations.shift();\n    }\n  }\n\n  @HostListener('focusout', ['$event']) public onFocusOut(event: FocusEvent) {\n    if (this.disableFocusListener) {\n      return;\n    }\n\n    if (this.tooltipInstance) {\n      if (this.interactive) {\n        const isNext =\n          event.relatedTarget &&\n          (event.target as HTMLElement).compareDocumentPosition(\n            event.relatedTarget as HTMLElement\n          ) === 4;\n\n        const element = getInnerFocusableElement(this.tooltipInstance.elementRef.nativeElement);\n\n        if (isNext && element) {\n          (element as HTMLElement).focus();\n        } else if (event.relatedTarget) {\n          this.hide(0);\n        }\n      } else {\n        this.hide(0);\n      }\n    }\n  }\n\n  private _position: TooltipPosition = 'below';\n\n  /**\n   * Allows the user to define the position of the tooltip relative to the parent element.\n   */\n  @Input('esTooltipPosition')\n  public get position(): TooltipPosition {\n    return this._position;\n  }\n  public set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this.overlayRef) {\n        this.updatePosition();\n\n        if (this.tooltipInstance) {\n          this.tooltipInstance.show(0);\n        }\n\n        this.overlayRef.updatePosition();\n      }\n    }\n  }\n\n  private _disabled = false;\n\n  /**\n   * Disables the display of the tooltip.\n   */\n  @Input('esTooltipDisabled')\n  public get disabled() {\n    return this._disabled;\n  }\n  public set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this.setupPointerEvents();\n    }\n  }\n\n  /**\n   * The default delay in ms before showing the tooltip after show is called.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipShowDelay') public showDelay: number = this.defaultOptions?.showDelay;\n\n  /**\n   * The default delay in ms before hiding the tooltip after hide is called.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipHideDelay') public hideDelay: number = this.defaultOptions?.hideDelay;\n\n  /**\n   * Delay in ms before closing a tooltip when mouse stops moving towards the tooltip.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipMouseAimDelay') public mouseAimDelay: number =\n    this.esDefaultOptions?.mouseAimDelay || MOUSE_AIM_DELAY;\n\n  /**\n   * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n   * uses a long press gesture to show and hide, however it can conflict with the native browser\n   * gestures. To work around the conflict, Angular Material disables native gestures on the\n   * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n   * elements). The different values for this option configure the touch event handling as follows:\n   * - auto - Enables touch gestures for all elements, but tries to avoid conflicts with native\n   * browser gestures on particular elements. In particular, it allows text selection on inputs and\n   * textareas, and preserves the native browser dragging on elements marked as draggable.\n   * - on - Enables touch gestures for all elements and disables native browser gestures with no\n   * exceptions.\n   * - off - Disables touch gestures. Note that this will prevent the tooltip from showing on touch\n   * devices.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipTouchGestures') public touchGestures: TooltipTouchGestures = 'auto';\n\n  private _arrow = this.esDefaultOptions?.arrow ?? false;\n\n  /**\n   * If true, adds an arrow to the tooltip.\n   */\n  @Input('esTooltipArrow')\n  public get arrow() {\n    return this._arrow;\n  }\n  public set arrow(value: any) {\n    this._arrow = coerceBooleanProperty(value);\n  }\n\n  private _interactive = false;\n\n  /**\n   * Makes a tooltip interactive, i.e. will not close when the user hovers over the tooltip.\n   */\n  @Input('esTooltipInteractive')\n  public get interactive() {\n    return this._interactive;\n  }\n  public set interactive(value: any) {\n    this._interactive = coerceBooleanProperty(value);\n  }\n\n  private _content: ElementRef<HTMLElement>;\n\n  /**\n   * Template to display instead of the message.\n   */\n  @Input('esTooltipContent')\n  public get content() {\n    return this._content;\n  }\n  public set content(value) {\n    if (this.message) {\n      this.ariaDescriber.removeDescription(this.elementRef.nativeElement, this._message);\n    }\n\n    this._content = value;\n\n    if (!(this.message || this._content) && this.isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this.setupPointerEvents();\n      this.updateTooltipMessage();\n      if (this.message) {\n        this.ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => {\n            this.ariaDescriber.describe(this.elementRef.nativeElement, this.message);\n          });\n        });\n      }\n    }\n  }\n\n  private _message = '';\n\n  /**\n   * The message to be displayed in the tooltip.\n   */\n  @Input('esTooltip')\n  public get message() {\n    return this._message;\n  }\n  public set message(value: string) {\n    if (this._message) {\n      this.ariaDescriber.removeDescription(this.elementRef.nativeElement, this._message);\n    }\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!(this._message || this.content) && this.isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this.setupPointerEvents();\n      this.updateTooltipMessage();\n      this.ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this.ariaDescriber.describe(this.elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n\n  private _tooltipClass: string | string[] | Set<string> | { [key: string]: any };\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('esTooltipClass')\n  public get tooltipClass() {\n    return this._tooltipClass;\n  }\n  public set tooltipClass(value: string | string[] | Set<string> | { [key: string]: any }) {\n    this._tooltipClass = value;\n    if (this.tooltipInstance) {\n      this.setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  /**\n   * Do not respond to focus events.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableFocusListener') public disableFocusListener = false;\n\n  /**\n   * Do not respond to hover events.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableHoverListener') public disableHoverListener = false;\n\n  /**\n   * Do not respond to focus events after tooltip is opened.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableCloseFocusListener') public disableCloseFocusListener: boolean;\n\n  /**\n   * Do not respond to hover events after tooltip is opened.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableCloseHoverListener') public disableCloseHoverListener: boolean;\n\n  /**\n   * Do not respond to body click events.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableCloseClickListener') public disableCloseClickListener = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public overlayRef: OverlayRef | null;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public tooltipInstance: ESTooltipComponent | null;\n\n  private portal: ComponentPortal<ESTooltipComponent>;\n\n  private scrollStrategy: () => ScrollStrategy;\n  private viewInitialized = false;\n\n  private isHovered = false;\n  private mouseLocations: Array<ESTooltipMouseLocation> = [];\n  private mouseLastDelayLocation: ESTooltipMouseLocation;\n  private mouseMoveTimeoutId: NodeJS.Timeout;\n\n  private overlayPosition: 'right' | 'left' | 'top' | 'bottom';\n\n  /**\n   * Manually-bound passive event listeners.\n   */\n  private passiveListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /**\n   * Timer started at the last `touchstart` event.\n   */\n  private touchstartTimeout: NodeJS.Timeout;\n\n  /**\n   * Emits when the component is destroyed.\n   */\n  private readonly destroyed$ = new Subject<void>();\n\n  /**\n   * @internal\n   * @ignore\n   */\n  constructor(\n    private overlay: Overlay,\n    private elementRef: ElementRef<HTMLElement>,\n    private scrollDispatcher: ScrollDispatcher,\n    private viewContainerRef: ViewContainerRef,\n    private ngZone: NgZone,\n    private platform: Platform,\n    private ariaDescriber: AriaDescriber,\n    private focusMonitor: FocusMonitor,\n    private tooltipService: ESTooltipService,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private dir: Directionality,\n    @Optional()\n    @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n    private defaultOptions: MatTooltipDefaultOptions,\n    @Optional()\n    @Inject(ES_TOOLTIP_DEFAULT_OPTIONS)\n    private esDefaultOptions: ESTooltipDefaultOptions\n  ) {\n    this.scrollStrategy = scrollStrategy;\n\n    if (defaultOptions) {\n      if (defaultOptions.position) {\n        this.position = defaultOptions.position;\n      }\n\n      if (defaultOptions.touchGestures) {\n        this.touchGestures = defaultOptions.touchGestures;\n      }\n    }\n\n    ngZone.runOutsideAngular(() => {\n      elementRef.nativeElement.addEventListener('keydown', this.onKeyDown);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this.viewInitialized = true;\n    this.setupPointerEvents();\n\n    this.focusMonitor\n      .monitor(this.elementRef)\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((origin) => {\n        if (this.disableFocusListener) {\n          return;\n        }\n        // Note that the focus monitor runs outside the Angular zone.\n        if (origin === 'keyboard') {\n          this.ngZone.run(() => this.show());\n        }\n      });\n  }\n\n  /**\n   * @ignore\n   * Dispose the tooltip when destroyed.\n   */\n  public ngOnDestroy() {\n    const nativeElement = this.elementRef.nativeElement;\n\n    clearTimeout(this.touchstartTimeout);\n\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n      this.tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    nativeElement.removeEventListener('keydown', this.onKeyDown);\n    this.passiveListeners.forEach((listener, event) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this.passiveListeners.clear();\n\n    this.destroyed$.next();\n    this.destroyed$.complete();\n\n    this.ariaDescriber.removeDescription(nativeElement, this.message);\n    this.focusMonitor.stopMonitoring(nativeElement);\n  }\n\n  /**\n   * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input.\n   */\n  public show(delay: number = this.showDelay): void {\n    if (\n      this.disabled ||\n      !(this.message || this.content) ||\n      (this.isTooltipVisible() &&\n        !this.tooltipInstance.showTimeoutId &&\n        !this.tooltipInstance.hideTimeoutId)\n    ) {\n      return;\n    }\n\n    const overlayRef = this.createOverlay();\n    this.detach();\n    this.portal = this.portal || new ComponentPortal(ESTooltipComponent, this.viewContainerRef);\n    this.tooltipInstance = overlayRef.attach(this.portal).instance;\n    this.tooltipInstance\n      .afterHidden()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(() => this.detach());\n    this.setTooltipClass(this._tooltipClass);\n    this.tooltipInstance.parent = this;\n    this.tooltipInstance.parentElementRef = this.elementRef;\n    this.tooltipInstance.interactive = this.interactive;\n\n    this.tooltipInstance.disableCloseFocusListener =\n      this.disableCloseFocusListener ?? this.disableFocusListener;\n    this.tooltipInstance.disableCloseHoverListener =\n      this.disableCloseHoverListener ?? this.disableHoverListener;\n    this.tooltipInstance.disableCloseClickListener = this.disableCloseClickListener;\n\n    this.updateTooltipMessage();\n    this.tooltipInstance.show(delay);\n  }\n\n  /**\n   * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input.\n   */\n  public hide(delay: number = this.hideDelay) {\n    if (this.tooltipInstance) {\n      this.cancelPossiblyHide();\n      this.tooltipInstance.hide(delay);\n    }\n  }\n\n  /**\n   * Shows/hides the tooltip.\n   */\n  public toggle() {\n    this.isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /**\n   * Returns true if the tooltip is currently visible to the user.\n   */\n  public isTooltipVisible() {\n    return !!this.tooltipInstance && this.tooltipInstance.isVisible();\n  }\n\n  /**\n   * Handles the keydown events on the host element.\n   * Needs to be an arrow function so that we can use it in addEventListener.\n   */\n  private onKeyDown = (event: KeyboardEvent) => {\n    // tslint:disable-next-line:deprecation\n    if (this.isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.ngZone.run(() => this.hide(0));\n    }\n  };\n\n  /**\n   * Create the overlay config and position strategy.\n   */\n  private createOverlay(): OverlayRef {\n    if (this.overlayRef) {\n      return this.overlayRef;\n    }\n\n    const scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this.overlay\n      .position()\n      .flexibleConnectedTo(this.elementRef)\n      .withTransformOriginOn('.es-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this.destroyed$)).subscribe((change) => {\n      if (this.tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this.tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this.ngZone.run(() => this.hide(0));\n        } else {\n          this.updateTooltipArrowPosition(change);\n        }\n      }\n    });\n\n    this.overlayRef = this.overlay.create({\n      direction: this.dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this.scrollStrategy()\n    });\n\n    this.updatePosition();\n\n    this.overlayRef\n      .detachments()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(() => this.detach());\n\n    return this.overlayRef;\n  }\n\n  /**\n   * Detaches the currently-attached tooltip.\n   */\n  private detach() {\n    if (this.overlayRef && this.overlayRef.hasAttached()) {\n      this.overlayRef.detach();\n    }\n\n    this.tooltipInstance = null;\n  }\n\n  /**\n   * Updates the position of the current tooltip.\n   */\n  private updatePosition() {\n    const position = this.overlayRef.getConfig()\n      .positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this.getOrigin();\n    const overlay = this.getOverlayPosition();\n\n    position.withPositions([\n      { ...origin.main, ...overlay.main },\n      { ...origin.fallback, ...overlay.fallback }\n    ]);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  public getOrigin(): { main: OriginConnectionPosition; fallback: OriginConnectionPosition } {\n    const isLtr = !this.dir || this.dir.value === 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position === 'above' || position === 'below') {\n      originPosition = { originX: 'center', originY: position === 'above' ? 'top' : 'bottom' };\n    } else if (\n      position === 'before' ||\n      (position === 'left' && isLtr) ||\n      (position === 'right' && !isLtr)\n    ) {\n      originPosition = { originX: 'start', originY: 'center' };\n    } else if (\n      position === 'after' ||\n      (position === 'right' && isLtr) ||\n      (position === 'left' && !isLtr)\n    ) {\n      originPosition = { originX: 'end', originY: 'center' };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const { x, y } = this.invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: { originX: x, originY: y }\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns the overlay position and a fallback position based on the user's preference.\n   */\n  public getOverlayPosition(): {\n    main: OverlayConnectionPosition;\n    fallback: OverlayConnectionPosition;\n  } {\n    const isLtr = !this.dir || this.dir.value === 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position === 'above') {\n      overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n    } else if (position === 'below') {\n      overlayPosition = { overlayX: 'center', overlayY: 'top' };\n    } else if (\n      position === 'before' ||\n      (position === 'left' && isLtr) ||\n      (position === 'right' && !isLtr)\n    ) {\n      overlayPosition = { overlayX: 'end', overlayY: 'center' };\n    } else if (\n      position === 'after' ||\n      (position === 'right' && isLtr) ||\n      (position === 'left' && !isLtr)\n    ) {\n      overlayPosition = { overlayX: 'start', overlayY: 'center' };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const { x, y } = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: { overlayX: x, overlayY: y }\n    };\n  }\n\n  /**\n   * Updates the tooltip message and repositions the overlay according to the new message length.\n   */\n  private updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this.tooltipInstance) {\n      this.tooltipInstance.message = this.message;\n      this.tooltipInstance.content = this.content;\n      this.tooltipInstance.markForCheck();\n\n      this.ngZone.onMicrotaskEmpty\n        .asObservable()\n        .pipe(take(1), takeUntil(this.destroyed$))\n        .subscribe(() => {\n          if (this.tooltipInstance) {\n            this.overlayRef.updatePosition();\n          }\n        });\n    }\n  }\n\n  /**\n   * Updates the arrow position.\n   */\n  private updateTooltipArrowPosition(change: ConnectedOverlayPositionChange) {\n    if (this.arrow && this.tooltipInstance) {\n      const rect = this.elementRef.nativeElement.getBoundingClientRect();\n      const rectTooltip = this.tooltipInstance.elementRef.nativeElement.getBoundingClientRect();\n\n      const diffX = rect.left - rectTooltip.left - TOOLTIP_MARGIN;\n      const diffY = rect.top - rectTooltip.top - TOOLTIP_MARGIN;\n\n      const offsetX = Math.ceil(diffX + this.elementRef.nativeElement.clientWidth / 2);\n      const offsetY = Math.ceil(diffY + this.elementRef.nativeElement.clientHeight / 2);\n\n      if (change.connectionPair.originX === 'end') {\n        this.overlayPosition = 'right';\n        this.tooltipInstance.arrow = {\n          position: 'left',\n          offsetY\n        };\n      } else if (change.connectionPair.originX === 'start') {\n        this.overlayPosition = 'left';\n        this.tooltipInstance.arrow = {\n          position: 'right',\n          offsetY\n        };\n      } else if (change.connectionPair.originY === 'top') {\n        this.overlayPosition = 'top';\n        this.tooltipInstance.arrow = {\n          position: 'bottom',\n          offsetX\n        };\n      } else if (change.connectionPair.originY === 'bottom') {\n        this.overlayPosition = 'bottom';\n        this.tooltipInstance.arrow = {\n          position: 'top',\n          offsetX\n        };\n      }\n\n      this.tooltipInstance.markForCheck();\n    }\n  }\n\n  /**\n   * Updates the tooltip class.\n   */\n  private setTooltipClass(tooltipClass: string | string[] | Set<string> | { [key: string]: any }) {\n    if (this.tooltipInstance) {\n      this.tooltipInstance.tooltipClass = tooltipClass;\n      this.tooltipInstance.markForCheck();\n    }\n  }\n\n  /**\n   * Inverts an overlay position.\n   */\n  private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return { x, y };\n  }\n\n  /**\n   * Binds the pointer events to the tooltip trigger.\n   */\n  private setupPointerEvents() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (\n      this._disabled ||\n      !(this.message || this.content) ||\n      !this.viewInitialized ||\n      this.passiveListeners.size\n    ) {\n      return;\n    }\n\n    const onMouseEnter = () => {\n      this.isHovered = true;\n\n      if (this.disableHoverListener) {\n        return;\n      }\n\n      const tooltip = document.querySelector('.es-tooltip');\n      if (tooltip) {\n        this.tooltipService.closed$.pipe(take(1), delayPipe(1)).subscribe(() => {\n          if (this.isHovered) {\n            onMouseEnter();\n          }\n        });\n\n        return;\n      }\n\n      this.show();\n    };\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!this.platform.IOS && !this.platform.ANDROID) {\n      this.passiveListeners.set('mouseenter', onMouseEnter).set('mouseleave', () => {\n        this.isHovered = false;\n\n        if (this.disableCloseHoverListener ?? this.disableHoverListener) {\n          return;\n        }\n\n        if (this.interactive) {\n          if (this.tooltipInstance) {\n            this.possiblyHide();\n          }\n        } else {\n          this.hide();\n        }\n      });\n    } else if (this.touchGestures !== 'off') {\n      this.disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        clearTimeout(this.touchstartTimeout);\n        this.hide(this.defaultOptions.touchendHideDelay);\n      };\n\n      this.passiveListeners\n        .set('touchend', touchendListener)\n        .set('touchcancel', touchendListener)\n        .set('touchstart', () => {\n          // Note that it's important that we don't `preventDefault` here,\n          // because it can prevent click events from firing on the element.\n          clearTimeout(this.touchstartTimeout);\n          this.touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n        });\n    }\n\n    this.passiveListeners.forEach((listener, event) => {\n      this.elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  /**\n   * Disables the native browser gestures, based on how the tooltip has been configured.\n   */\n  private disableNativeGesturesIfNecessary() {\n    const element = this.elementRef.nativeElement;\n    const style = element.style;\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n        style.userSelect = (style as any).msUserSelect = style.webkitUserSelect = (style as any).MozUserSelect =\n          'none';\n      }\n\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        (style as any).webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      // style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n  public cancelPossiblyHide = () => {\n    if (this.mouseMoveTimeoutId) {\n      clearTimeout(this.mouseMoveTimeoutId);\n    }\n  };\n\n  private possiblyHide = () => {\n    const delay = this.getHideDelay();\n\n    if (delay) {\n      this.mouseMoveTimeoutId = setTimeout(() => {\n        this.possiblyHide();\n      }, delay);\n    } else {\n      this.hide(0);\n    }\n  };\n\n  private getHideDelay = () => {\n    const tooltip = this.tooltipInstance.elementRef.nativeElement;\n    const tooltipRect = tooltip.getBoundingClientRect();\n\n    const offset = {\n      top: tooltipRect.top + window.scrollY,\n      left: tooltipRect.left + window.scrollX\n    };\n\n    const upperLeft = {\n      x: offset.left,\n      y: offset.top\n    };\n    const upperRight = {\n      x: offset.left + tooltip.offsetWidth,\n      y: upperLeft.y\n    };\n    const lowerLeft = {\n      x: offset.left,\n      y: offset.top + tooltip.offsetHeight\n    };\n    const lowerRight = {\n      x: offset.left + tooltip.offsetWidth,\n      y: lowerLeft.y\n    };\n\n    const location = this.mouseLocations[this.mouseLocations.length - 1];\n    let previousLocation = this.mouseLocations[0];\n\n    if (!location) {\n      return 0;\n    }\n\n    if (!previousLocation) {\n      previousLocation = location;\n    }\n\n    if (\n      this.mouseLastDelayLocation &&\n      location.x === this.mouseLastDelayLocation.x &&\n      location.y === this.mouseLastDelayLocation.y\n    ) {\n      // If the mouse hasn't moved since the last time we checked, immediately hide.\n      return 0;\n    }\n\n    let decreasingCorner = upperLeft;\n    let increasingCorner = lowerLeft;\n\n    if (this.overlayPosition === 'left') {\n      decreasingCorner = lowerRight;\n      increasingCorner = upperRight;\n    } else if (this.overlayPosition === 'bottom') {\n      decreasingCorner = upperRight;\n      increasingCorner = upperLeft;\n    } else if (this.overlayPosition === 'top') {\n      decreasingCorner = lowerLeft;\n      increasingCorner = lowerRight;\n    }\n\n    const decreasingSlope = slope(location, decreasingCorner);\n    const increasingSlope = slope(location, increasingCorner);\n    const prevDecreasingSlope = slope(previousLocation, decreasingCorner);\n    const prevIncreasingSlope = slope(previousLocation, increasingCorner);\n\n    if (decreasingSlope < prevDecreasingSlope && increasingSlope > prevIncreasingSlope) {\n      this.mouseLastDelayLocation = location;\n      return this.mouseAimDelay;\n    }\n\n    this.mouseLastDelayLocation = null;\n    return 0;\n  };\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_disabled: BooleanInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_hideDelay: NumberInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_showDelay: NumberInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_mouseAimDelay: NumberInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_interactive: BooleanInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_arrow: BooleanInput;\n}\n",
            "properties": [
                {
                    "name": "arrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "mouseAimDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 93
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ESTooltipMouseLocation",
            "id": "interface-ESTooltipMouseLocation-04bf355533bc0c852c0e46236b58d9a8",
            "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  InjectionToken,\n  ViewContainerRef,\n  AfterViewInit,\n  HostBinding,\n  HostListener\n} from '@angular/core';\n\nimport { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';\nimport { getInnerFocusableElement } from '../../cdk/a11y';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput, coerceBooleanProperty, NumberInput } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedOverlayPositionChange\n} from '@angular/cdk/overlay';\nimport { Platform, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\n\nimport {\n  TooltipPosition,\n  TooltipTouchGestures,\n  getMatTooltipInvalidPositionError,\n  MAT_TOOLTIP_SCROLL_STRATEGY,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltipDefaultOptions\n} from '@angular/material/tooltip';\n\nimport { Subject } from 'rxjs';\nimport { take, takeUntil, delay as delayPipe } from 'rxjs/operators';\n\nimport { ESTooltipComponent } from './tooltip.component';\nimport { ESTooltipService } from './tooltip.service';\n\n/** CSS class that will be attached to the overlay panel. */\nconst TOOLTIP_PANEL_CLASS = 'es-tooltip-panel';\n\n/** Margin of .es-tooltip container */\nconst TOOLTIP_MARGIN = 12;\n\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n\n/**\n * Number of past mouse locations to track.\n */\nconst MOUSE_LOCATIONS_TRACKED = 3;\n\n/**\n * Delay in ms before closing a tooltip when mouse moves towards the component.\n */\nconst MOUSE_AIM_DELAY = 300;\n\nexport interface ESTooltipDefaultOptions {\n  arrow?: boolean;\n  mouseAimDelay?: number;\n}\n\nexport const ES_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken<ESTooltipDefaultOptions>(\n  'ES_TOOLTIP_DEFAULT_OPTIONS'\n);\n\ninterface ESTooltipMouseLocation {\n  x: number;\n  y: number;\n}\n\nfunction slope(a: ESTooltipMouseLocation, b: ESTooltipMouseLocation) {\n  return (b.y - a.y) / (b.x - a.x);\n}\n\n@Directive({\n  selector: '[esTooltip]',\n  exportAs: 'esTooltip'\n})\nexport class ESTooltipDirective implements OnDestroy, AfterViewInit {\n  @HostBinding('class.es-tooltip-trigger') public class = true;\n\n  @HostListener('document:mousemove', ['$event']) public onMouseMove(event: MouseEvent) {\n    this.mouseLocations.push({ x: event.pageX, y: event.pageY });\n\n    if (this.mouseLocations.length > MOUSE_LOCATIONS_TRACKED) {\n      this.mouseLocations.shift();\n    }\n  }\n\n  @HostListener('focusout', ['$event']) public onFocusOut(event: FocusEvent) {\n    if (this.disableFocusListener) {\n      return;\n    }\n\n    if (this.tooltipInstance) {\n      if (this.interactive) {\n        const isNext =\n          event.relatedTarget &&\n          (event.target as HTMLElement).compareDocumentPosition(\n            event.relatedTarget as HTMLElement\n          ) === 4;\n\n        const element = getInnerFocusableElement(this.tooltipInstance.elementRef.nativeElement);\n\n        if (isNext && element) {\n          (element as HTMLElement).focus();\n        } else if (event.relatedTarget) {\n          this.hide(0);\n        }\n      } else {\n        this.hide(0);\n      }\n    }\n  }\n\n  private _position: TooltipPosition = 'below';\n\n  /**\n   * Allows the user to define the position of the tooltip relative to the parent element.\n   */\n  @Input('esTooltipPosition')\n  public get position(): TooltipPosition {\n    return this._position;\n  }\n  public set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this.overlayRef) {\n        this.updatePosition();\n\n        if (this.tooltipInstance) {\n          this.tooltipInstance.show(0);\n        }\n\n        this.overlayRef.updatePosition();\n      }\n    }\n  }\n\n  private _disabled = false;\n\n  /**\n   * Disables the display of the tooltip.\n   */\n  @Input('esTooltipDisabled')\n  public get disabled() {\n    return this._disabled;\n  }\n  public set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this.setupPointerEvents();\n    }\n  }\n\n  /**\n   * The default delay in ms before showing the tooltip after show is called.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipShowDelay') public showDelay: number = this.defaultOptions?.showDelay;\n\n  /**\n   * The default delay in ms before hiding the tooltip after hide is called.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipHideDelay') public hideDelay: number = this.defaultOptions?.hideDelay;\n\n  /**\n   * Delay in ms before closing a tooltip when mouse stops moving towards the tooltip.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipMouseAimDelay') public mouseAimDelay: number =\n    this.esDefaultOptions?.mouseAimDelay || MOUSE_AIM_DELAY;\n\n  /**\n   * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n   * uses a long press gesture to show and hide, however it can conflict with the native browser\n   * gestures. To work around the conflict, Angular Material disables native gestures on the\n   * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n   * elements). The different values for this option configure the touch event handling as follows:\n   * - auto - Enables touch gestures for all elements, but tries to avoid conflicts with native\n   * browser gestures on particular elements. In particular, it allows text selection on inputs and\n   * textareas, and preserves the native browser dragging on elements marked as draggable.\n   * - on - Enables touch gestures for all elements and disables native browser gestures with no\n   * exceptions.\n   * - off - Disables touch gestures. Note that this will prevent the tooltip from showing on touch\n   * devices.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipTouchGestures') public touchGestures: TooltipTouchGestures = 'auto';\n\n  private _arrow = this.esDefaultOptions?.arrow ?? false;\n\n  /**\n   * If true, adds an arrow to the tooltip.\n   */\n  @Input('esTooltipArrow')\n  public get arrow() {\n    return this._arrow;\n  }\n  public set arrow(value: any) {\n    this._arrow = coerceBooleanProperty(value);\n  }\n\n  private _interactive = false;\n\n  /**\n   * Makes a tooltip interactive, i.e. will not close when the user hovers over the tooltip.\n   */\n  @Input('esTooltipInteractive')\n  public get interactive() {\n    return this._interactive;\n  }\n  public set interactive(value: any) {\n    this._interactive = coerceBooleanProperty(value);\n  }\n\n  private _content: ElementRef<HTMLElement>;\n\n  /**\n   * Template to display instead of the message.\n   */\n  @Input('esTooltipContent')\n  public get content() {\n    return this._content;\n  }\n  public set content(value) {\n    if (this.message) {\n      this.ariaDescriber.removeDescription(this.elementRef.nativeElement, this._message);\n    }\n\n    this._content = value;\n\n    if (!(this.message || this._content) && this.isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this.setupPointerEvents();\n      this.updateTooltipMessage();\n      if (this.message) {\n        this.ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => {\n            this.ariaDescriber.describe(this.elementRef.nativeElement, this.message);\n          });\n        });\n      }\n    }\n  }\n\n  private _message = '';\n\n  /**\n   * The message to be displayed in the tooltip.\n   */\n  @Input('esTooltip')\n  public get message() {\n    return this._message;\n  }\n  public set message(value: string) {\n    if (this._message) {\n      this.ariaDescriber.removeDescription(this.elementRef.nativeElement, this._message);\n    }\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!(this._message || this.content) && this.isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this.setupPointerEvents();\n      this.updateTooltipMessage();\n      this.ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this.ariaDescriber.describe(this.elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n\n  private _tooltipClass: string | string[] | Set<string> | { [key: string]: any };\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('esTooltipClass')\n  public get tooltipClass() {\n    return this._tooltipClass;\n  }\n  public set tooltipClass(value: string | string[] | Set<string> | { [key: string]: any }) {\n    this._tooltipClass = value;\n    if (this.tooltipInstance) {\n      this.setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  /**\n   * Do not respond to focus events.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableFocusListener') public disableFocusListener = false;\n\n  /**\n   * Do not respond to hover events.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableHoverListener') public disableHoverListener = false;\n\n  /**\n   * Do not respond to focus events after tooltip is opened.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableCloseFocusListener') public disableCloseFocusListener: boolean;\n\n  /**\n   * Do not respond to hover events after tooltip is opened.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableCloseHoverListener') public disableCloseHoverListener: boolean;\n\n  /**\n   * Do not respond to body click events.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableCloseClickListener') public disableCloseClickListener = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public overlayRef: OverlayRef | null;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public tooltipInstance: ESTooltipComponent | null;\n\n  private portal: ComponentPortal<ESTooltipComponent>;\n\n  private scrollStrategy: () => ScrollStrategy;\n  private viewInitialized = false;\n\n  private isHovered = false;\n  private mouseLocations: Array<ESTooltipMouseLocation> = [];\n  private mouseLastDelayLocation: ESTooltipMouseLocation;\n  private mouseMoveTimeoutId: NodeJS.Timeout;\n\n  private overlayPosition: 'right' | 'left' | 'top' | 'bottom';\n\n  /**\n   * Manually-bound passive event listeners.\n   */\n  private passiveListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /**\n   * Timer started at the last `touchstart` event.\n   */\n  private touchstartTimeout: NodeJS.Timeout;\n\n  /**\n   * Emits when the component is destroyed.\n   */\n  private readonly destroyed$ = new Subject<void>();\n\n  /**\n   * @internal\n   * @ignore\n   */\n  constructor(\n    private overlay: Overlay,\n    private elementRef: ElementRef<HTMLElement>,\n    private scrollDispatcher: ScrollDispatcher,\n    private viewContainerRef: ViewContainerRef,\n    private ngZone: NgZone,\n    private platform: Platform,\n    private ariaDescriber: AriaDescriber,\n    private focusMonitor: FocusMonitor,\n    private tooltipService: ESTooltipService,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private dir: Directionality,\n    @Optional()\n    @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n    private defaultOptions: MatTooltipDefaultOptions,\n    @Optional()\n    @Inject(ES_TOOLTIP_DEFAULT_OPTIONS)\n    private esDefaultOptions: ESTooltipDefaultOptions\n  ) {\n    this.scrollStrategy = scrollStrategy;\n\n    if (defaultOptions) {\n      if (defaultOptions.position) {\n        this.position = defaultOptions.position;\n      }\n\n      if (defaultOptions.touchGestures) {\n        this.touchGestures = defaultOptions.touchGestures;\n      }\n    }\n\n    ngZone.runOutsideAngular(() => {\n      elementRef.nativeElement.addEventListener('keydown', this.onKeyDown);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this.viewInitialized = true;\n    this.setupPointerEvents();\n\n    this.focusMonitor\n      .monitor(this.elementRef)\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((origin) => {\n        if (this.disableFocusListener) {\n          return;\n        }\n        // Note that the focus monitor runs outside the Angular zone.\n        if (origin === 'keyboard') {\n          this.ngZone.run(() => this.show());\n        }\n      });\n  }\n\n  /**\n   * @ignore\n   * Dispose the tooltip when destroyed.\n   */\n  public ngOnDestroy() {\n    const nativeElement = this.elementRef.nativeElement;\n\n    clearTimeout(this.touchstartTimeout);\n\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n      this.tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    nativeElement.removeEventListener('keydown', this.onKeyDown);\n    this.passiveListeners.forEach((listener, event) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this.passiveListeners.clear();\n\n    this.destroyed$.next();\n    this.destroyed$.complete();\n\n    this.ariaDescriber.removeDescription(nativeElement, this.message);\n    this.focusMonitor.stopMonitoring(nativeElement);\n  }\n\n  /**\n   * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input.\n   */\n  public show(delay: number = this.showDelay): void {\n    if (\n      this.disabled ||\n      !(this.message || this.content) ||\n      (this.isTooltipVisible() &&\n        !this.tooltipInstance.showTimeoutId &&\n        !this.tooltipInstance.hideTimeoutId)\n    ) {\n      return;\n    }\n\n    const overlayRef = this.createOverlay();\n    this.detach();\n    this.portal = this.portal || new ComponentPortal(ESTooltipComponent, this.viewContainerRef);\n    this.tooltipInstance = overlayRef.attach(this.portal).instance;\n    this.tooltipInstance\n      .afterHidden()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(() => this.detach());\n    this.setTooltipClass(this._tooltipClass);\n    this.tooltipInstance.parent = this;\n    this.tooltipInstance.parentElementRef = this.elementRef;\n    this.tooltipInstance.interactive = this.interactive;\n\n    this.tooltipInstance.disableCloseFocusListener =\n      this.disableCloseFocusListener ?? this.disableFocusListener;\n    this.tooltipInstance.disableCloseHoverListener =\n      this.disableCloseHoverListener ?? this.disableHoverListener;\n    this.tooltipInstance.disableCloseClickListener = this.disableCloseClickListener;\n\n    this.updateTooltipMessage();\n    this.tooltipInstance.show(delay);\n  }\n\n  /**\n   * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input.\n   */\n  public hide(delay: number = this.hideDelay) {\n    if (this.tooltipInstance) {\n      this.cancelPossiblyHide();\n      this.tooltipInstance.hide(delay);\n    }\n  }\n\n  /**\n   * Shows/hides the tooltip.\n   */\n  public toggle() {\n    this.isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /**\n   * Returns true if the tooltip is currently visible to the user.\n   */\n  public isTooltipVisible() {\n    return !!this.tooltipInstance && this.tooltipInstance.isVisible();\n  }\n\n  /**\n   * Handles the keydown events on the host element.\n   * Needs to be an arrow function so that we can use it in addEventListener.\n   */\n  private onKeyDown = (event: KeyboardEvent) => {\n    // tslint:disable-next-line:deprecation\n    if (this.isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.ngZone.run(() => this.hide(0));\n    }\n  };\n\n  /**\n   * Create the overlay config and position strategy.\n   */\n  private createOverlay(): OverlayRef {\n    if (this.overlayRef) {\n      return this.overlayRef;\n    }\n\n    const scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this.overlay\n      .position()\n      .flexibleConnectedTo(this.elementRef)\n      .withTransformOriginOn('.es-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this.destroyed$)).subscribe((change) => {\n      if (this.tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this.tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this.ngZone.run(() => this.hide(0));\n        } else {\n          this.updateTooltipArrowPosition(change);\n        }\n      }\n    });\n\n    this.overlayRef = this.overlay.create({\n      direction: this.dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this.scrollStrategy()\n    });\n\n    this.updatePosition();\n\n    this.overlayRef\n      .detachments()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(() => this.detach());\n\n    return this.overlayRef;\n  }\n\n  /**\n   * Detaches the currently-attached tooltip.\n   */\n  private detach() {\n    if (this.overlayRef && this.overlayRef.hasAttached()) {\n      this.overlayRef.detach();\n    }\n\n    this.tooltipInstance = null;\n  }\n\n  /**\n   * Updates the position of the current tooltip.\n   */\n  private updatePosition() {\n    const position = this.overlayRef.getConfig()\n      .positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this.getOrigin();\n    const overlay = this.getOverlayPosition();\n\n    position.withPositions([\n      { ...origin.main, ...overlay.main },\n      { ...origin.fallback, ...overlay.fallback }\n    ]);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  public getOrigin(): { main: OriginConnectionPosition; fallback: OriginConnectionPosition } {\n    const isLtr = !this.dir || this.dir.value === 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position === 'above' || position === 'below') {\n      originPosition = { originX: 'center', originY: position === 'above' ? 'top' : 'bottom' };\n    } else if (\n      position === 'before' ||\n      (position === 'left' && isLtr) ||\n      (position === 'right' && !isLtr)\n    ) {\n      originPosition = { originX: 'start', originY: 'center' };\n    } else if (\n      position === 'after' ||\n      (position === 'right' && isLtr) ||\n      (position === 'left' && !isLtr)\n    ) {\n      originPosition = { originX: 'end', originY: 'center' };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const { x, y } = this.invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: { originX: x, originY: y }\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns the overlay position and a fallback position based on the user's preference.\n   */\n  public getOverlayPosition(): {\n    main: OverlayConnectionPosition;\n    fallback: OverlayConnectionPosition;\n  } {\n    const isLtr = !this.dir || this.dir.value === 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position === 'above') {\n      overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n    } else if (position === 'below') {\n      overlayPosition = { overlayX: 'center', overlayY: 'top' };\n    } else if (\n      position === 'before' ||\n      (position === 'left' && isLtr) ||\n      (position === 'right' && !isLtr)\n    ) {\n      overlayPosition = { overlayX: 'end', overlayY: 'center' };\n    } else if (\n      position === 'after' ||\n      (position === 'right' && isLtr) ||\n      (position === 'left' && !isLtr)\n    ) {\n      overlayPosition = { overlayX: 'start', overlayY: 'center' };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const { x, y } = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: { overlayX: x, overlayY: y }\n    };\n  }\n\n  /**\n   * Updates the tooltip message and repositions the overlay according to the new message length.\n   */\n  private updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this.tooltipInstance) {\n      this.tooltipInstance.message = this.message;\n      this.tooltipInstance.content = this.content;\n      this.tooltipInstance.markForCheck();\n\n      this.ngZone.onMicrotaskEmpty\n        .asObservable()\n        .pipe(take(1), takeUntil(this.destroyed$))\n        .subscribe(() => {\n          if (this.tooltipInstance) {\n            this.overlayRef.updatePosition();\n          }\n        });\n    }\n  }\n\n  /**\n   * Updates the arrow position.\n   */\n  private updateTooltipArrowPosition(change: ConnectedOverlayPositionChange) {\n    if (this.arrow && this.tooltipInstance) {\n      const rect = this.elementRef.nativeElement.getBoundingClientRect();\n      const rectTooltip = this.tooltipInstance.elementRef.nativeElement.getBoundingClientRect();\n\n      const diffX = rect.left - rectTooltip.left - TOOLTIP_MARGIN;\n      const diffY = rect.top - rectTooltip.top - TOOLTIP_MARGIN;\n\n      const offsetX = Math.ceil(diffX + this.elementRef.nativeElement.clientWidth / 2);\n      const offsetY = Math.ceil(diffY + this.elementRef.nativeElement.clientHeight / 2);\n\n      if (change.connectionPair.originX === 'end') {\n        this.overlayPosition = 'right';\n        this.tooltipInstance.arrow = {\n          position: 'left',\n          offsetY\n        };\n      } else if (change.connectionPair.originX === 'start') {\n        this.overlayPosition = 'left';\n        this.tooltipInstance.arrow = {\n          position: 'right',\n          offsetY\n        };\n      } else if (change.connectionPair.originY === 'top') {\n        this.overlayPosition = 'top';\n        this.tooltipInstance.arrow = {\n          position: 'bottom',\n          offsetX\n        };\n      } else if (change.connectionPair.originY === 'bottom') {\n        this.overlayPosition = 'bottom';\n        this.tooltipInstance.arrow = {\n          position: 'top',\n          offsetX\n        };\n      }\n\n      this.tooltipInstance.markForCheck();\n    }\n  }\n\n  /**\n   * Updates the tooltip class.\n   */\n  private setTooltipClass(tooltipClass: string | string[] | Set<string> | { [key: string]: any }) {\n    if (this.tooltipInstance) {\n      this.tooltipInstance.tooltipClass = tooltipClass;\n      this.tooltipInstance.markForCheck();\n    }\n  }\n\n  /**\n   * Inverts an overlay position.\n   */\n  private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return { x, y };\n  }\n\n  /**\n   * Binds the pointer events to the tooltip trigger.\n   */\n  private setupPointerEvents() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (\n      this._disabled ||\n      !(this.message || this.content) ||\n      !this.viewInitialized ||\n      this.passiveListeners.size\n    ) {\n      return;\n    }\n\n    const onMouseEnter = () => {\n      this.isHovered = true;\n\n      if (this.disableHoverListener) {\n        return;\n      }\n\n      const tooltip = document.querySelector('.es-tooltip');\n      if (tooltip) {\n        this.tooltipService.closed$.pipe(take(1), delayPipe(1)).subscribe(() => {\n          if (this.isHovered) {\n            onMouseEnter();\n          }\n        });\n\n        return;\n      }\n\n      this.show();\n    };\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!this.platform.IOS && !this.platform.ANDROID) {\n      this.passiveListeners.set('mouseenter', onMouseEnter).set('mouseleave', () => {\n        this.isHovered = false;\n\n        if (this.disableCloseHoverListener ?? this.disableHoverListener) {\n          return;\n        }\n\n        if (this.interactive) {\n          if (this.tooltipInstance) {\n            this.possiblyHide();\n          }\n        } else {\n          this.hide();\n        }\n      });\n    } else if (this.touchGestures !== 'off') {\n      this.disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        clearTimeout(this.touchstartTimeout);\n        this.hide(this.defaultOptions.touchendHideDelay);\n      };\n\n      this.passiveListeners\n        .set('touchend', touchendListener)\n        .set('touchcancel', touchendListener)\n        .set('touchstart', () => {\n          // Note that it's important that we don't `preventDefault` here,\n          // because it can prevent click events from firing on the element.\n          clearTimeout(this.touchstartTimeout);\n          this.touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n        });\n    }\n\n    this.passiveListeners.forEach((listener, event) => {\n      this.elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  /**\n   * Disables the native browser gestures, based on how the tooltip has been configured.\n   */\n  private disableNativeGesturesIfNecessary() {\n    const element = this.elementRef.nativeElement;\n    const style = element.style;\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n        style.userSelect = (style as any).msUserSelect = style.webkitUserSelect = (style as any).MozUserSelect =\n          'none';\n      }\n\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        (style as any).webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      // style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n  public cancelPossiblyHide = () => {\n    if (this.mouseMoveTimeoutId) {\n      clearTimeout(this.mouseMoveTimeoutId);\n    }\n  };\n\n  private possiblyHide = () => {\n    const delay = this.getHideDelay();\n\n    if (delay) {\n      this.mouseMoveTimeoutId = setTimeout(() => {\n        this.possiblyHide();\n      }, delay);\n    } else {\n      this.hide(0);\n    }\n  };\n\n  private getHideDelay = () => {\n    const tooltip = this.tooltipInstance.elementRef.nativeElement;\n    const tooltipRect = tooltip.getBoundingClientRect();\n\n    const offset = {\n      top: tooltipRect.top + window.scrollY,\n      left: tooltipRect.left + window.scrollX\n    };\n\n    const upperLeft = {\n      x: offset.left,\n      y: offset.top\n    };\n    const upperRight = {\n      x: offset.left + tooltip.offsetWidth,\n      y: upperLeft.y\n    };\n    const lowerLeft = {\n      x: offset.left,\n      y: offset.top + tooltip.offsetHeight\n    };\n    const lowerRight = {\n      x: offset.left + tooltip.offsetWidth,\n      y: lowerLeft.y\n    };\n\n    const location = this.mouseLocations[this.mouseLocations.length - 1];\n    let previousLocation = this.mouseLocations[0];\n\n    if (!location) {\n      return 0;\n    }\n\n    if (!previousLocation) {\n      previousLocation = location;\n    }\n\n    if (\n      this.mouseLastDelayLocation &&\n      location.x === this.mouseLastDelayLocation.x &&\n      location.y === this.mouseLastDelayLocation.y\n    ) {\n      // If the mouse hasn't moved since the last time we checked, immediately hide.\n      return 0;\n    }\n\n    let decreasingCorner = upperLeft;\n    let increasingCorner = lowerLeft;\n\n    if (this.overlayPosition === 'left') {\n      decreasingCorner = lowerRight;\n      increasingCorner = upperRight;\n    } else if (this.overlayPosition === 'bottom') {\n      decreasingCorner = upperRight;\n      increasingCorner = upperLeft;\n    } else if (this.overlayPosition === 'top') {\n      decreasingCorner = lowerLeft;\n      increasingCorner = lowerRight;\n    }\n\n    const decreasingSlope = slope(location, decreasingCorner);\n    const increasingSlope = slope(location, increasingCorner);\n    const prevDecreasingSlope = slope(previousLocation, decreasingCorner);\n    const prevIncreasingSlope = slope(previousLocation, increasingCorner);\n\n    if (decreasingSlope < prevDecreasingSlope && increasingSlope > prevIncreasingSlope) {\n      this.mouseLastDelayLocation = location;\n      return this.mouseAimDelay;\n    }\n\n    this.mouseLastDelayLocation = null;\n    return 0;\n  };\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_disabled: BooleanInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_hideDelay: NumberInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_showDelay: NumberInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_mouseAimDelay: NumberInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_interactive: BooleanInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_arrow: BooleanInput;\n}\n",
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ICanvasProps",
            "id": "interface-ICanvasProps-5a0d9da985c64bdf13d45e34a34eb8c0",
            "file": "projects/elonkit/storybook/components/canvas/canvas.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICanvasProps {\n  children: any;\n  source: {\n    ts?: string;\n    html?: string;\n    scss?: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AutocompleteMultipleStoryService",
            "id": "injectable-AutocompleteMultipleStoryService-c77a412ea5514a4c70911dab2d767500",
            "file": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { debounceTime, map } from 'rxjs/operators';\n\nconst OPTIONS = [\n  { id: 1, name: 'Estonia' },\n  { id: 2, name: 'Iceland' },\n  { id: 3, name: 'Norway' },\n  { id: 4, name: 'Lithuania' },\n  { id: 5, name: 'Sweden' },\n  { id: 6, name: 'Austria' },\n  { id: 7, name: 'Switzerland' },\n  { id: 8, name: 'Albania' },\n  { id: 9, name: 'Portugal' },\n  { id: 10, name: 'Russia' },\n  { id: 11, name: 'India' },\n  { id: 12, name: 'Oman' }\n];\n\n@Injectable()\nexport class AutocompleteMultipleStoryService {\n  public getOptions(text: string, count?: number): Observable<any> {\n    return of(OPTIONS).pipe(\n      debounceTime(1000),\n      map((options) => options.filter((option) => option.name.toLowerCase().includes(text))),\n      map((options) => {\n        const o = count ? options.slice(0, count) : options;\n\n        return {\n          options: o,\n          totalCount: count ? Math.min(count, o.length) : o.length\n        };\n      })\n    );\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "CategoriesListResolver",
            "id": "injectable-CategoriesListResolver-f3c899741c5e822f116280ac655bd575",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs.spec.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CategoriesListResolver",
            "id": "injectable-CategoriesListResolver-50609851c5c7dcf42bca3be2545d85e2-1",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs-story-basic.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CategoriesListResolver-1"
        },
        {
            "name": "CategoriesService",
            "id": "injectable-CategoriesService-7cff38f2eac4ed1cc772d08a65e2c6d9",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { of } from 'rxjs';\n\nconst CATEGORIES = [\n  {\n    id: 1,\n    title: `Category #1`\n  },\n  {\n    id: 2,\n    title: `Category #2`\n  },\n  {\n    id: 3,\n    title: `Category #3`\n  }\n];\n\nconst ITEMS = [\n  {\n    id: 1,\n    categoryId: 1,\n    title: `Item #1-1`\n  },\n  {\n    id: 2,\n    categoryId: 1,\n    title: `Item #1-2`\n  },\n  {\n    id: 3,\n    categoryId: 1,\n    title: `Item #1-3`\n  },\n  {\n    id: 4,\n    categoryId: 2,\n    title: `Item #2-1`\n  },\n  {\n    id: 5,\n    categoryId: 2,\n    title: `Item #2-2`\n  },\n  {\n    id: 6,\n    categoryId: 2,\n    title: `Item #2-3`\n  },\n  {\n    id: 7,\n    categoryId: 3,\n    title: `Item #3-1`\n  },\n  {\n    id: 8,\n    categoryId: 3,\n    title: `Item #3-2`\n  },\n  {\n    id: 9,\n    categoryId: 3,\n    title: `Item #3-3`\n  }\n];\n\n@Injectable()\nexport class CategoriesService {\n  public getAll() {\n    return of(CATEGORIES);\n  }\n\n  public getOne(id: number) {\n    return of(CATEGORIES.find((item) => item.id === id));\n  }\n}\n\n@Injectable()\nexport class ItemsService {\n  public getAll(categoryId: number) {\n    return of(ITEMS.filter((item) => item.categoryId === categoryId));\n  }\n\n  public getOne(id: number) {\n    return of(ITEMS.find((item) => item.id === id));\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "CategoriesService",
            "id": "injectable-CategoriesService-7cff38f2eac4ed1cc772d08a65e2c6d9-1",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { of } from 'rxjs';\n\nconst CATEGORIES = [\n  {\n    id: 1,\n    title: `Category #1`\n  },\n  {\n    id: 2,\n    title: `Category #2`\n  },\n  {\n    id: 3,\n    title: `Category #3`\n  }\n];\n\nconst ITEMS = [\n  {\n    id: 1,\n    categoryId: 1,\n    title: `Item #1-1`\n  },\n  {\n    id: 2,\n    categoryId: 1,\n    title: `Item #1-2`\n  },\n  {\n    id: 3,\n    categoryId: 1,\n    title: `Item #1-3`\n  },\n  {\n    id: 4,\n    categoryId: 2,\n    title: `Item #2-1`\n  },\n  {\n    id: 5,\n    categoryId: 2,\n    title: `Item #2-2`\n  },\n  {\n    id: 6,\n    categoryId: 2,\n    title: `Item #2-3`\n  },\n  {\n    id: 7,\n    categoryId: 3,\n    title: `Item #3-1`\n  },\n  {\n    id: 8,\n    categoryId: 3,\n    title: `Item #3-2`\n  },\n  {\n    id: 9,\n    categoryId: 3,\n    title: `Item #3-3`\n  }\n];\n\n@Injectable()\nexport class CategoriesService {\n  public getAll() {\n    return of(CATEGORIES);\n  }\n\n  public getOne(id: number) {\n    return of(CATEGORIES.find((item) => item.id === id));\n  }\n}\n\n@Injectable()\nexport class ItemsService {\n  public getAll(categoryId: number) {\n    return of(ITEMS.filter((item) => item.categoryId === categoryId));\n  }\n\n  public getOne(id: number) {\n    return of(ITEMS.find((item) => item.id === id));\n  }\n}\n",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CategoriesService-1"
        },
        {
            "name": "CategoriesShowBreadcrumbsResolver",
            "id": "injectable-CategoriesShowBreadcrumbsResolver-f3c899741c5e822f116280ac655bd575",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ label: any; breadcrumbs: any; }",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs.spec.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "CategoriesShowBreadcrumbsResolver",
            "id": "injectable-CategoriesShowBreadcrumbsResolver-50609851c5c7dcf42bca3be2545d85e2-1",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ label: any; breadcrumbs: any; }",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs-story-basic.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CategoriesShowBreadcrumbsResolver-1"
        },
        {
            "name": "CategoriesShowResolver",
            "id": "injectable-CategoriesShowResolver-f3c899741c5e822f116280ac655bd575",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs.spec.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CategoriesShowResolver",
            "id": "injectable-CategoriesShowResolver-50609851c5c7dcf42bca3be2545d85e2-1",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs-story-basic.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CategoriesShowResolver-1"
        },
        {
            "name": "ESBreadcrumbsResolver",
            "id": "injectable-ESBreadcrumbsResolver-8cefb16d8f6d80da303471cb2017261f",
            "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\n@Injectable()\nexport class ESBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    if (route.routeConfig && route.routeConfig.data && route.data.breadcrumb) {\n      return route.data.breadcrumb;\n    }\n    return null;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ESBreadcrumbsService",
            "id": "injectable-ESBreadcrumbsService-8cc1233762921eb9e1a3b53a71c25e7c",
            "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.service.ts",
            "properties": [
                {
                    "name": "breadcrumbs$",
                    "defaultValue": "new BehaviorSubject<ESBreadcrumb[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getBreadcrumbs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getPath",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\n\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\n\nimport { ESBreadcrumb } from './breadcrumbs.types';\n\n@Injectable({ providedIn: 'root' })\nexport class ESBreadcrumbsService implements OnDestroy {\n  public breadcrumbs$ = new BehaviorSubject<ESBreadcrumb[]>([]);\n  public destroyed$ = new Subject<void>();\n\n  constructor(private router: Router, private activatedRoute: ActivatedRoute) {\n    this.getBreadcrumbs();\n\n    this.router.events\n      .pipe(\n        takeUntil(this.destroyed$),\n        filter((event) => event instanceof NavigationEnd)\n      )\n      .subscribe(() => {\n        this.getBreadcrumbs();\n      });\n  }\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n\n  private getBreadcrumbs() {\n    const breadcrumbs = [];\n\n    let route = this.activatedRoute;\n    while (route) {\n      if (\n        (route.routeConfig?.resolve?.breadcrumb || route.routeConfig?.data?.breadcrumb) &&\n        route.snapshot.data.breadcrumb\n      ) {\n        breadcrumbs.push({\n          path: this.getPath(route),\n          parentPath: this.getPath(route.parent),\n          data: route.snapshot.data.breadcrumb\n        });\n      }\n      route = route.firstChild;\n    }\n\n    this.breadcrumbs$.next(breadcrumbs);\n  }\n\n  private getPath(route: ActivatedRoute) {\n    let path = '';\n\n    while (route) {\n      const segment = route.snapshot.url.map((s) => s.path).join('/');\n      if (segment) {\n        path = `${segment}/${path}`;\n      }\n      route = route.parent;\n    }\n\n    return `/${path}`;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ESIconsService",
            "id": "injectable-ESIconsService-9b45d2aca13b1bf756706781e9e78135",
            "file": "projects/elonkit/src/ui/icons/icons.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "overrides",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd svg icons by resource url.\n",
                    "description": "<p>Add svg icons by resource url.</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 866,
                                "end": 875,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "overrides"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 860,
                                "end": 865,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Path mapping to icons to use instead of built-in ones.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nexport const ES_SVG_ICONS = {\n  'es-empty-state': [\n    'bell',\n    'box',\n    'cart',\n    'chat',\n    'face',\n    'file',\n    'filter',\n    'lock',\n    'search',\n    'smile',\n    'wi-fi',\n    'wi-fi-off'\n  ] as const,\n  'es-audio-player': [\n    'check',\n    'chevron-left',\n    'chevron-right',\n    'download',\n    'more-vert',\n    'mute',\n    'pause',\n    'play',\n    'speed',\n    'un-mute'\n  ] as const,\n  'es-autocomplete-multiple': ['clear-small', 'clear', 'magnify', 'menu-down', 'menu-up'] as const\n};\n\n@Injectable()\nexport class ESIconsService {\n  constructor(private matIconRegistry: MatIconRegistry, private domSanitizer: DomSanitizer) {}\n\n  /**\n   * Add svg icons by resource url.\n   * @param overrides Path mapping to icons to use instead of built-in ones.\n   */\n  public register(\n    overrides?: {\n      [component in keyof typeof ES_SVG_ICONS]?: {\n        [icon in typeof ES_SVG_ICONS[component][number]]?: string;\n      };\n    }\n  ) {\n    Object.keys(ES_SVG_ICONS).forEach((component) => {\n      ES_SVG_ICONS[component].forEach((icon) => {\n        this.matIconRegistry.addSvgIconInNamespace(\n          `${component}`,\n          `${icon}`,\n          this.domSanitizer.bypassSecurityTrustResourceUrl(\n            overrides?.[component]?.[icon] || `./assets/elonkit/${component}/${icon}.svg`\n          )\n        );\n      });\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ESLocaleService",
            "id": "injectable-ESLocaleService-1972ea6a056bbd04467767fb6d9ac025",
            "file": "projects/elonkit/src/ui/locale/locale.service.ts",
            "properties": [
                {
                    "name": "_language",
                    "defaultValue": "new BehaviorSubject<string>(DEFAULT_LANGUAGE)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_locales",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "currentLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "currentLocale",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "language",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "languageChange",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "locale",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "locale",
                            "type": "ESLocale",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locale",
                            "type": "ESLocale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "use",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { en } from './locales';\nexport type ESLocale = typeof en;\n\nconst DEFAULT_LANGUAGE = 'en';\n\n@Injectable({ providedIn: 'root' })\nexport class ESLocaleService {\n  private _language = new BehaviorSubject<string>(DEFAULT_LANGUAGE);\n  private _locales: { [language: string]: ESLocale } = {};\n\n  constructor() {\n    this.register('en', en);\n  }\n\n  public register(language: string, locale: ESLocale) {\n    this._locales[language] = locale;\n  }\n\n  public use(language: string) {\n    if (language === this.currentLanguage()) {\n      return;\n    }\n\n    this._language.next(language);\n  }\n\n  public languageChange() {\n    return this._language.asObservable();\n  }\n\n  public language() {\n    return this._language.getValue();\n  }\n\n  public locale() {\n    return this._language.pipe(map((language) => this._locales[language]));\n  }\n\n  public currentLanguage() {\n    return this._language.getValue();\n  }\n\n  public currentLocale() {\n    return this._locales[this.currentLanguage()];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "type": "injectable"
        },
        {
            "name": "ESTooltipService",
            "id": "injectable-ESTooltipService-356408a28fcd147b04209d28a9650f10",
            "file": "projects/elonkit/src/ui/tooltip/tooltip.service.ts",
            "properties": [
                {
                    "name": "closed$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class ESTooltipService {\n  public closed$ = new Subject<void>();\n}\n",
            "type": "injectable"
        },
        {
            "name": "ItemsListResolver",
            "id": "injectable-ItemsListResolver-f3c899741c5e822f116280ac655bd575",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs.spec.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ItemsListResolver",
            "id": "injectable-ItemsListResolver-50609851c5c7dcf42bca3be2545d85e2-1",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs-story-basic.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ItemsListResolver-1"
        },
        {
            "name": "ItemsService",
            "id": "injectable-ItemsService-7cff38f2eac4ed1cc772d08a65e2c6d9",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { of } from 'rxjs';\n\nconst CATEGORIES = [\n  {\n    id: 1,\n    title: `Category #1`\n  },\n  {\n    id: 2,\n    title: `Category #2`\n  },\n  {\n    id: 3,\n    title: `Category #3`\n  }\n];\n\nconst ITEMS = [\n  {\n    id: 1,\n    categoryId: 1,\n    title: `Item #1-1`\n  },\n  {\n    id: 2,\n    categoryId: 1,\n    title: `Item #1-2`\n  },\n  {\n    id: 3,\n    categoryId: 1,\n    title: `Item #1-3`\n  },\n  {\n    id: 4,\n    categoryId: 2,\n    title: `Item #2-1`\n  },\n  {\n    id: 5,\n    categoryId: 2,\n    title: `Item #2-2`\n  },\n  {\n    id: 6,\n    categoryId: 2,\n    title: `Item #2-3`\n  },\n  {\n    id: 7,\n    categoryId: 3,\n    title: `Item #3-1`\n  },\n  {\n    id: 8,\n    categoryId: 3,\n    title: `Item #3-2`\n  },\n  {\n    id: 9,\n    categoryId: 3,\n    title: `Item #3-3`\n  }\n];\n\n@Injectable()\nexport class CategoriesService {\n  public getAll() {\n    return of(CATEGORIES);\n  }\n\n  public getOne(id: number) {\n    return of(CATEGORIES.find((item) => item.id === id));\n  }\n}\n\n@Injectable()\nexport class ItemsService {\n  public getAll(categoryId: number) {\n    return of(ITEMS.filter((item) => item.categoryId === categoryId));\n  }\n\n  public getOne(id: number) {\n    return of(ITEMS.find((item) => item.id === id));\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ItemsService",
            "id": "injectable-ItemsService-7cff38f2eac4ed1cc772d08a65e2c6d9-1",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { of } from 'rxjs';\n\nconst CATEGORIES = [\n  {\n    id: 1,\n    title: `Category #1`\n  },\n  {\n    id: 2,\n    title: `Category #2`\n  },\n  {\n    id: 3,\n    title: `Category #3`\n  }\n];\n\nconst ITEMS = [\n  {\n    id: 1,\n    categoryId: 1,\n    title: `Item #1-1`\n  },\n  {\n    id: 2,\n    categoryId: 1,\n    title: `Item #1-2`\n  },\n  {\n    id: 3,\n    categoryId: 1,\n    title: `Item #1-3`\n  },\n  {\n    id: 4,\n    categoryId: 2,\n    title: `Item #2-1`\n  },\n  {\n    id: 5,\n    categoryId: 2,\n    title: `Item #2-2`\n  },\n  {\n    id: 6,\n    categoryId: 2,\n    title: `Item #2-3`\n  },\n  {\n    id: 7,\n    categoryId: 3,\n    title: `Item #3-1`\n  },\n  {\n    id: 8,\n    categoryId: 3,\n    title: `Item #3-2`\n  },\n  {\n    id: 9,\n    categoryId: 3,\n    title: `Item #3-3`\n  }\n];\n\n@Injectable()\nexport class CategoriesService {\n  public getAll() {\n    return of(CATEGORIES);\n  }\n\n  public getOne(id: number) {\n    return of(CATEGORIES.find((item) => item.id === id));\n  }\n}\n\n@Injectable()\nexport class ItemsService {\n  public getAll(categoryId: number) {\n    return of(ITEMS.filter((item) => item.categoryId === categoryId));\n  }\n\n  public getOne(id: number) {\n    return of(ITEMS.find((item) => item.id === id));\n  }\n}\n",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ItemsService-1"
        },
        {
            "name": "ItemsShowBreadcrumbsResolver",
            "id": "injectable-ItemsShowBreadcrumbsResolver-f3c899741c5e822f116280ac655bd575",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ label: any; }",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs.spec.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ItemsShowBreadcrumbsResolver",
            "id": "injectable-ItemsShowBreadcrumbsResolver-50609851c5c7dcf42bca3be2545d85e2-1",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ label: any; }",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs-story-basic.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ItemsShowBreadcrumbsResolver-1"
        },
        {
            "name": "ItemsShowResolver",
            "id": "injectable-ItemsShowResolver-f3c899741c5e822f116280ac655bd575",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs.spec.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ItemsShowResolver",
            "id": "injectable-ItemsShowResolver-50609851c5c7dcf42bca3be2545d85e2-1",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs-story-basic.service';\n\n@Injectable()\nexport class CategoriesListResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve() {\n    return this.categoriesService.getAll();\n  }\n}\n\n@Injectable()\nexport class CategoriesShowResolver {\n  constructor(private categoriesService: CategoriesService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.categoriesService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class CategoriesShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    const category = route.parent.data.data.find((e) => e.id === +route.params.category);\n\n    return {\n      label: category.title,\n      breadcrumbs: route.parent.data.data.map(({ id, title }) => ({\n        path: id,\n        label: title\n      }))\n    };\n  }\n}\n\n@Injectable()\nexport class ItemsListResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getAll(+route.params.category);\n  }\n}\n\n@Injectable()\nexport class ItemsShowResolver {\n  constructor(private itemsService: ItemsService) {}\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    return this.itemsService.getOne(+route.params.item);\n  }\n}\n\n@Injectable()\nexport class ItemsShowBreadcrumbsResolver {\n  public resolve(route: ActivatedRouteSnapshot) {\n    return { label: route.parent.data.data.title };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ItemsShowResolver-1"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "ESBreadcrumbsBackDirective",
            "id": "directive-ESBreadcrumbsBackDirective-f0af3cd23865c9b24e8a7a9cd154780e",
            "file": "projects/elonkit/src/ui/breadcrumbs/directives/breadcrumbs-back.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[esBreadcrumbsBack]'\n})\nexport class ESBreadcrumbsBackDirective {}\n",
            "selector": "[esBreadcrumbsBack]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "ESBreadcrumbsMoreDirective",
            "id": "directive-ESBreadcrumbsMoreDirective-27bf8055c49aae0e69b2641e0117a443",
            "file": "projects/elonkit/src/ui/breadcrumbs/directives/breadcrumbs-more.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[esBreadcrumbsMore]'\n})\nexport class ESBreadcrumbsMoreDirective {}\n",
            "selector": "[esBreadcrumbsMore]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "ESBreadcrumbsSeparatorDirective",
            "id": "directive-ESBreadcrumbsSeparatorDirective-a3d481fc989634b958a1c44130ea75d4",
            "file": "projects/elonkit/src/ui/breadcrumbs/directives/breadcrumbs-separator.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[esBreadcrumbsSeparator]'\n})\nexport class ESBreadcrumbsSeparatorDirective {}\n",
            "selector": "[esBreadcrumbsSeparator]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "ESTooltipDirective",
            "id": "directive-ESTooltipDirective-04bf355533bc0c852c0e46236b58d9a8",
            "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  InjectionToken,\n  ViewContainerRef,\n  AfterViewInit,\n  HostBinding,\n  HostListener\n} from '@angular/core';\n\nimport { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';\nimport { getInnerFocusableElement } from '../../cdk/a11y';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput, coerceBooleanProperty, NumberInput } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedOverlayPositionChange\n} from '@angular/cdk/overlay';\nimport { Platform, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\n\nimport {\n  TooltipPosition,\n  TooltipTouchGestures,\n  getMatTooltipInvalidPositionError,\n  MAT_TOOLTIP_SCROLL_STRATEGY,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltipDefaultOptions\n} from '@angular/material/tooltip';\n\nimport { Subject } from 'rxjs';\nimport { take, takeUntil, delay as delayPipe } from 'rxjs/operators';\n\nimport { ESTooltipComponent } from './tooltip.component';\nimport { ESTooltipService } from './tooltip.service';\n\n/** CSS class that will be attached to the overlay panel. */\nconst TOOLTIP_PANEL_CLASS = 'es-tooltip-panel';\n\n/** Margin of .es-tooltip container */\nconst TOOLTIP_MARGIN = 12;\n\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n\n/**\n * Number of past mouse locations to track.\n */\nconst MOUSE_LOCATIONS_TRACKED = 3;\n\n/**\n * Delay in ms before closing a tooltip when mouse moves towards the component.\n */\nconst MOUSE_AIM_DELAY = 300;\n\nexport interface ESTooltipDefaultOptions {\n  arrow?: boolean;\n  mouseAimDelay?: number;\n}\n\nexport const ES_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken<ESTooltipDefaultOptions>(\n  'ES_TOOLTIP_DEFAULT_OPTIONS'\n);\n\ninterface ESTooltipMouseLocation {\n  x: number;\n  y: number;\n}\n\nfunction slope(a: ESTooltipMouseLocation, b: ESTooltipMouseLocation) {\n  return (b.y - a.y) / (b.x - a.x);\n}\n\n@Directive({\n  selector: '[esTooltip]',\n  exportAs: 'esTooltip'\n})\nexport class ESTooltipDirective implements OnDestroy, AfterViewInit {\n  @HostBinding('class.es-tooltip-trigger') public class = true;\n\n  @HostListener('document:mousemove', ['$event']) public onMouseMove(event: MouseEvent) {\n    this.mouseLocations.push({ x: event.pageX, y: event.pageY });\n\n    if (this.mouseLocations.length > MOUSE_LOCATIONS_TRACKED) {\n      this.mouseLocations.shift();\n    }\n  }\n\n  @HostListener('focusout', ['$event']) public onFocusOut(event: FocusEvent) {\n    if (this.disableFocusListener) {\n      return;\n    }\n\n    if (this.tooltipInstance) {\n      if (this.interactive) {\n        const isNext =\n          event.relatedTarget &&\n          (event.target as HTMLElement).compareDocumentPosition(\n            event.relatedTarget as HTMLElement\n          ) === 4;\n\n        const element = getInnerFocusableElement(this.tooltipInstance.elementRef.nativeElement);\n\n        if (isNext && element) {\n          (element as HTMLElement).focus();\n        } else if (event.relatedTarget) {\n          this.hide(0);\n        }\n      } else {\n        this.hide(0);\n      }\n    }\n  }\n\n  private _position: TooltipPosition = 'below';\n\n  /**\n   * Allows the user to define the position of the tooltip relative to the parent element.\n   */\n  @Input('esTooltipPosition')\n  public get position(): TooltipPosition {\n    return this._position;\n  }\n  public set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this.overlayRef) {\n        this.updatePosition();\n\n        if (this.tooltipInstance) {\n          this.tooltipInstance.show(0);\n        }\n\n        this.overlayRef.updatePosition();\n      }\n    }\n  }\n\n  private _disabled = false;\n\n  /**\n   * Disables the display of the tooltip.\n   */\n  @Input('esTooltipDisabled')\n  public get disabled() {\n    return this._disabled;\n  }\n  public set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this.setupPointerEvents();\n    }\n  }\n\n  /**\n   * The default delay in ms before showing the tooltip after show is called.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipShowDelay') public showDelay: number = this.defaultOptions?.showDelay;\n\n  /**\n   * The default delay in ms before hiding the tooltip after hide is called.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipHideDelay') public hideDelay: number = this.defaultOptions?.hideDelay;\n\n  /**\n   * Delay in ms before closing a tooltip when mouse stops moving towards the tooltip.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipMouseAimDelay') public mouseAimDelay: number =\n    this.esDefaultOptions?.mouseAimDelay || MOUSE_AIM_DELAY;\n\n  /**\n   * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n   * uses a long press gesture to show and hide, however it can conflict with the native browser\n   * gestures. To work around the conflict, Angular Material disables native gestures on the\n   * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n   * elements). The different values for this option configure the touch event handling as follows:\n   * - auto - Enables touch gestures for all elements, but tries to avoid conflicts with native\n   * browser gestures on particular elements. In particular, it allows text selection on inputs and\n   * textareas, and preserves the native browser dragging on elements marked as draggable.\n   * - on - Enables touch gestures for all elements and disables native browser gestures with no\n   * exceptions.\n   * - off - Disables touch gestures. Note that this will prevent the tooltip from showing on touch\n   * devices.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipTouchGestures') public touchGestures: TooltipTouchGestures = 'auto';\n\n  private _arrow = this.esDefaultOptions?.arrow ?? false;\n\n  /**\n   * If true, adds an arrow to the tooltip.\n   */\n  @Input('esTooltipArrow')\n  public get arrow() {\n    return this._arrow;\n  }\n  public set arrow(value: any) {\n    this._arrow = coerceBooleanProperty(value);\n  }\n\n  private _interactive = false;\n\n  /**\n   * Makes a tooltip interactive, i.e. will not close when the user hovers over the tooltip.\n   */\n  @Input('esTooltipInteractive')\n  public get interactive() {\n    return this._interactive;\n  }\n  public set interactive(value: any) {\n    this._interactive = coerceBooleanProperty(value);\n  }\n\n  private _content: ElementRef<HTMLElement>;\n\n  /**\n   * Template to display instead of the message.\n   */\n  @Input('esTooltipContent')\n  public get content() {\n    return this._content;\n  }\n  public set content(value) {\n    if (this.message) {\n      this.ariaDescriber.removeDescription(this.elementRef.nativeElement, this._message);\n    }\n\n    this._content = value;\n\n    if (!(this.message || this._content) && this.isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this.setupPointerEvents();\n      this.updateTooltipMessage();\n      if (this.message) {\n        this.ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => {\n            this.ariaDescriber.describe(this.elementRef.nativeElement, this.message);\n          });\n        });\n      }\n    }\n  }\n\n  private _message = '';\n\n  /**\n   * The message to be displayed in the tooltip.\n   */\n  @Input('esTooltip')\n  public get message() {\n    return this._message;\n  }\n  public set message(value: string) {\n    if (this._message) {\n      this.ariaDescriber.removeDescription(this.elementRef.nativeElement, this._message);\n    }\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!(this._message || this.content) && this.isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this.setupPointerEvents();\n      this.updateTooltipMessage();\n      this.ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this.ariaDescriber.describe(this.elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n\n  private _tooltipClass: string | string[] | Set<string> | { [key: string]: any };\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('esTooltipClass')\n  public get tooltipClass() {\n    return this._tooltipClass;\n  }\n  public set tooltipClass(value: string | string[] | Set<string> | { [key: string]: any }) {\n    this._tooltipClass = value;\n    if (this.tooltipInstance) {\n      this.setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  /**\n   * Do not respond to focus events.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableFocusListener') public disableFocusListener = false;\n\n  /**\n   * Do not respond to hover events.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableHoverListener') public disableHoverListener = false;\n\n  /**\n   * Do not respond to focus events after tooltip is opened.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableCloseFocusListener') public disableCloseFocusListener: boolean;\n\n  /**\n   * Do not respond to hover events after tooltip is opened.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableCloseHoverListener') public disableCloseHoverListener: boolean;\n\n  /**\n   * Do not respond to body click events.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('esTooltipDisableCloseClickListener') public disableCloseClickListener = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public overlayRef: OverlayRef | null;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public tooltipInstance: ESTooltipComponent | null;\n\n  private portal: ComponentPortal<ESTooltipComponent>;\n\n  private scrollStrategy: () => ScrollStrategy;\n  private viewInitialized = false;\n\n  private isHovered = false;\n  private mouseLocations: Array<ESTooltipMouseLocation> = [];\n  private mouseLastDelayLocation: ESTooltipMouseLocation;\n  private mouseMoveTimeoutId: NodeJS.Timeout;\n\n  private overlayPosition: 'right' | 'left' | 'top' | 'bottom';\n\n  /**\n   * Manually-bound passive event listeners.\n   */\n  private passiveListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /**\n   * Timer started at the last `touchstart` event.\n   */\n  private touchstartTimeout: NodeJS.Timeout;\n\n  /**\n   * Emits when the component is destroyed.\n   */\n  private readonly destroyed$ = new Subject<void>();\n\n  /**\n   * @internal\n   * @ignore\n   */\n  constructor(\n    private overlay: Overlay,\n    private elementRef: ElementRef<HTMLElement>,\n    private scrollDispatcher: ScrollDispatcher,\n    private viewContainerRef: ViewContainerRef,\n    private ngZone: NgZone,\n    private platform: Platform,\n    private ariaDescriber: AriaDescriber,\n    private focusMonitor: FocusMonitor,\n    private tooltipService: ESTooltipService,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private dir: Directionality,\n    @Optional()\n    @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n    private defaultOptions: MatTooltipDefaultOptions,\n    @Optional()\n    @Inject(ES_TOOLTIP_DEFAULT_OPTIONS)\n    private esDefaultOptions: ESTooltipDefaultOptions\n  ) {\n    this.scrollStrategy = scrollStrategy;\n\n    if (defaultOptions) {\n      if (defaultOptions.position) {\n        this.position = defaultOptions.position;\n      }\n\n      if (defaultOptions.touchGestures) {\n        this.touchGestures = defaultOptions.touchGestures;\n      }\n    }\n\n    ngZone.runOutsideAngular(() => {\n      elementRef.nativeElement.addEventListener('keydown', this.onKeyDown);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this.viewInitialized = true;\n    this.setupPointerEvents();\n\n    this.focusMonitor\n      .monitor(this.elementRef)\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((origin) => {\n        if (this.disableFocusListener) {\n          return;\n        }\n        // Note that the focus monitor runs outside the Angular zone.\n        if (origin === 'keyboard') {\n          this.ngZone.run(() => this.show());\n        }\n      });\n  }\n\n  /**\n   * @ignore\n   * Dispose the tooltip when destroyed.\n   */\n  public ngOnDestroy() {\n    const nativeElement = this.elementRef.nativeElement;\n\n    clearTimeout(this.touchstartTimeout);\n\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n      this.tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    nativeElement.removeEventListener('keydown', this.onKeyDown);\n    this.passiveListeners.forEach((listener, event) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this.passiveListeners.clear();\n\n    this.destroyed$.next();\n    this.destroyed$.complete();\n\n    this.ariaDescriber.removeDescription(nativeElement, this.message);\n    this.focusMonitor.stopMonitoring(nativeElement);\n  }\n\n  /**\n   * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input.\n   */\n  public show(delay: number = this.showDelay): void {\n    if (\n      this.disabled ||\n      !(this.message || this.content) ||\n      (this.isTooltipVisible() &&\n        !this.tooltipInstance.showTimeoutId &&\n        !this.tooltipInstance.hideTimeoutId)\n    ) {\n      return;\n    }\n\n    const overlayRef = this.createOverlay();\n    this.detach();\n    this.portal = this.portal || new ComponentPortal(ESTooltipComponent, this.viewContainerRef);\n    this.tooltipInstance = overlayRef.attach(this.portal).instance;\n    this.tooltipInstance\n      .afterHidden()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(() => this.detach());\n    this.setTooltipClass(this._tooltipClass);\n    this.tooltipInstance.parent = this;\n    this.tooltipInstance.parentElementRef = this.elementRef;\n    this.tooltipInstance.interactive = this.interactive;\n\n    this.tooltipInstance.disableCloseFocusListener =\n      this.disableCloseFocusListener ?? this.disableFocusListener;\n    this.tooltipInstance.disableCloseHoverListener =\n      this.disableCloseHoverListener ?? this.disableHoverListener;\n    this.tooltipInstance.disableCloseClickListener = this.disableCloseClickListener;\n\n    this.updateTooltipMessage();\n    this.tooltipInstance.show(delay);\n  }\n\n  /**\n   * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input.\n   */\n  public hide(delay: number = this.hideDelay) {\n    if (this.tooltipInstance) {\n      this.cancelPossiblyHide();\n      this.tooltipInstance.hide(delay);\n    }\n  }\n\n  /**\n   * Shows/hides the tooltip.\n   */\n  public toggle() {\n    this.isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /**\n   * Returns true if the tooltip is currently visible to the user.\n   */\n  public isTooltipVisible() {\n    return !!this.tooltipInstance && this.tooltipInstance.isVisible();\n  }\n\n  /**\n   * Handles the keydown events on the host element.\n   * Needs to be an arrow function so that we can use it in addEventListener.\n   */\n  private onKeyDown = (event: KeyboardEvent) => {\n    // tslint:disable-next-line:deprecation\n    if (this.isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.ngZone.run(() => this.hide(0));\n    }\n  };\n\n  /**\n   * Create the overlay config and position strategy.\n   */\n  private createOverlay(): OverlayRef {\n    if (this.overlayRef) {\n      return this.overlayRef;\n    }\n\n    const scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this.overlay\n      .position()\n      .flexibleConnectedTo(this.elementRef)\n      .withTransformOriginOn('.es-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this.destroyed$)).subscribe((change) => {\n      if (this.tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this.tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this.ngZone.run(() => this.hide(0));\n        } else {\n          this.updateTooltipArrowPosition(change);\n        }\n      }\n    });\n\n    this.overlayRef = this.overlay.create({\n      direction: this.dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this.scrollStrategy()\n    });\n\n    this.updatePosition();\n\n    this.overlayRef\n      .detachments()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(() => this.detach());\n\n    return this.overlayRef;\n  }\n\n  /**\n   * Detaches the currently-attached tooltip.\n   */\n  private detach() {\n    if (this.overlayRef && this.overlayRef.hasAttached()) {\n      this.overlayRef.detach();\n    }\n\n    this.tooltipInstance = null;\n  }\n\n  /**\n   * Updates the position of the current tooltip.\n   */\n  private updatePosition() {\n    const position = this.overlayRef.getConfig()\n      .positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this.getOrigin();\n    const overlay = this.getOverlayPosition();\n\n    position.withPositions([\n      { ...origin.main, ...overlay.main },\n      { ...origin.fallback, ...overlay.fallback }\n    ]);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  public getOrigin(): { main: OriginConnectionPosition; fallback: OriginConnectionPosition } {\n    const isLtr = !this.dir || this.dir.value === 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position === 'above' || position === 'below') {\n      originPosition = { originX: 'center', originY: position === 'above' ? 'top' : 'bottom' };\n    } else if (\n      position === 'before' ||\n      (position === 'left' && isLtr) ||\n      (position === 'right' && !isLtr)\n    ) {\n      originPosition = { originX: 'start', originY: 'center' };\n    } else if (\n      position === 'after' ||\n      (position === 'right' && isLtr) ||\n      (position === 'left' && !isLtr)\n    ) {\n      originPosition = { originX: 'end', originY: 'center' };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const { x, y } = this.invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: { originX: x, originY: y }\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns the overlay position and a fallback position based on the user's preference.\n   */\n  public getOverlayPosition(): {\n    main: OverlayConnectionPosition;\n    fallback: OverlayConnectionPosition;\n  } {\n    const isLtr = !this.dir || this.dir.value === 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position === 'above') {\n      overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n    } else if (position === 'below') {\n      overlayPosition = { overlayX: 'center', overlayY: 'top' };\n    } else if (\n      position === 'before' ||\n      (position === 'left' && isLtr) ||\n      (position === 'right' && !isLtr)\n    ) {\n      overlayPosition = { overlayX: 'end', overlayY: 'center' };\n    } else if (\n      position === 'after' ||\n      (position === 'right' && isLtr) ||\n      (position === 'left' && !isLtr)\n    ) {\n      overlayPosition = { overlayX: 'start', overlayY: 'center' };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const { x, y } = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: { overlayX: x, overlayY: y }\n    };\n  }\n\n  /**\n   * Updates the tooltip message and repositions the overlay according to the new message length.\n   */\n  private updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this.tooltipInstance) {\n      this.tooltipInstance.message = this.message;\n      this.tooltipInstance.content = this.content;\n      this.tooltipInstance.markForCheck();\n\n      this.ngZone.onMicrotaskEmpty\n        .asObservable()\n        .pipe(take(1), takeUntil(this.destroyed$))\n        .subscribe(() => {\n          if (this.tooltipInstance) {\n            this.overlayRef.updatePosition();\n          }\n        });\n    }\n  }\n\n  /**\n   * Updates the arrow position.\n   */\n  private updateTooltipArrowPosition(change: ConnectedOverlayPositionChange) {\n    if (this.arrow && this.tooltipInstance) {\n      const rect = this.elementRef.nativeElement.getBoundingClientRect();\n      const rectTooltip = this.tooltipInstance.elementRef.nativeElement.getBoundingClientRect();\n\n      const diffX = rect.left - rectTooltip.left - TOOLTIP_MARGIN;\n      const diffY = rect.top - rectTooltip.top - TOOLTIP_MARGIN;\n\n      const offsetX = Math.ceil(diffX + this.elementRef.nativeElement.clientWidth / 2);\n      const offsetY = Math.ceil(diffY + this.elementRef.nativeElement.clientHeight / 2);\n\n      if (change.connectionPair.originX === 'end') {\n        this.overlayPosition = 'right';\n        this.tooltipInstance.arrow = {\n          position: 'left',\n          offsetY\n        };\n      } else if (change.connectionPair.originX === 'start') {\n        this.overlayPosition = 'left';\n        this.tooltipInstance.arrow = {\n          position: 'right',\n          offsetY\n        };\n      } else if (change.connectionPair.originY === 'top') {\n        this.overlayPosition = 'top';\n        this.tooltipInstance.arrow = {\n          position: 'bottom',\n          offsetX\n        };\n      } else if (change.connectionPair.originY === 'bottom') {\n        this.overlayPosition = 'bottom';\n        this.tooltipInstance.arrow = {\n          position: 'top',\n          offsetX\n        };\n      }\n\n      this.tooltipInstance.markForCheck();\n    }\n  }\n\n  /**\n   * Updates the tooltip class.\n   */\n  private setTooltipClass(tooltipClass: string | string[] | Set<string> | { [key: string]: any }) {\n    if (this.tooltipInstance) {\n      this.tooltipInstance.tooltipClass = tooltipClass;\n      this.tooltipInstance.markForCheck();\n    }\n  }\n\n  /**\n   * Inverts an overlay position.\n   */\n  private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return { x, y };\n  }\n\n  /**\n   * Binds the pointer events to the tooltip trigger.\n   */\n  private setupPointerEvents() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (\n      this._disabled ||\n      !(this.message || this.content) ||\n      !this.viewInitialized ||\n      this.passiveListeners.size\n    ) {\n      return;\n    }\n\n    const onMouseEnter = () => {\n      this.isHovered = true;\n\n      if (this.disableHoverListener) {\n        return;\n      }\n\n      const tooltip = document.querySelector('.es-tooltip');\n      if (tooltip) {\n        this.tooltipService.closed$.pipe(take(1), delayPipe(1)).subscribe(() => {\n          if (this.isHovered) {\n            onMouseEnter();\n          }\n        });\n\n        return;\n      }\n\n      this.show();\n    };\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!this.platform.IOS && !this.platform.ANDROID) {\n      this.passiveListeners.set('mouseenter', onMouseEnter).set('mouseleave', () => {\n        this.isHovered = false;\n\n        if (this.disableCloseHoverListener ?? this.disableHoverListener) {\n          return;\n        }\n\n        if (this.interactive) {\n          if (this.tooltipInstance) {\n            this.possiblyHide();\n          }\n        } else {\n          this.hide();\n        }\n      });\n    } else if (this.touchGestures !== 'off') {\n      this.disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        clearTimeout(this.touchstartTimeout);\n        this.hide(this.defaultOptions.touchendHideDelay);\n      };\n\n      this.passiveListeners\n        .set('touchend', touchendListener)\n        .set('touchcancel', touchendListener)\n        .set('touchstart', () => {\n          // Note that it's important that we don't `preventDefault` here,\n          // because it can prevent click events from firing on the element.\n          clearTimeout(this.touchstartTimeout);\n          this.touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n        });\n    }\n\n    this.passiveListeners.forEach((listener, event) => {\n      this.elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  /**\n   * Disables the native browser gestures, based on how the tooltip has been configured.\n   */\n  private disableNativeGesturesIfNecessary() {\n    const element = this.elementRef.nativeElement;\n    const style = element.style;\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n        style.userSelect = (style as any).msUserSelect = style.webkitUserSelect = (style as any).MozUserSelect =\n          'none';\n      }\n\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        (style as any).webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      // style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n  public cancelPossiblyHide = () => {\n    if (this.mouseMoveTimeoutId) {\n      clearTimeout(this.mouseMoveTimeoutId);\n    }\n  };\n\n  private possiblyHide = () => {\n    const delay = this.getHideDelay();\n\n    if (delay) {\n      this.mouseMoveTimeoutId = setTimeout(() => {\n        this.possiblyHide();\n      }, delay);\n    } else {\n      this.hide(0);\n    }\n  };\n\n  private getHideDelay = () => {\n    const tooltip = this.tooltipInstance.elementRef.nativeElement;\n    const tooltipRect = tooltip.getBoundingClientRect();\n\n    const offset = {\n      top: tooltipRect.top + window.scrollY,\n      left: tooltipRect.left + window.scrollX\n    };\n\n    const upperLeft = {\n      x: offset.left,\n      y: offset.top\n    };\n    const upperRight = {\n      x: offset.left + tooltip.offsetWidth,\n      y: upperLeft.y\n    };\n    const lowerLeft = {\n      x: offset.left,\n      y: offset.top + tooltip.offsetHeight\n    };\n    const lowerRight = {\n      x: offset.left + tooltip.offsetWidth,\n      y: lowerLeft.y\n    };\n\n    const location = this.mouseLocations[this.mouseLocations.length - 1];\n    let previousLocation = this.mouseLocations[0];\n\n    if (!location) {\n      return 0;\n    }\n\n    if (!previousLocation) {\n      previousLocation = location;\n    }\n\n    if (\n      this.mouseLastDelayLocation &&\n      location.x === this.mouseLastDelayLocation.x &&\n      location.y === this.mouseLastDelayLocation.y\n    ) {\n      // If the mouse hasn't moved since the last time we checked, immediately hide.\n      return 0;\n    }\n\n    let decreasingCorner = upperLeft;\n    let increasingCorner = lowerLeft;\n\n    if (this.overlayPosition === 'left') {\n      decreasingCorner = lowerRight;\n      increasingCorner = upperRight;\n    } else if (this.overlayPosition === 'bottom') {\n      decreasingCorner = upperRight;\n      increasingCorner = upperLeft;\n    } else if (this.overlayPosition === 'top') {\n      decreasingCorner = lowerLeft;\n      increasingCorner = lowerRight;\n    }\n\n    const decreasingSlope = slope(location, decreasingCorner);\n    const increasingSlope = slope(location, increasingCorner);\n    const prevDecreasingSlope = slope(previousLocation, decreasingCorner);\n    const prevIncreasingSlope = slope(previousLocation, increasingCorner);\n\n    if (decreasingSlope < prevDecreasingSlope && increasingSlope > prevIncreasingSlope) {\n      this.mouseLastDelayLocation = location;\n      return this.mouseAimDelay;\n    }\n\n    this.mouseLastDelayLocation = null;\n    return 0;\n  };\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_disabled: BooleanInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_hideDelay: NumberInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_showDelay: NumberInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_mouseAimDelay: NumberInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_interactive: BooleanInput;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public static ngAcceptInputType_arrow: BooleanInput;\n}\n",
            "selector": "[esTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "esTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The message to be displayed in the tooltip.",
                    "description": "<p>The message to be displayed in the tooltip.</p>\n",
                    "line": 294,
                    "type": "string"
                },
                {
                    "name": "esTooltipArrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "If true, adds an arrow to the tooltip.",
                    "description": "<p>If true, adds an arrow to the tooltip.</p>\n",
                    "line": 237,
                    "type": "any"
                },
                {
                    "name": "esTooltipClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.",
                    "description": "<p>Classes to be passed to the tooltip. Supports the same syntax as <code>ngClass</code>.</p>\n",
                    "line": 326,
                    "type": "any"
                },
                {
                    "name": "esTooltipContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Template to display instead of the message.",
                    "description": "<p>Template to display instead of the message.</p>\n",
                    "line": 263,
                    "type": "any"
                },
                {
                    "name": "esTooltipDisableCloseClickListener",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Do not respond to body click events.",
                    "description": "<p>Do not respond to body click events.</p>\n",
                    "line": 364,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipDisableCloseFocusListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Do not respond to focus events after tooltip is opened.",
                    "description": "<p>Do not respond to focus events after tooltip is opened.</p>\n",
                    "line": 352,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipDisableCloseHoverListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Do not respond to hover events after tooltip is opened.",
                    "description": "<p>Do not respond to hover events after tooltip is opened.</p>\n",
                    "line": 358,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Disables the display of the tooltip.",
                    "description": "<p>Disables the display of the tooltip.</p>\n",
                    "line": 181,
                    "type": "any"
                },
                {
                    "name": "esTooltipDisableFocusListener",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Do not respond to focus events.",
                    "description": "<p>Do not respond to focus events.</p>\n",
                    "line": 340,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipDisableHoverListener",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Do not respond to hover events.",
                    "description": "<p>Do not respond to hover events.</p>\n",
                    "line": 346,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipHideDelay",
                    "defaultValue": "this.defaultOptions?.hideDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The default delay in ms before hiding the tooltip after hide is called.",
                    "description": "<p>The default delay in ms before hiding the tooltip after hide is called.</p>\n",
                    "line": 205,
                    "type": "number"
                },
                {
                    "name": "esTooltipInteractive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Makes a tooltip interactive, i.e. will not close when the user hovers over the tooltip.",
                    "description": "<p>Makes a tooltip interactive, i.e. will not close when the user hovers over the tooltip.</p>\n",
                    "line": 250,
                    "type": "any"
                },
                {
                    "name": "esTooltipMouseAimDelay",
                    "defaultValue": "this.esDefaultOptions?.mouseAimDelay || MOUSE_AIM_DELAY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Delay in ms before closing a tooltip when mouse stops moving towards the tooltip.",
                    "description": "<p>Delay in ms before closing a tooltip when mouse stops moving towards the tooltip.</p>\n",
                    "line": 211,
                    "type": "number"
                },
                {
                    "name": "esTooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Allows the user to define the position of the tooltip relative to the parent element.",
                    "description": "<p>Allows the user to define the position of the tooltip relative to the parent element.</p>\n",
                    "line": 156,
                    "type": "TooltipPosition"
                },
                {
                    "name": "esTooltipShowDelay",
                    "defaultValue": "this.defaultOptions?.showDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The default delay in ms before showing the tooltip after show is called.",
                    "description": "<p>The default delay in ms before showing the tooltip after show is called.</p>\n",
                    "line": 199,
                    "type": "number"
                },
                {
                    "name": "esTooltipTouchGestures",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\nuses a long press gesture to show and hide, however it can conflict with the native browser\ngestures. To work around the conflict, Angular Material disables native gestures on the\ntrigger, but that might not be desirable on particular elements (e.g. inputs and draggable\nelements). The different values for this option configure the touch event handling as follows:\n- auto - Enables touch gestures for all elements, but tries to avoid conflicts with native\nbrowser gestures on particular elements. In particular, it allows text selection on inputs and\ntextareas, and preserves the native browser dragging on elements marked as draggable.\n- on - Enables touch gestures for all elements and disables native browser gestures with no\nexceptions.\n- off - Disables touch gestures. Note that this will prevent the tooltip from showing on touch\ndevices.",
                    "description": "<p>How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\nuses a long press gesture to show and hide, however it can conflict with the native browser\ngestures. To work around the conflict, Angular Material disables native gestures on the\ntrigger, but that might not be desirable on particular elements (e.g. inputs and draggable\nelements). The different values for this option configure the touch event handling as follows:</p>\n<ul>\n<li>auto - Enables touch gestures for all elements, but tries to avoid conflicts with native\nbrowser gestures on particular elements. In particular, it allows text selection on inputs and\ntextareas, and preserves the native browser dragging on elements marked as draggable.</li>\n<li>on - Enables touch gestures for all elements and disables native browser gestures with no\nexceptions.</li>\n<li>off - Disables touch gestures. Note that this will prevent the tooltip from showing on touch\ndevices.</li>\n</ul>\n",
                    "line": 229,
                    "type": "TooltipTouchGestures"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.es-tooltip-trigger",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "document:mousemove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 116
                },
                {
                    "name": "focusout",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 124
                }
            ],
            "propertiesClass": [
                {
                    "name": "_arrow",
                    "defaultValue": "this.esDefaultOptions?.arrow ?? false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 231,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 257,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 175,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_interactive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 244,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 288,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_position",
                    "defaultValue": "'below'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TooltipPosition",
                    "optional": false,
                    "description": "",
                    "line": 150,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_tooltipClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[] | Set<string> | literal type",
                    "optional": false,
                    "description": "",
                    "line": 322,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "cancelPossiblyHide",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 921,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "class",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.es-tooltip-trigger'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Emits when the component is destroyed.</p>\n",
                    "line": 403,
                    "rawdescription": "\n\nEmits when the component is destroyed.\n",
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "getHideDelay",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 939,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isHovered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 383,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "mouseLastDelayLocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESTooltipMouseLocation",
                    "optional": false,
                    "description": "",
                    "line": 385,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "mouseLocations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ESTooltipMouseLocation>",
                    "optional": false,
                    "description": "",
                    "line": 384,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "mouseMoveTimeoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "",
                    "line": 386,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onKeyDown",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Handles the keydown events on the host element.\nNeeds to be an arrow function so that we can use it in addEventListener.</p>\n",
                    "line": 560,
                    "rawdescription": "\n\nHandles the keydown events on the host element.\nNeeds to be an arrow function so that we can use it in addEventListener.\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "overlayPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"right\" | \"left\" | \"top\" | \"bottom\"",
                    "optional": false,
                    "description": "",
                    "line": 388,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "passiveListeners",
                    "defaultValue": "new Map<string, EventListenerOrEventListenerObject>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Manually-bound passive event listeners.</p>\n",
                    "line": 393,
                    "rawdescription": "\n\nManually-bound passive event listeners.\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "portal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentPortal<ESTooltipComponent>",
                    "optional": false,
                    "description": "",
                    "line": 378,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "possiblyHide",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 927,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "scrollStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 380,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "touchstartTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timer started at the last <code>touchstart</code> event.</p>\n",
                    "line": 398,
                    "rawdescription": "\n\nTimer started at the last `touchstart` event.\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "viewInitialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 381,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 572,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate the overlay config and position strategy.\n",
                    "description": "<p>Create the overlay config and position strategy.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "detach",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 620,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetaches the currently-attached tooltip.\n",
                    "description": "<p>Detaches the currently-attached tooltip.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "disableNativeGesturesIfNecessary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 897,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisables the native browser gestures, based on how the tooltip has been configured.\n",
                    "description": "<p>Disables the native browser gestures, based on how the tooltip has been configured.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "hide",
                    "args": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.hideDelay"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 535,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input.\n",
                    "description": "<p>Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input.</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.hideDelay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "invertPosition",
                    "args": [
                        {
                            "name": "x",
                            "type": "HorizontalConnectionPos",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "VerticalConnectionPos",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: any; y: any; }",
                    "typeParameters": [],
                    "line": 800,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInverts an overlay position.\n",
                    "description": "<p>Inverts an overlay position.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "HorizontalConnectionPos",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "VerticalConnectionPos",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTooltipVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 552,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if the tooltip is currently visible to the user.\n",
                    "description": "<p>Returns true if the tooltip is currently visible to the user.</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onFocusOut",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusout', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousemove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTooltipClass",
                    "args": [
                        {
                            "name": "tooltipClass",
                            "type": "string | string[] | Set<string> | literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 790,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the tooltip class.\n",
                    "description": "<p>Updates the tooltip class.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tooltipClass",
                            "type": "string | string[] | Set<string> | literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupPointerEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 821,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBinds the pointer events to the tooltip trigger.\n",
                    "description": "<p>Binds the pointer events to the tooltip trigger.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.showDelay"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 498,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input.\n",
                    "description": "<p>Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input.</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.showDelay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 545,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows/hides the tooltip.\n",
                    "description": "<p>Shows/hides the tooltip.</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "updatePosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 631,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the position of the current tooltip.\n",
                    "description": "<p>Updates the position of the current tooltip.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "updateTooltipArrowPosition",
                    "args": [
                        {
                            "name": "change",
                            "type": "ConnectedOverlayPositionChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 746,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the arrow position.\n",
                    "description": "<p>Updates the arrow position.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "ConnectedOverlayPositionChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTooltipMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 724,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the tooltip message and repositions the overlay according to the new message length.\n",
                    "description": "<p>Updates the tooltip message and repositions the overlay according to the new message length.</p>\n",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "implements": [
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "position": {
                    "name": "position",
                    "setSignature": {
                        "name": "position",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "TooltipPosition",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 159,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "TooltipPosition",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "position",
                        "type": "",
                        "returnType": "TooltipPosition",
                        "line": 156,
                        "rawdescription": "Allows the user to define the position of the tooltip relative to the parent element.",
                        "description": "<p>Allows the user to define the position of the tooltip relative to the parent element.</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 184,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 181,
                        "rawdescription": "Disables the display of the tooltip.",
                        "description": "<p>Disables the display of the tooltip.</p>\n"
                    }
                },
                "arrow": {
                    "name": "arrow",
                    "setSignature": {
                        "name": "arrow",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 240,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "arrow",
                        "type": "",
                        "returnType": "",
                        "line": 237,
                        "rawdescription": "If true, adds an arrow to the tooltip.",
                        "description": "<p>If true, adds an arrow to the tooltip.</p>\n"
                    }
                },
                "interactive": {
                    "name": "interactive",
                    "setSignature": {
                        "name": "interactive",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 253,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "interactive",
                        "type": "",
                        "returnType": "",
                        "line": 250,
                        "rawdescription": "Makes a tooltip interactive, i.e. will not close when the user hovers over the tooltip.",
                        "description": "<p>Makes a tooltip interactive, i.e. will not close when the user hovers over the tooltip.</p>\n"
                    }
                },
                "content": {
                    "name": "content",
                    "setSignature": {
                        "name": "content",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 266,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "content",
                        "type": "",
                        "returnType": "",
                        "line": 263,
                        "rawdescription": "Template to display instead of the message.",
                        "description": "<p>Template to display instead of the message.</p>\n"
                    }
                },
                "message": {
                    "name": "message",
                    "setSignature": {
                        "name": "message",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 297,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "message",
                        "type": "",
                        "returnType": "",
                        "line": 294,
                        "rawdescription": "The message to be displayed in the tooltip.",
                        "description": "<p>The message to be displayed in the tooltip.</p>\n"
                    }
                },
                "tooltipClass": {
                    "name": "tooltipClass",
                    "setSignature": {
                        "name": "tooltipClass",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | string[] | Set<string> | literal type",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 329,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | string[] | Set<string> | literal type",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tooltipClass",
                        "type": "",
                        "returnType": "",
                        "line": 326,
                        "rawdescription": "Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.",
                        "description": "<p>Classes to be passed to the tooltip. Supports the same syntax as <code>ngClass</code>.</p>\n"
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AlertStoryIconMappingComponent",
            "id": "component-AlertStoryIconMappingComponent-226e1e2216738446cba3c5771edbd1d7",
            "file": "projects/elonkit/src/ui/alert/__stories__/alert-story-icon-mapping/alert-story-icon-mapping.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-alert-story-icon-mapping",
            "styleUrls": [],
            "styles": [],
            "template": "<es-alert variant=\"default\" icon=\"new_releases\" [closable]=\"closable\" (closed)=\"onClose()\">\n  <ng-container role=\"title\">{{ title }}</ng-container>\n  {{ content }}\n</es-alert>\n<br />\n<es-alert variant=\"info\" svgIcon=\"warning\" [closable]=\"closable\" (closed)=\"onClose()\">\n  <ng-container role=\"title\">{{ title }}</ng-container>\n  {{ content }}\n</es-alert>\n<br />\n<es-alert variant=\"success\" [closable]=\"closable\" (closed)=\"onClose()\">\n  <ng-container role=\"title\">{{ title }}</ng-container>\n  {{ content }}</es-alert\n>\n<br />\n<es-alert variant=\"warning\" [closable]=\"closable\" (closed)=\"onClose()\">\n  <ng-container role=\"title\">{{ title }}</ng-container>\n  {{ content }}</es-alert\n>\n<br />\n<es-alert variant=\"error\" [closable]=\"closable\" (closed)=\"onClose()\">\n  <ng-container role=\"title\">{{ title }}</ng-container>\n  {{ content }}</es-alert\n>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\n\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\n@Component({\n  selector: 'es-alert-story-icon-mapping',\n  template: `\n    <es-alert variant=\"default\" icon=\"new_releases\" [closable]=\"closable\" (closed)=\"onClose()\">\n      <ng-container role=\"title\">{{ title }}</ng-container>\n      {{ content }}\n    </es-alert>\n    <br />\n    <es-alert variant=\"info\" svgIcon=\"warning\" [closable]=\"closable\" (closed)=\"onClose()\">\n      <ng-container role=\"title\">{{ title }}</ng-container>\n      {{ content }}\n    </es-alert>\n    <br />\n    <es-alert variant=\"success\" [closable]=\"closable\" (closed)=\"onClose()\">\n      <ng-container role=\"title\">{{ title }}</ng-container>\n      {{ content }}</es-alert\n    >\n    <br />\n    <es-alert variant=\"warning\" [closable]=\"closable\" (closed)=\"onClose()\">\n      <ng-container role=\"title\">{{ title }}</ng-container>\n      {{ content }}</es-alert\n    >\n    <br />\n    <es-alert variant=\"error\" [closable]=\"closable\" (closed)=\"onClose()\">\n      <ng-container role=\"title\">{{ title }}</ng-container>\n      {{ content }}</es-alert\n    >\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AlertStoryIconMappingComponent {\n  @Input() public content: string;\n  @Input() public title: string;\n  @Input() public closable: boolean;\n\n  @Output() public closed = new EventEmitter();\n\n  constructor(private matIconRegistry: MatIconRegistry, private domSanitizer: DomSanitizer) {\n    this.matIconRegistry.addSvgIcon(\n      'warning',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('/icons/alert/warning.svg')\n    );\n\n    this.matIconRegistry.addSvgIcon(\n      'error',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('/icons/alert/error.svg')\n    );\n  }\n\n  public onClose() {\n    this.closed.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "AutocompleteMultipleStoryServiceComponent",
            "id": "component-AutocompleteMultipleStoryServiceComponent-95dfa4ce6f2fea1790ceba7dded7a91b",
            "file": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-autocomplete-multiple-story-service",
            "styleUrls": [
                "./autocomplete-multiple-story-service.component.scss"
            ],
            "styles": [],
            "template": "<form class=\"es-autocomplete-multiple-story-service\" [formGroup]=\"form\">\n  <mat-form-field\n    appearance=\"outline\"\n    class=\"es-autocomplete-multiple-story-service__field\"\n    [ngStyle]=\"{ 'width.px': width }\"\n  >\n    <mat-label>Country</mat-label>\n\n    <es-autocomplete-multiple\n      formControlName=\"autocomplete\"\n      [service]=\"searchService\"\n      [required]=\"required\"\n      [disabled]=\"disabled\"\n      [optionsCount]=\"totalOptionCount\"\n      [displayWith]=\"displayWith\"\n    ></es-autocomplete-multiple>\n  </mat-form-field>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "showedOptionCount",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "any"
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayWith",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "searchService",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "totalOptionCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\n\nimport { of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { AutocompleteMultipleStoryService } from './autocomplete-multiple-story-service.service';\n\n@Component({\n  selector: 'es-autocomplete-multiple-story-service',\n  styleUrls: ['./autocomplete-multiple-story-service.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <form class=\"es-autocomplete-multiple-story-service\" [formGroup]=\"form\">\n      <mat-form-field\n        appearance=\"outline\"\n        class=\"es-autocomplete-multiple-story-service__field\"\n        [ngStyle]=\"{ 'width.px': width }\"\n      >\n        <mat-label>Country</mat-label>\n\n        <es-autocomplete-multiple\n          formControlName=\"autocomplete\"\n          [service]=\"searchService\"\n          [required]=\"required\"\n          [disabled]=\"disabled\"\n          [optionsCount]=\"totalOptionCount\"\n          [displayWith]=\"displayWith\"\n        ></es-autocomplete-multiple>\n      </mat-form-field>\n    </form>\n  `\n})\nexport class AutocompleteMultipleStoryServiceComponent {\n  @Input() public width: number;\n\n  @Input() public showedOptionCount = null;\n\n  @Input() public required: boolean;\n\n  @Input() public disabled: boolean;\n\n  public form: UntypedFormGroup;\n\n  public totalOptionCount: number;\n\n  constructor(\n    private service: AutocompleteMultipleStoryService,\n    private formBuilder: UntypedFormBuilder\n  ) {\n    this.form = this.formBuilder.group({\n      autocomplete: [\n        [\n          { id: 3, name: 'Norway' },\n          { id: 9, name: 'Portugal' },\n          { id: 10, name: 'Russia' }\n        ]\n      ]\n    });\n  }\n\n  public searchService = (text: string, options?: any[]) => {\n    const lowerText = text ? text.toLowerCase() : '';\n\n    this.totalOptionCount = 0;\n\n    if (options) {\n      return of(options.filter((option) => option.name.toLowerCase().includes(lowerText))).pipe(\n        tap((o) => {\n          this.totalOptionCount = o.length;\n        })\n      );\n    } else {\n      return this.service.getOptions(lowerText, this.showedOptionCount).pipe(\n        map((o) => {\n          this.totalOptionCount = o.totalCount;\n\n          return o.options;\n        })\n      );\n    }\n  };\n\n  public displayWith = (value: { id: number; name: string }) => value.name;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-autocomplete-multiple-story-service {\n  width: 100%;\n\n  &__field.mat-mdc-form-field {\n    width: 300px;\n\n    &.mat-form-field-appearance-outline {\n      /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n      .mat-form-field-infix {\n        border-top: 0;\n        padding-bottom: 16px;\n        padding-top: 16px;\n      }\n      /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n      .mat-form-field-label {\n        top: 2.4em;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./autocomplete-multiple-story-service.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "AutocompleteMultipleStoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "AutocompleteMultipleStoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BreadcrumbsLeafComponent",
            "id": "component-BreadcrumbsLeafComponent-205e9f623840fbd52bda6ae69df1868b",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.routes.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-spec-leaf",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\n\nimport { ESBreadcrumbsModule, ESBreadcrumbsResolver } from '..';\n\nimport {\n  CategoriesListResolver,\n  CategoriesShowResolver,\n  CategoriesShowBreadcrumbsResolver,\n  ItemsListResolver,\n  ItemsShowResolver,\n  ItemsShowBreadcrumbsResolver\n} from './breadcrumbs.spec.resolver';\n\n@Component({\n  selector: 'es-breadcrumbs-spec-root',\n  template: `\n    <div>\n      <es-breadcrumbs></es-breadcrumbs>\n      <router-outlet></router-outlet>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsRootComponent {}\n\n@Component({\n  selector: 'es-breadcrumbs-spec-leaf',\n  template: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsLeafComponent {}\n\nexport const ROUTES = [\n  {\n    path: '',\n    data: {\n      breadcrumb: { icon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsLeafComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsLeafComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsLeafComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsLeafComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsLeafComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n];\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BreadcrumbsRootComponent",
            "id": "component-BreadcrumbsRootComponent-205e9f623840fbd52bda6ae69df1868b",
            "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.routes.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-spec-root",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <es-breadcrumbs></es-breadcrumbs>\n  <router-outlet></router-outlet>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\n\nimport { ESBreadcrumbsModule, ESBreadcrumbsResolver } from '..';\n\nimport {\n  CategoriesListResolver,\n  CategoriesShowResolver,\n  CategoriesShowBreadcrumbsResolver,\n  ItemsListResolver,\n  ItemsShowResolver,\n  ItemsShowBreadcrumbsResolver\n} from './breadcrumbs.spec.resolver';\n\n@Component({\n  selector: 'es-breadcrumbs-spec-root',\n  template: `\n    <div>\n      <es-breadcrumbs></es-breadcrumbs>\n      <router-outlet></router-outlet>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsRootComponent {}\n\n@Component({\n  selector: 'es-breadcrumbs-spec-leaf',\n  template: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsLeafComponent {}\n\nexport const ROUTES = [\n  {\n    path: '',\n    data: {\n      breadcrumb: { icon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsLeafComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsLeafComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsLeafComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsLeafComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsLeafComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n];\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BreadcrumbsStoryBasicCategoriesListComponent",
            "id": "component-BreadcrumbsStoryBasicCategoriesListComponent-50f08c16e6f4b09fb022cecf5b6f8ecf",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-basic-categories-list",
            "styleUrls": [],
            "styles": [],
            "template": "<h1 class=\"mat-h1\">Categories</h1>\n<ul>\n  <li *ngFor=\"let category of categories\">\n    <a [routerLink]=\"[category.id]\">\n      {{ category.title }}\n    </a>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  Input\n} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'es-breadcrumbs-basic',\n  template: `\n    <es-breadcrumbs [withBackButton]=\"withBackButton\"></es-breadcrumbs>\n    <br />\n    <router-outlet></router-outlet>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicComponent implements OnInit {\n  @Input() public withBackButton: boolean;\n\n  constructor(\n    private router: Router,\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.matIconRegistry.addSvgIcon(\n      'home',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('/icons/home.svg')\n    );\n  }\n\n  public ngOnInit() {\n    // Hack for RouterTestingModule\n    this.router.navigate(['/categories']);\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-home',\n  template: `\n    <h1 class=\"mat-h1\">Home</h1>\n    <a [routerLink]=\"['categories']\"> Categories </a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicHomeComponent {}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-categories-list',\n  template: `\n    <h1 class=\"mat-h1\">Categories</h1>\n    <ul>\n      <li *ngFor=\"let category of categories\">\n        <a [routerLink]=\"[category.id]\">\n          {{ category.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicCategoriesListComponent {\n  public categories = [];\n\n  constructor(private route: ActivatedRoute) {\n    this.categories = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-list',\n  template: `\n    <h1 class=\"mat-h1\">Items</h1>\n    <ul>\n      <li *ngFor=\"let item of items\">\n        <a [routerLink]=\"[item.id]\">\n          {{ item.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsListComponent implements OnInit, OnDestroy {\n  public items = [];\n  public destroyed$ = new Subject<void>();\n\n  constructor(private changeDetector: ChangeDetectorRef, private route: ActivatedRoute) {}\n\n  public ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n      this.items = this.route.snapshot.data.data;\n      this.changeDetector.detectChanges();\n    });\n  }\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-show',\n  template: `\n    <h1 class=\"mat-h1\">{{ item.title }}</h1>\n    <a [routerLink]=\"['edit']\">Edit</a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsShowComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-edit',\n  template: ` <h1 class=\"mat-h1\">Edit {{ item.title }}</h1> `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsEditComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BreadcrumbsStoryBasicComponent",
            "id": "component-BreadcrumbsStoryBasicComponent-50f08c16e6f4b09fb022cecf5b6f8ecf",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-basic",
            "styleUrls": [],
            "styles": [],
            "template": "<es-breadcrumbs [withBackButton]=\"withBackButton\"></es-breadcrumbs>\n<br />\n<router-outlet></router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "withBackButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  Input\n} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'es-breadcrumbs-basic',\n  template: `\n    <es-breadcrumbs [withBackButton]=\"withBackButton\"></es-breadcrumbs>\n    <br />\n    <router-outlet></router-outlet>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicComponent implements OnInit {\n  @Input() public withBackButton: boolean;\n\n  constructor(\n    private router: Router,\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.matIconRegistry.addSvgIcon(\n      'home',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('/icons/home.svg')\n    );\n  }\n\n  public ngOnInit() {\n    // Hack for RouterTestingModule\n    this.router.navigate(['/categories']);\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-home',\n  template: `\n    <h1 class=\"mat-h1\">Home</h1>\n    <a [routerLink]=\"['categories']\"> Categories </a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicHomeComponent {}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-categories-list',\n  template: `\n    <h1 class=\"mat-h1\">Categories</h1>\n    <ul>\n      <li *ngFor=\"let category of categories\">\n        <a [routerLink]=\"[category.id]\">\n          {{ category.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicCategoriesListComponent {\n  public categories = [];\n\n  constructor(private route: ActivatedRoute) {\n    this.categories = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-list',\n  template: `\n    <h1 class=\"mat-h1\">Items</h1>\n    <ul>\n      <li *ngFor=\"let item of items\">\n        <a [routerLink]=\"[item.id]\">\n          {{ item.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsListComponent implements OnInit, OnDestroy {\n  public items = [];\n  public destroyed$ = new Subject<void>();\n\n  constructor(private changeDetector: ChangeDetectorRef, private route: ActivatedRoute) {}\n\n  public ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n      this.items = this.route.snapshot.data.data;\n      this.changeDetector.detectChanges();\n    });\n  }\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-show',\n  template: `\n    <h1 class=\"mat-h1\">{{ item.title }}</h1>\n    <a [routerLink]=\"['edit']\">Edit</a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsShowComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-edit',\n  template: ` <h1 class=\"mat-h1\">Edit {{ item.title }}</h1> `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsEditComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "BreadcrumbsStoryBasicHomeComponent",
            "id": "component-BreadcrumbsStoryBasicHomeComponent-50f08c16e6f4b09fb022cecf5b6f8ecf",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-basic-home",
            "styleUrls": [],
            "styles": [],
            "template": "<h1 class=\"mat-h1\">Home</h1>\n<a [routerLink]=\"['categories']\"> Categories </a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  Input\n} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'es-breadcrumbs-basic',\n  template: `\n    <es-breadcrumbs [withBackButton]=\"withBackButton\"></es-breadcrumbs>\n    <br />\n    <router-outlet></router-outlet>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicComponent implements OnInit {\n  @Input() public withBackButton: boolean;\n\n  constructor(\n    private router: Router,\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.matIconRegistry.addSvgIcon(\n      'home',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('/icons/home.svg')\n    );\n  }\n\n  public ngOnInit() {\n    // Hack for RouterTestingModule\n    this.router.navigate(['/categories']);\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-home',\n  template: `\n    <h1 class=\"mat-h1\">Home</h1>\n    <a [routerLink]=\"['categories']\"> Categories </a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicHomeComponent {}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-categories-list',\n  template: `\n    <h1 class=\"mat-h1\">Categories</h1>\n    <ul>\n      <li *ngFor=\"let category of categories\">\n        <a [routerLink]=\"[category.id]\">\n          {{ category.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicCategoriesListComponent {\n  public categories = [];\n\n  constructor(private route: ActivatedRoute) {\n    this.categories = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-list',\n  template: `\n    <h1 class=\"mat-h1\">Items</h1>\n    <ul>\n      <li *ngFor=\"let item of items\">\n        <a [routerLink]=\"[item.id]\">\n          {{ item.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsListComponent implements OnInit, OnDestroy {\n  public items = [];\n  public destroyed$ = new Subject<void>();\n\n  constructor(private changeDetector: ChangeDetectorRef, private route: ActivatedRoute) {}\n\n  public ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n      this.items = this.route.snapshot.data.data;\n      this.changeDetector.detectChanges();\n    });\n  }\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-show',\n  template: `\n    <h1 class=\"mat-h1\">{{ item.title }}</h1>\n    <a [routerLink]=\"['edit']\">Edit</a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsShowComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-edit',\n  template: ` <h1 class=\"mat-h1\">Edit {{ item.title }}</h1> `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsEditComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BreadcrumbsStoryBasicItemsEditComponent",
            "id": "component-BreadcrumbsStoryBasicItemsEditComponent-50f08c16e6f4b09fb022cecf5b6f8ecf",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-basic-items-edit",
            "styleUrls": [],
            "styles": [],
            "template": "<h1 class=\"mat-h1\">Edit {{ item.title }}</h1>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  Input\n} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'es-breadcrumbs-basic',\n  template: `\n    <es-breadcrumbs [withBackButton]=\"withBackButton\"></es-breadcrumbs>\n    <br />\n    <router-outlet></router-outlet>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicComponent implements OnInit {\n  @Input() public withBackButton: boolean;\n\n  constructor(\n    private router: Router,\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.matIconRegistry.addSvgIcon(\n      'home',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('/icons/home.svg')\n    );\n  }\n\n  public ngOnInit() {\n    // Hack for RouterTestingModule\n    this.router.navigate(['/categories']);\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-home',\n  template: `\n    <h1 class=\"mat-h1\">Home</h1>\n    <a [routerLink]=\"['categories']\"> Categories </a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicHomeComponent {}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-categories-list',\n  template: `\n    <h1 class=\"mat-h1\">Categories</h1>\n    <ul>\n      <li *ngFor=\"let category of categories\">\n        <a [routerLink]=\"[category.id]\">\n          {{ category.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicCategoriesListComponent {\n  public categories = [];\n\n  constructor(private route: ActivatedRoute) {\n    this.categories = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-list',\n  template: `\n    <h1 class=\"mat-h1\">Items</h1>\n    <ul>\n      <li *ngFor=\"let item of items\">\n        <a [routerLink]=\"[item.id]\">\n          {{ item.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsListComponent implements OnInit, OnDestroy {\n  public items = [];\n  public destroyed$ = new Subject<void>();\n\n  constructor(private changeDetector: ChangeDetectorRef, private route: ActivatedRoute) {}\n\n  public ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n      this.items = this.route.snapshot.data.data;\n      this.changeDetector.detectChanges();\n    });\n  }\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-show',\n  template: `\n    <h1 class=\"mat-h1\">{{ item.title }}</h1>\n    <a [routerLink]=\"['edit']\">Edit</a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsShowComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-edit',\n  template: ` <h1 class=\"mat-h1\">Edit {{ item.title }}</h1> `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsEditComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 132,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BreadcrumbsStoryBasicItemsListComponent",
            "id": "component-BreadcrumbsStoryBasicItemsListComponent-50f08c16e6f4b09fb022cecf5b6f8ecf",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-basic-items-list",
            "styleUrls": [],
            "styles": [],
            "template": "<h1 class=\"mat-h1\">Items</h1>\n<ul>\n  <li *ngFor=\"let item of items\">\n    <a [routerLink]=\"[item.id]\">\n      {{ item.title }}\n    </a>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  Input\n} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'es-breadcrumbs-basic',\n  template: `\n    <es-breadcrumbs [withBackButton]=\"withBackButton\"></es-breadcrumbs>\n    <br />\n    <router-outlet></router-outlet>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicComponent implements OnInit {\n  @Input() public withBackButton: boolean;\n\n  constructor(\n    private router: Router,\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.matIconRegistry.addSvgIcon(\n      'home',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('/icons/home.svg')\n    );\n  }\n\n  public ngOnInit() {\n    // Hack for RouterTestingModule\n    this.router.navigate(['/categories']);\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-home',\n  template: `\n    <h1 class=\"mat-h1\">Home</h1>\n    <a [routerLink]=\"['categories']\"> Categories </a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicHomeComponent {}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-categories-list',\n  template: `\n    <h1 class=\"mat-h1\">Categories</h1>\n    <ul>\n      <li *ngFor=\"let category of categories\">\n        <a [routerLink]=\"[category.id]\">\n          {{ category.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicCategoriesListComponent {\n  public categories = [];\n\n  constructor(private route: ActivatedRoute) {\n    this.categories = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-list',\n  template: `\n    <h1 class=\"mat-h1\">Items</h1>\n    <ul>\n      <li *ngFor=\"let item of items\">\n        <a [routerLink]=\"[item.id]\">\n          {{ item.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsListComponent implements OnInit, OnDestroy {\n  public items = [];\n  public destroyed$ = new Subject<void>();\n\n  constructor(private changeDetector: ChangeDetectorRef, private route: ActivatedRoute) {}\n\n  public ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n      this.items = this.route.snapshot.data.data;\n      this.changeDetector.detectChanges();\n    });\n  }\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-show',\n  template: `\n    <h1 class=\"mat-h1\">{{ item.title }}</h1>\n    <a [routerLink]=\"['edit']\">Edit</a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsShowComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-edit',\n  template: ` <h1 class=\"mat-h1\">Edit {{ item.title }}</h1> `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsEditComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 94,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "BreadcrumbsStoryBasicItemsShowComponent",
            "id": "component-BreadcrumbsStoryBasicItemsShowComponent-50f08c16e6f4b09fb022cecf5b6f8ecf",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-basic-items-show",
            "styleUrls": [],
            "styles": [],
            "template": "<h1 class=\"mat-h1\">{{ item.title }}</h1>\n<a [routerLink]=\"['edit']\">Edit</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  Input\n} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'es-breadcrumbs-basic',\n  template: `\n    <es-breadcrumbs [withBackButton]=\"withBackButton\"></es-breadcrumbs>\n    <br />\n    <router-outlet></router-outlet>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicComponent implements OnInit {\n  @Input() public withBackButton: boolean;\n\n  constructor(\n    private router: Router,\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.matIconRegistry.addSvgIcon(\n      'home',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('/icons/home.svg')\n    );\n  }\n\n  public ngOnInit() {\n    // Hack for RouterTestingModule\n    this.router.navigate(['/categories']);\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-home',\n  template: `\n    <h1 class=\"mat-h1\">Home</h1>\n    <a [routerLink]=\"['categories']\"> Categories </a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicHomeComponent {}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-categories-list',\n  template: `\n    <h1 class=\"mat-h1\">Categories</h1>\n    <ul>\n      <li *ngFor=\"let category of categories\">\n        <a [routerLink]=\"[category.id]\">\n          {{ category.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicCategoriesListComponent {\n  public categories = [];\n\n  constructor(private route: ActivatedRoute) {\n    this.categories = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-list',\n  template: `\n    <h1 class=\"mat-h1\">Items</h1>\n    <ul>\n      <li *ngFor=\"let item of items\">\n        <a [routerLink]=\"[item.id]\">\n          {{ item.title }}\n        </a>\n      </li>\n    </ul>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsListComponent implements OnInit, OnDestroy {\n  public items = [];\n  public destroyed$ = new Subject<void>();\n\n  constructor(private changeDetector: ChangeDetectorRef, private route: ActivatedRoute) {}\n\n  public ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n      this.items = this.route.snapshot.data.data;\n      this.changeDetector.detectChanges();\n    });\n  }\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-show',\n  template: `\n    <h1 class=\"mat-h1\">{{ item.title }}</h1>\n    <a [routerLink]=\"['edit']\">Edit</a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsShowComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n\n@Component({\n  selector: 'es-breadcrumbs-basic-items-edit',\n  template: ` <h1 class=\"mat-h1\">Edit {{ item.title }}</h1> `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsStoryBasicItemsEditComponent {\n  public item;\n\n  constructor(private route: ActivatedRoute) {\n    this.item = this.route.snapshot.data.data;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 119,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BreadcrumbsStoryCustomizationComponent",
            "id": "component-BreadcrumbsStoryCustomizationComponent-872bc902d9c82048b51a1a484ea10ec6",
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-customization",
            "styleUrls": [
                "./breadcrumbs-story-customization.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"customization\">\n  <es-breadcrumbs typography=\"mat-body-1\" [sizes]=\"sizes\" [withBackButton]=\"withBackButton\">\n    <mat-icon *esBreadcrumbsSeparator class=\"es-breadcrumbs__separator\">\n      chevron_right\n    </mat-icon>\n    <mat-icon *esBreadcrumbsBack> keyboard_backspace </mat-icon>\n    <mat-icon *esBreadcrumbsMore> more_horiz </mat-icon>\n  </es-breadcrumbs>\n  <br />\n  <router-outlet></router-outlet>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "withBackButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sizes",
                    "defaultValue": "{\n    ...ES_BREADCRUMBS_DEFAULT_SIZES,\n    separator: 24\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  OnInit,\n  Input\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ES_BREADCRUMBS_DEFAULT_SIZES } from '../..';\n\n@Component({\n  selector: 'es-breadcrumbs-customization',\n  template: `\n    <div class=\"customization\">\n      <es-breadcrumbs typography=\"mat-body-1\" [sizes]=\"sizes\" [withBackButton]=\"withBackButton\">\n        <mat-icon *esBreadcrumbsSeparator class=\"es-breadcrumbs__separator\">\n          chevron_right\n        </mat-icon>\n        <mat-icon *esBreadcrumbsBack> keyboard_backspace </mat-icon>\n        <mat-icon *esBreadcrumbsMore> more_horiz </mat-icon>\n      </es-breadcrumbs>\n      <br />\n      <router-outlet></router-outlet>\n    </div>\n  `,\n  styleUrls: ['./breadcrumbs-story-customization.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class BreadcrumbsStoryCustomizationComponent implements OnInit {\n  public sizes = {\n    ...ES_BREADCRUMBS_DEFAULT_SIZES,\n    separator: 24\n  };\n\n  @Input() public withBackButton: boolean;\n\n  constructor(private router: Router) {}\n\n  public ngOnInit() {\n    // Hack for RouterTestingModule\n    this.router.navigate(['/categories/1/1/edit']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".customization {\n  // stylelint-disable-next-line\n  .es-breadcrumbs__separator {\n    margin: 0;\n  }\n}\n",
                    "styleUrl": "./breadcrumbs-story-customization.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DropzoneStoryBasicComponent",
            "id": "component-DropzoneStoryBasicComponent-e297a6c6b51f582d86fd80785d08b70c",
            "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-basic/dropzone-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-dropzone-basic",
            "styleUrls": [
                "./dropzone-story-basic.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropzone-story-basic.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "\"en\" | \"ru\""
                },
                {
                    "name": "maxSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number"
                },
                {
                    "name": "subheading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"base64\" | \"binary\""
                }
            ],
            "outputsClass": [
                {
                    "name": "changeFiles",
                    "defaultValue": "new EventEmitter<ESDropzoneFile[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "docs",
                    "defaultValue": "new UntypedFormControl([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "docSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  OnDestroy\n} from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\n\nimport { ESDropzoneFile } from '../../dropzones.types';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'es-dropzone-basic',\n  templateUrl: './dropzone-story-basic.component.html',\n  styleUrls: ['./dropzone-story-basic.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DropzoneStoryBasicComponent implements OnInit, OnDestroy {\n  @Input() public heading: string;\n  @Input() public subheading: string;\n  @Input() public accept: string;\n  @Input() public maxSize: number;\n  @Input() public type: 'base64' | 'binary';\n\n  @Input() public locale: 'en' | 'ru';\n\n  @Output()\n  public changeFiles = new EventEmitter<ESDropzoneFile[]>();\n\n  public docs = new UntypedFormControl([]);\n\n  private docSub: Subscription;\n\n  public ngOnInit(): void {\n    this.docSub = this.docs.valueChanges.subscribe((val) => {\n      this.changeFiles.emit(val);\n    });\n  }\n\n  public ngOnDestroy(): void {\n    this.docSub.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dropzone {\n  max-width: 400px;\n}\n",
                    "styleUrl": "./dropzone-story-basic.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"dropzone\">\n  <es-dropzone\n    [heading]=\"heading\"\n    [subheading]=\"subheading\"\n    [maxSize]=\"maxSize\"\n    [accept]=\"accept\"\n    [type]=\"type\"\n    [formControl]=\"docs\"\n    (validate)=\"validate($event)\"\n  >\n    <mat-hint>{{\n      locale === 'en' ? 'This is an example of a hint message' : 'Это пример подсказки'\n    }}</mat-hint>\n  </es-dropzone>\n</div>\n"
        },
        {
            "name": "DropzoneStoryCustomIconComponent",
            "id": "component-DropzoneStoryCustomIconComponent-bb3e73f859538687bb1603e5772d6aec",
            "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-custom-icon/dropzone-story-custom-icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-dropzone-custom-icon",
            "styleUrls": [
                "./dropzone-story-custom-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropzone-story-custom-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"en\" | \"ru\""
                },
                {
                    "name": "subheading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new UntypedFormGroup({\n    docs: new UntypedFormControl([])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\n@Component({\n  selector: 'es-dropzone-custom-icon',\n  templateUrl: './dropzone-story-custom-icon.component.html',\n  styleUrls: ['./dropzone-story-custom-icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DropzoneStoryCustomIconComponent {\n  @Input() public heading: string;\n  @Input() public subheading: string;\n\n  @Input() public locale: 'en' | 'ru';\n\n  public form = new UntypedFormGroup({\n    docs: new UntypedFormControl([])\n  });\n\n  constructor(private iconRegistry: MatIconRegistry, private sanitizer: DomSanitizer) {\n    iconRegistry.addSvgIcon(\n      'upload',\n      sanitizer.bypassSecurityTrustResourceUrl('/icons/upload.svg')\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form {\n  max-width: 400px;\n}\n",
                    "styleUrl": "./dropzone-story-custom-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form class=\"form\" [formGroup]=\"form\">\n  <es-dropzone\n    [heading]=\"heading\"\n    [subheading]=\"subheading\"\n    svgIcon=\"upload\"\n    formControlName=\"docs\"\n  >\n    <mat-hint>{{\n      locale === 'en' ? 'This is an example of a hint message' : 'Это пример подсказки'\n    }}</mat-hint>\n  </es-dropzone>\n</form>\n"
        },
        {
            "name": "DropzoneStoryRequiredComponent",
            "id": "component-DropzoneStoryRequiredComponent-88579f15e5291ff8fe26a5ed5d9f64ac",
            "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-required/dropzone-story-required.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-dropzone-required",
            "styleUrls": [
                "./dropzone-story-required.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropzone-story-required.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"en\" | \"ru\""
                },
                {
                    "name": "subheading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new UntypedFormGroup({\n    docs: new UntypedFormControl([], Validators.required)\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\n@Component({\n  selector: 'es-dropzone-required',\n  templateUrl: './dropzone-story-required.component.html',\n  styleUrls: ['./dropzone-story-required.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DropzoneStoryRequiredComponent {\n  @Input() public heading: string;\n  @Input() public subheading: string;\n\n  @Input() public locale: 'en' | 'ru';\n\n  public form = new UntypedFormGroup({\n    docs: new UntypedFormControl([], Validators.required)\n  });\n\n  constructor(private iconRegistry: MatIconRegistry, private sanitizer: DomSanitizer) {\n    iconRegistry.addSvgIcon(\n      'upload',\n      sanitizer.bypassSecurityTrustResourceUrl('/icons/upload.svg')\n    );\n  }\n\n  public onSubmit(form: any) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form {\n  max-width: 400px;\n\n  &__submit {\n    margin-top: 15px;\n    text-transform: uppercase;\n  }\n}\n",
                    "styleUrl": "./dropzone-story-required.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form #f=\"ngForm\" class=\"form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit(f)\">\n  <es-dropzone\n    [heading]=\"heading\"\n    [subheading]=\"subheading\"\n    formControlName=\"docs\"\n    accept=\"image/png\"\n  >\n    <mat-hint>{{\n      locale === 'en' ? 'This is an example of a hint message' : 'Это пример подсказки'\n    }}</mat-hint>\n    <mat-error>\n      {{ locale === 'en' ? 'Select at least one file' : 'Выберите хотя бы один файл' }}\n    </mat-error>\n  </es-dropzone>\n  <button class=\"form__submit\" color=\"primary\" mat-flat-button type=\"submit\">\n    {{ locale === 'en' ? 'Submit' : 'Отправить' }}\n  </button>\n</form>\n"
        },
        {
            "name": "ESActionHeadingComponent",
            "id": "component-ESActionHeadingComponent-5242b7c4735365dceae03ca8d35f0a7c",
            "file": "projects/elonkit/src/ui/action-heading/action-heading.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-action-heading",
            "styleUrls": [
                "./action-heading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-heading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Action icon.",
                    "description": "<p>Action icon.</p>\n",
                    "line": 74,
                    "type": "string"
                },
                {
                    "name": "actionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Aria-label of the action button.",
                    "description": "<p>Aria-label of the action button.</p>\n",
                    "line": 96,
                    "type": "string"
                },
                {
                    "name": "actionSvgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Action svg icon.",
                    "description": "<p>Action svg icon.</p>\n",
                    "line": 85,
                    "type": "string"
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Color of the action button.",
                    "description": "<p>Color of the action button.</p>\n",
                    "line": 107,
                    "type": "\"primary\" | \"warn\" | \"accent\""
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Heading text.",
                    "description": "<p>Heading text.</p>\n",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Heading text type.",
                    "description": "<p>Heading text type.</p>\n",
                    "line": 52,
                    "type": "ESActionHeadingType"
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Heading text typography.",
                    "description": "<p>Heading text typography.</p>\n",
                    "line": 63,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "action",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when user clicks button.\n",
                    "description": "<p>Event emitted when user clicks button.</p>\n",
                    "line": 113,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_actionIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_actionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_actionSvgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESActionHeadingType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Inject,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectorRef\n} from '@angular/core';\n\nexport type ESActionHeadingType = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nexport interface ESActonHeadingDefaultOptions {\n  type?: ESActionHeadingType;\n  typography?: string;\n  actionIcon?: string;\n  actionSvgIcon?: string;\n  actionLabel?: string;\n}\n\nexport const ES_ACTION_HEADING_DEFAULT_OPTIONS = new InjectionToken<ESActonHeadingDefaultOptions>(\n  'ES_ACTION_HEADING_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-action-heading',\n  templateUrl: './action-heading.component.html',\n  styleUrls: ['./action-heading.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESActionHeadingComponent {\n  private _type: ESActionHeadingType;\n  private _typography: string;\n  private _actionIcon: string;\n  private _actionSvgIcon: string;\n  private _actionLabel: string;\n\n  /**\n   * Heading text.\n   */\n  @Input()\n  public text: string;\n\n  /**\n   * Heading text type.\n   */\n  @Input()\n  public get type(): ESActionHeadingType {\n    return this._type;\n  }\n  public set type(value: ESActionHeadingType) {\n    this._type = value || this.defaultOptions?.type || 'h1';\n  }\n\n  /**\n   * Heading text typography.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography = value || this.defaultOptions?.typography || 'es-h1';\n  }\n\n  /**\n   * Action icon.\n   */\n  @Input()\n  public get actionIcon(): string {\n    return this._actionIcon;\n  }\n  public set actionIcon(value: string) {\n    this._actionIcon = value || this.defaultOptions?.actionIcon || 'add';\n  }\n\n  /**\n   * Action svg icon.\n   */\n  @Input()\n  public get actionSvgIcon(): string {\n    return this._actionSvgIcon;\n  }\n  public set actionSvgIcon(value: string) {\n    this._actionSvgIcon = value || this.defaultOptions?.actionSvgIcon;\n  }\n\n  /**\n   * Aria-label of the action button.\n   */\n  @Input()\n  public get actionLabel(): string {\n    return this._actionLabel;\n  }\n  public set actionLabel(value: string) {\n    this._actionLabel = value || this.defaultOptions?.actionLabel || 'add';\n  }\n\n  /**\n   * Color of the action button.\n   */\n  @Input()\n  public color: 'primary' | 'warn' | 'accent' = 'primary';\n\n  /**\n   * Event emitted when user clicks button.\n   */\n  @Output()\n  public action: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_ACTION_HEADING_DEFAULT_OPTIONS)\n    private defaultOptions: ESActonHeadingDefaultOptions\n  ) {\n    this.type = this.defaultOptions?.type;\n    this.typography = this.defaultOptions?.typography;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-action-heading {\n  align-items: center;\n  display: flex;\n\n  &__title {\n    margin-right: 16px !important;\n  }\n\n  &__action {\n    &.mat-mdc-mini-fab {\n      box-shadow: none !important;\n\n      &:active {\n        box-shadow: none !important;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./action-heading.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ESActionHeadingType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ESActionHeadingType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "ESActionHeadingType",
                        "line": 52,
                        "rawdescription": "Heading text type.",
                        "description": "<p>Heading text type.</p>\n"
                    }
                },
                "typography": {
                    "name": "typography",
                    "setSignature": {
                        "name": "typography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "typography",
                        "type": "string",
                        "returnType": "string",
                        "line": 63,
                        "rawdescription": "Heading text typography.",
                        "description": "<p>Heading text typography.</p>\n"
                    }
                },
                "actionIcon": {
                    "name": "actionIcon",
                    "setSignature": {
                        "name": "actionIcon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 77,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "actionIcon",
                        "type": "string",
                        "returnType": "string",
                        "line": 74,
                        "rawdescription": "Action icon.",
                        "description": "<p>Action icon.</p>\n"
                    }
                },
                "actionSvgIcon": {
                    "name": "actionSvgIcon",
                    "setSignature": {
                        "name": "actionSvgIcon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 88,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "actionSvgIcon",
                        "type": "string",
                        "returnType": "string",
                        "line": 85,
                        "rawdescription": "Action svg icon.",
                        "description": "<p>Action svg icon.</p>\n"
                    }
                },
                "actionLabel": {
                    "name": "actionLabel",
                    "setSignature": {
                        "name": "actionLabel",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 99,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "actionLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 96,
                        "rawdescription": "Aria-label of the action button.",
                        "description": "<p>Aria-label of the action button.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"es-action-heading\">\n  <ng-container [ngSwitch]=\"type\">\n    <h1 *ngSwitchCase=\"'h1'\" class=\"es-action-heading__title\" [ngClass]=\"typography\">{{ text }}</h1>\n    <h2 *ngSwitchCase=\"'h2'\" class=\"es-action-heading__title\" [ngClass]=\"typography\">{{ text }}</h2>\n    <h3 *ngSwitchCase=\"'h3'\" class=\"es-action-heading__title\" [ngClass]=\"typography\">{{ text }}</h3>\n    <h4 *ngSwitchCase=\"'h4'\" class=\"es-action-heading__title\" [ngClass]=\"typography\">{{ text }}</h4>\n    <h5 *ngSwitchCase=\"'h5'\" class=\"es-action-heading__title\" [ngClass]=\"typography\">{{ text }}</h5>\n    <h6 *ngSwitchCase=\"'h6'\" class=\"es-action-heading__title\" [ngClass]=\"typography\">{{ text }}</h6>\n  </ng-container>\n\n  <button\n    class=\"es-action-heading__action\"\n    type=\"button\"\n    mat-mini-fab\n    [color]=\"color\"\n    [attr.aria-label]=\"actionLabel\"\n    (click)=\"action.emit(true)\"\n  >\n    <mat-icon [svgIcon]=\"actionSvgIcon\">{{ actionIcon || '' }}</mat-icon>\n  </button>\n</div>\n"
        },
        {
            "name": "ESAlertActionsComponent",
            "id": "component-ESAlertActionsComponent-2575861123b1b7a1c26ba94d3b8716af",
            "file": "projects/elonkit/src/ui/alert/components/alert-actions/alert-actions.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-alert-actions",
            "styleUrls": [
                "./alert-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert-actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'es-alert-actions',\n  templateUrl: './alert-actions.component.html',\n  styleUrls: ['./alert-actions.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESAlertActionsComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-alert-actions {\n  display: grid;\n  gap: 8px;\n  grid-auto-flow: column;\n  justify-content: flex-start;\n  margin-bottom: 8px;\n  margin-left: 32px;\n  margin-top: 12px;\n\n  .mat-mdc-button-base {\n    line-height: 32px;\n    padding: 0 8px;\n    text-transform: uppercase;\n  }\n}\n",
                    "styleUrl": "./alert-actions.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"es-alert-actions\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ESAlertComponent",
            "id": "component-ESAlertComponent-f1e7d8ceb07ce872ac9eeb4917fdbf75",
            "file": "projects/elonkit/src/ui/alert/alert.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Show close button.",
                    "description": "<p>Show close button.</p>\n",
                    "line": 93,
                    "type": "any"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Override the icon displayed before the text.\nUnless provided, the icon is mapped to the value of the variant input.",
                    "description": "<p>Override the icon displayed before the text.\nUnless provided, the icon is mapped to the value of the variant input.</p>\n",
                    "line": 104,
                    "type": "string"
                },
                {
                    "name": "svgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Override the icon displayed before the text.\nUnless provided, the icon is mapped to the value of the variant input.",
                    "description": "<p>Override the icon displayed before the text.\nUnless provided, the icon is mapped to the value of the variant input.</p>\n",
                    "line": 110,
                    "type": "string"
                },
                {
                    "name": "titleTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to title.",
                    "description": "<p>Class applied to title.</p>\n",
                    "line": 77,
                    "type": "string"
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to text.",
                    "description": "<p>Class applied to text.</p>\n",
                    "line": 63,
                    "type": "string"
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The variant of the alert. This defines the color and icon used.",
                    "description": "<p>The variant of the alert. This defines the color and icon used.</p>\n",
                    "line": 55,
                    "type": "ESAlertVariant"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when user clicks close button.\n",
                    "description": "<p>Event emitted when user clicks close button.</p>\n",
                    "line": 115,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_closable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_titleTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "iconMapping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter,\n  InjectionToken,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport { Observable } from 'rxjs';\n\nimport { ESAlertVariant } from './alert.types';\nimport { ESLocaleService, ESLocale } from '../locale';\n\nexport interface ESAlertDefaultOptions {\n  typography?: string;\n  titleTypography?: string;\n  iconMapping?: { [key in ESAlertVariant]?: { icon?: string; svgIcon?: string } };\n}\n\nconst DEFAULT_TYPOGRAPHY = 'es-body-100';\nconst DEFAULT_TITLE_TYPOGRAPHY = 'es-body-100';\n\nconst DEFAULT_ICON_MAPPING = {\n  default: { icon: 'info' },\n  info: { icon: 'info' },\n  success: { icon: 'check_circle' },\n  warning: { icon: 'warning' },\n  error: { icon: 'error' }\n};\n\nexport const ES_ALERT_DEFAULT_OPTIONS = new InjectionToken<ESAlertDefaultOptions>(\n  'ES_ALERT_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESAlertComponent {\n  private iconMapping: { [key in ESAlertVariant]: { icon?: string; svgIcon?: string } };\n\n  /**\n   * The variant of the alert. This defines the color and icon used.\n   */\n  @Input() public variant: ESAlertVariant = 'default';\n\n  private _typography;\n\n  /**\n   * Class applied to text.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography =\n      value || (this.defaultOptions && this.defaultOptions.typography) || DEFAULT_TYPOGRAPHY;\n  }\n\n  private _titleTypography;\n\n  /**\n   * Class applied to title.\n   */\n  @Input()\n  public get titleTypography(): string {\n    return this._titleTypography;\n  }\n  public set titleTypography(value: string) {\n    this._titleTypography =\n      value ||\n      (this.defaultOptions && this.defaultOptions.titleTypography) ||\n      DEFAULT_TITLE_TYPOGRAPHY;\n  }\n\n  private _closable = false;\n\n  /**\n   * Show close button.\n   */\n  @Input()\n  public get closable() {\n    return this._closable;\n  }\n  public set closable(closable: any) {\n    this._closable = coerceBooleanProperty(closable);\n  }\n\n  /**\n   * Override the icon displayed before the text.\n   * Unless provided, the icon is mapped to the value of the variant input.\n   */\n  @Input() public icon?: string;\n\n  /**\n   * Override the icon displayed before the text.\n   * Unless provided, the icon is mapped to the value of the variant input.\n   */\n  @Input() public svgIcon?: string;\n\n  /**\n   * Event emitted when user clicks close button.\n   */\n  @Output() public closed = new EventEmitter();\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    private localeService: ESLocaleService,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_ALERT_DEFAULT_OPTIONS)\n    private defaultOptions: ESAlertDefaultOptions\n  ) {\n    this.locale$ = this.localeService.locale();\n\n    this.typography = (defaultOptions && defaultOptions.typography) || DEFAULT_TYPOGRAPHY;\n    this.titleTypography =\n      (defaultOptions && defaultOptions.titleTypography) || DEFAULT_TITLE_TYPOGRAPHY;\n    this.iconMapping = { ...DEFAULT_ICON_MAPPING, ...defaultOptions?.iconMapping };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClose() {\n    this.closed.emit();\n  }\n\n  public get currentIcon() {\n    if (this.icon) {\n      return { icon: this.icon };\n    }\n    if (this.svgIcon) {\n      return { svgIcon: this.svgIcon };\n    }\n    return this.iconMapping[this.variant];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-alert {\n  border-radius: 6px;\n  border-style: solid;\n  border-width: 1px;\n  box-sizing: border-box;\n  min-height: 56px;\n  padding: 7px 16px;\n\n  &__content {\n    display: flex;\n  }\n\n  &__text-wrapper {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-height: 40px;\n\n    &:not(:last-child) {\n      margin-right: 10px;\n    }\n  }\n\n  &__title {\n    font-weight: 700;\n\n    &:empty {\n      display: none;\n    }\n  }\n\n  &__text {\n    position: relative;\n  }\n\n  &__icon {\n    margin: 8px 8px 0 0;\n    min-width: 24px;\n\n    &_close.mat-mdc-icon-button {\n      border-radius: 4px;\n      height: 24px;\n      line-height: 22px;\n      margin: -8px;\n      margin-left: auto;\n      margin-top: 8px;\n      width: 24px;\n    }\n  }\n}\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "typography": {
                    "name": "typography",
                    "setSignature": {
                        "name": "typography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "typography",
                        "type": "string",
                        "returnType": "string",
                        "line": 63,
                        "rawdescription": "Class applied to text.",
                        "description": "<p>Class applied to text.</p>\n"
                    }
                },
                "titleTypography": {
                    "name": "titleTypography",
                    "setSignature": {
                        "name": "titleTypography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "titleTypography",
                        "type": "string",
                        "returnType": "string",
                        "line": 77,
                        "rawdescription": "Class applied to title.",
                        "description": "<p>Class applied to title.</p>\n"
                    }
                },
                "closable": {
                    "name": "closable",
                    "setSignature": {
                        "name": "closable",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "closable",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "jsdoctags": [
                            {
                                "name": "closable",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "closable",
                        "type": "",
                        "returnType": "",
                        "line": 93,
                        "rawdescription": "Show close button.",
                        "description": "<p>Show close button.</p>\n"
                    }
                },
                "currentIcon": {
                    "name": "currentIcon",
                    "getSignature": {
                        "name": "currentIcon",
                        "type": "",
                        "returnType": "",
                        "line": 158
                    }
                }
            },
            "templateData": "<div\n  *ngIf=\"locale$ | async as locale\"\n  class=\"es-alert\"\n  [ngClass]=\"'es-alert_variant_' + variant\"\n  data-testid=\"root\"\n>\n  <div class=\"es-alert__content\">\n    <mat-icon\n      class=\"es-alert__icon\"\n      [ngClass]=\"'es-alert__icon_variant_' + variant\"\n      [svgIcon]=\"currentIcon.svgIcon\"\n    >\n      {{ currentIcon.icon || '' }}\n    </mat-icon>\n    <div class=\"es-alert__text-wrapper\">\n      <div class=\"es-alert__title\" [ngClass]=\"titleTypography\">\n        <ng-content select=\"[role=title]\"></ng-content>\n      </div>\n      <div class=\"es-alert__text\" [ngClass]=\"typography\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <button\n      *ngIf=\"closable\"\n      class=\"es-alert__icon es-alert__icon_close\"\n      [ngClass]=\"'es-alert__icon_variant_' + variant\"\n      mat-icon-button\n      type=\"button\"\n      [attr.aria-label]=\"locale.alert.labelClose\"\n      (click)=\"onClose()\"\n    >\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n  <ng-content select=\"es-alert-actions\"></ng-content>\n</div>\n"
        },
        {
            "name": "ESAutocompleteMultipleComponent",
            "id": "component-ESAutocompleteMultipleComponent-b3c7308616714ffcf04629a5fd43225f",
            "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: MatFormFieldControl, useExisting: ESAutocompleteMultipleComponent }",
                    "type": "component"
                }
            ],
            "selector": "es-autocomplete-multiple",
            "styleUrls": [
                "./autocomplete-multiple.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete-multiple.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether the control is disabled.",
                    "description": "<p>Whether the control is disabled.</p>\n",
                    "line": 130,
                    "type": "boolean"
                },
                {
                    "name": "displayWith",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Function that maps an option control value to its display value in the trigger.",
                    "description": "<p>Function that maps an option control value to its display value in the trigger.</p>\n",
                    "line": 101,
                    "type": "function"
                },
                {
                    "name": "optionsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Total number of options.",
                    "description": "<p>Total number of options.</p>\n",
                    "line": 153,
                    "type": "number"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Placeholder for search input.",
                    "description": "<p>Placeholder for search input.</p>\n",
                    "line": 108,
                    "type": "string"
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether the control is required.",
                    "description": "<p>Whether the control is required.</p>\n",
                    "line": 119,
                    "type": "boolean"
                },
                {
                    "name": "searchDebounce",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Delay before starting search after entering search text.",
                    "description": "<p>Delay before starting search after entering search text.</p>\n",
                    "line": 104,
                    "type": "number"
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Options search service. When second argument is present, the search should be performed by passed down options.",
                    "description": "<p>Options search service. When second argument is present, the search should be performed by passed down options.</p>\n",
                    "line": 98,
                    "type": "function"
                },
                {
                    "name": "sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Sizes of component elements which are used for collapse calculations.",
                    "description": "<p>Sizes of component elements which are used for collapse calculations.</p>\n",
                    "line": 143,
                    "type": "ESAutocompleteMultipleDefaultOptionsSizes"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_optionsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 159,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 149,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "arrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatButton",
                    "optional": true,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'arrow', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "chipList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatChipListbox",
                    "optional": true,
                    "description": "",
                    "line": 95,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'chipList', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`es-autocomplete-multiple-${ESAutocompleteMultipleComponent.nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": true,
                    "description": "",
                    "line": 92,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "nextId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        120,
                        123
                    ]
                },
                {
                    "name": "selectionList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelectionList",
                    "optional": true,
                    "description": "",
                    "line": 94,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selectionList', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "styleDisplay",
                    "defaultValue": "'block'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "styleWidth",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.width'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "id",
                    "defaultValue": "`es-autocomplete-multiple-${ESAutocompleteMultipleComponent.nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string"
                },
                {
                    "name": "style.display",
                    "defaultValue": "'block'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "string"
                },
                {
                    "name": "style.width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  OnInit,\n  OnDestroy,\n  Input,\n  ViewChild,\n  HostBinding,\n  Optional,\n  Self,\n  Host,\n  ElementRef,\n  AfterViewInit,\n  Renderer2,\n  Inject,\n  InjectionToken\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  UntypedFormControl,\n  UntypedFormGroup,\n  FormGroupDirective,\n  NgControl\n} from '@angular/forms';\n\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\n\nimport { MatButton } from '@angular/material/button';\nimport { MatChipListbox } from '@angular/material/chips';\nimport { MatFormField, MatFormFieldControl } from '@angular/material/form-field';\nimport { MatSelectionList, MatSelectionListChange } from '@angular/material/list';\n\nimport { Observable, Subject, combineLatest, of, BehaviorSubject } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  filter,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\n\nimport { resizeObserver } from '../../utils/resize-observer';\nimport { ESLocale, ESLocaleService } from '../locale';\n\nimport { ES_AUTOCOMPLETE_ANIMATIONS } from './autocomplete-multiple.animations';\nimport { ESAutocompleteMultipleSearchScope } from '.';\n\nexport interface ESAutocompleteMultipleDefaultOptionsSizes {\n  chipLeftMargin: number;\n  countBadgeMaxWidth: number;\n}\n\nexport interface ESAutocompleteMultipleDefaultOptions {\n  sizes?: ESAutocompleteMultipleDefaultOptionsSizes;\n}\n\nexport const ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES = {\n  chipLeftMargin: 4,\n  countBadgeMaxWidth: 40\n};\n\nexport const ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS = new InjectionToken<ESAutocompleteMultipleDefaultOptions>(\n  'ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS'\n);\n\nconst MIN_PANEL_WIDTH = 320;\n\n@Component({\n  selector: 'es-autocomplete-multiple',\n  templateUrl: './autocomplete-multiple.component.html',\n  styleUrls: ['./autocomplete-multiple.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{ provide: MatFormFieldControl, useExisting: ESAutocompleteMultipleComponent }],\n  animations: ES_AUTOCOMPLETE_ANIMATIONS\n})\nexport class ESAutocompleteMultipleComponent\n  implements MatFormFieldControl<any[]>, ControlValueAccessor, OnInit, OnDestroy, AfterViewInit {\n  private static nextId = 0;\n  @HostBinding() public id = `es-autocomplete-multiple-${ESAutocompleteMultipleComponent.nextId++}`;\n  @HostBinding('style.display') public styleDisplay = 'block';\n  @HostBinding('style.width') public styleWidth = '100%';\n\n  @ViewChild('input', { static: false }) private input?: ElementRef<HTMLInputElement>;\n  @ViewChild('arrow', { static: true }) private arrow?: MatButton;\n  @ViewChild('selectionList', { static: false }) private selectionList?: MatSelectionList;\n  @ViewChild('chipList', { static: false }) private chipList?: MatChipListbox;\n\n  /** Options search service. When second argument is present, the search should be performed by passed down options. */\n  @Input() public service!: (search: string, options?: any[]) => Observable<any[]>;\n\n  /** Function that maps an option control value to its display value in the trigger. */\n  @Input() public displayWith!: (option: any) => string;\n\n  /** Delay before starting search after entering search text. */\n  @Input() public searchDebounce = 400;\n\n  /** Placeholder for search input. */\n  @Input()\n  public get placeholder() {\n    return this._placeholder;\n  }\n  public set placeholder(placeholder) {\n    this._placeholder = placeholder;\n    this.stateChanges.next();\n  }\n  private _placeholder = '';\n\n  /** Whether the control is required. */\n  @Input()\n  public get required() {\n    return this._required;\n  }\n  public set required(required) {\n    this._required = coerceBooleanProperty(required);\n    this.stateChanges.next();\n  }\n  private _required = false;\n\n  /** Whether the control is disabled. */\n  @Input()\n  public get disabled() {\n    return this._disabled;\n  }\n  public set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n    this.stateChanges.next();\n  }\n  private _disabled = false;\n\n  /**\n   * Sizes of component elements which are used for collapse calculations.\n   */\n  @Input()\n  public get sizes(): ESAutocompleteMultipleDefaultOptionsSizes {\n    return this._sizes;\n  }\n  public set sizes(value: ESAutocompleteMultipleDefaultOptionsSizes) {\n    this._sizes = value || this.defaultOptions?.sizes || ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES;\n  }\n  private _sizes;\n\n  /** Total number of options. */\n  @Input()\n  public get optionsCount(): number {\n    return this._optionsCount || 0;\n  }\n  public set optionsCount(value: number) {\n    this._optionsCount = value || 0;\n  }\n  private _optionsCount;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public origin!: CdkOverlayOrigin;\n\n  /**\n   * @ignore\n   */\n  public describedBy = '';\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private destoryed$ = new Subject<void>();\n\n  /**\n   * @ignore\n   */\n  public stateChanges = new Subject<void>();\n\n  /**\n   * @ignore\n   */\n  public value: any[] = [];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public isOpen = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public width = 0;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public selectionChanged$ = new BehaviorSubject(null);\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public options$: Observable<any[]>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public filteredOptions$: Observable<any[]>;\n\n  /**\n   * @ignore\n   */\n  public focused = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public searchScope = ESAutocompleteMultipleSearchScope;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public form = new UntypedFormGroup({\n    scope: new UntypedFormControl(this.searchScope.ALL),\n    text: new UntypedFormControl('')\n  });\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public hiddenChipCount = 0;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private filteredOptionsCount = 0;\n\n  /**\n   * @ignore\n   */\n  @HostBinding('class.floating')\n  public get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  /**\n   * @ignore\n   */\n  public get errorState(): boolean {\n    const control = this.ngControl;\n    const form = this.ngForm;\n\n    if (control) {\n      return !!(control.invalid && (control.touched || form?.submitted));\n    }\n\n    return false;\n  }\n\n  /**\n   * @ignore\n   */\n  public get empty() {\n    return !this.value.length;\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() public ngForm: FormGroupDirective,\n    /**\n     * @internal\n     */\n    @Optional() @Host() private matFormField: MatFormField,\n    @Optional()\n    @Inject(ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS)\n    private defaultOptions: ESAutocompleteMultipleDefaultOptions,\n    /**\n     * @internal\n     */\n    private changeDetectorRef: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    private focusMonitor: FocusMonitor,\n    /**\n     * @internal\n     */\n    private rendered2: Renderer2,\n    /**\n     * @internal\n     */\n    private elementRef: ElementRef,\n    /**\n     * @internal\n     */\n    public localeService: ESLocaleService\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this as any;\n    }\n    this.locale$ = this.localeService.locale();\n\n    this.sizes = defaultOptions?.sizes || ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES;\n\n    this.options$ = this.form.valueChanges.pipe(\n      startWith({ scope: this.searchScope.ALL, text: '' }),\n      debounceTime(this.searchDebounce),\n      switchMap(({ scope, text }) => {\n        this.filteredOptionsCount = 0;\n\n        if (scope === this.searchScope.SELECTED) {\n          return this.service(text, this.value).pipe(catchError(() => of([])));\n        }\n\n        return this.service(text).pipe(catchError(() => of([])));\n      }),\n      shareReplay(1)\n    );\n\n    this.filteredOptions$ = combineLatest([\n      this.options$,\n      this.selectionChanged$.pipe(filter(() => this.isOpen))\n    ]).pipe(\n      debounceTime(100),\n      map(([options]) => {\n        const { scope } = this.form.value;\n\n        if (scope === this.searchScope.ALL) {\n          return options;\n        }\n\n        const filtered =\n          scope === this.searchScope.SELECTED\n            ? options.filter((option) => this.value.some((o) => o.id === option.id))\n            : options.filter((option) => !this.value.some((o) => o.id === option.id));\n\n        this.optionsCount = this.optionsCount - options.length + filtered.length;\n\n        return filtered;\n      }),\n      tap((options) => {\n        this.filteredOptionsCount = options.length;\n      })\n    );\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnInit() {\n    if (this.matFormField) {\n      this.origin = {\n        elementRef: this.matFormField.getConnectedOverlayOrigin()\n      };\n    }\n\n    this.stateChanges.subscribe(() => {\n      this.changeDetectorRef.detectChanges();\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterViewInit() {\n    combineLatest([\n      // tslint:disable-next-line:deprecation\n      resizeObserver(this.elementRef.nativeElement).pipe(startWith(null), debounceTime(10)),\n      this.selectionChanged$\n    ])\n      .pipe(takeUntil(this.destoryed$))\n      .subscribe(() => {\n        this.updateDisplayedChips();\n      });\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnDestroy() {\n    this.destoryed$.next();\n    this.destoryed$.complete();\n    this.stateChanges.complete();\n  }\n\n  /**\n   * @ignore\n   */\n  public setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  public onContainerClick() {\n    if (this.ngControl.disabled || this.disabled) {\n      return;\n    }\n\n    this.isOpen = true;\n    if (this.matFormField) {\n      const width = this.matFormField._elementRef.nativeElement.clientWidth;\n\n      this.width = width < MIN_PANEL_WIDTH ? MIN_PANEL_WIDTH : width;\n    }\n    this.stateChanges.next();\n\n    setTimeout(() => {\n      if (this.input) {\n        this.input.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public writeValue(value: any[]) {\n    if (value) {\n      this.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  public registerOnChange(onChange: (value: any) => void) {\n    this.onChange = onChange;\n  }\n\n  /**\n   * @ignore\n   */\n  public onChange = (_: any[]) => {};\n\n  /**\n   * @ignore\n   */\n  public registerOnTouched(onTouched: () => void) {\n    this.onTouched = onTouched;\n  }\n\n  /**\n   * @ignore\n   */\n  public onTouched = () => {};\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClose(shouldFocusArrow?: boolean) {\n    this.onTouched();\n    this.isOpen = false;\n    this.form.patchValue({ text: '', scope: this.searchScope.ALL });\n\n    if (shouldFocusArrow && this.arrow) {\n      this.focusMonitor.focusVia(this.arrow._elementRef.nativeElement, 'keyboard');\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClear() {\n    this.form.patchValue({ text: '' });\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSelectionChange(event: MatSelectionListChange) {\n    const newValue = this.value.slice();\n    const option = event.options[0].value;\n\n    const index = newValue.findIndex((o) => o.id === option.id);\n    if (index !== -1) {\n      newValue.splice(index, 1);\n    } else {\n      newValue.push(option);\n    }\n\n    this.value = newValue;\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSelectAll() {\n    const newValue = this.value.slice();\n\n    this.selectionList.options.forEach((option) => {\n      const index = newValue.findIndex((o) => o.id === option.value.id);\n\n      if (index === -1) {\n        newValue.push(option.value);\n      }\n    });\n\n    this.value = newValue;\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onDeSelectAll() {\n    if (this.value.length) {\n      const newValue = this.value.slice();\n\n      this.selectionList.options.forEach((option) => {\n        const index = newValue.findIndex((o) => o.id === option.value.id);\n\n        if (index !== -1) {\n          newValue.splice(index, 1);\n        }\n      });\n\n      this.value = newValue;\n      this.changeState(this.value);\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onRemoveAll(event?: Event) {\n    event.stopPropagation();\n\n    this.value = [];\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onRemove(index: number) {\n    this.value.splice(index, 1);\n    this.changeState(this.value);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onShowSelectedTab() {\n    this.form.patchValue({ scope: this.searchScope.SELECTED });\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public isSelected(option: any) {\n    return !!this.value.find((o) => o.id === option.id);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public getShownCountInfo(labelShown: string, labelOf: string) {\n    return `${labelShown}: ${this.filteredOptionsCount} ${labelOf} ${this.optionsCount}`;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public updateDisplayedChips() {\n    if (this.chipList) {\n      let count = 0;\n\n      const chips = this.chipList._chips;\n\n      let isOverflow = false;\n      let offset = 0;\n\n      chips.forEach((chip, index) => {\n        this.rendered2.setStyle(chip._elementRef.nativeElement, 'display', 'inline-flex');\n        this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', 'auto');\n\n        const {\n          width: chipListWidth\n        } = chip._elementRef.nativeElement.parentElement.getBoundingClientRect();\n\n        const { width: chipWidth } = chip._elementRef.nativeElement.getBoundingClientRect();\n\n        offset += chipWidth;\n\n        if (isOverflow) {\n          count += 1;\n\n          this.rendered2.setStyle(chip._elementRef.nativeElement, 'display', 'none');\n        } else if (chips.length === 1 && chipWidth > chipListWidth) {\n          this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', `${chipListWidth}px`);\n        } else if (chips.length === 1) {\n          this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', 'auto');\n        } else {\n          if (offset <= chipListWidth && index === chips.length - 1) {\n            return;\n          } else if (offset > chipListWidth - this.sizes.countBadgeMaxWidth && index) {\n            count += 1;\n\n            isOverflow = true;\n\n            this.rendered2.setStyle(chip._elementRef.nativeElement, 'display', 'none');\n          } else {\n            const width =\n              chipWidth + this.sizes.countBadgeMaxWidth > chipListWidth\n                ? chipListWidth - this.sizes.countBadgeMaxWidth\n                : chipWidth;\n\n            this.rendered2.setStyle(chip._elementRef.nativeElement, 'width', `${width}px`);\n          }\n        }\n\n        offset += this.sizes.chipLeftMargin;\n      });\n\n      if (this.hiddenChipCount !== count) {\n        this.hiddenChipCount = count;\n        this.stateChanges.next();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private changeState(value: any[]) {\n    this.onChange(value);\n    this.stateChanges.next();\n    this.selectionChanged$.next(true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-autocomplete-multiple {\n  align-items: center;\n  display: flex;\n  height: 24px;\n  justify-content: space-between;\n  width: 100%;\n\n  &__value {\n    display: flex;\n    flex: 1;\n    justify-content: flex-start;\n    max-width: calc(100% - 48px);\n    padding-right: 4px;\n    white-space: nowrap;\n  }\n\n  &__chip-list {\n    flex-wrap: nowrap;\n    height: 24px;\n    width: 100%;\n    /* TODO(mdc-migration): The following rule targets internal classes of chips that may no longer apply for the MDC version. */\n    /* TODO(mdc-migration): The following rule targets internal classes of chips that may no longer apply for the MDC version. */\n    .mat-chip-list-wrapper {\n      flex-wrap: nowrap;\n      margin: 0;\n      overflow: hidden;\n      width: 100%;\n\n      .mat-mdc-standard-chip {\n        margin: 0;\n      }\n    }\n  }\n\n  &__chip {\n    &.mat-mdc-standard-chip {\n      max-width: 160px;\n      min-height: 24px;\n\n      &:not(:first-child) {\n        margin-left: 4px;\n      }\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of chips that may no longer apply for the MDC version. */\n    .mat-chip-remove {\n      min-width: 18px;\n    }\n  }\n\n  &__chip-text {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  &__count {\n    align-items: center;\n    border: 0 none;\n    border-radius: 96px;\n    box-sizing: border-box;\n    cursor: pointer;\n    height: 24px;\n    margin-left: 4px;\n    outline: none;\n    padding: 4px 5px 4px 4px;\n\n    &_disabled {\n      cursor: default;\n      opacity: 0.7;\n    }\n  }\n\n  &__clear.mat-mdc-icon-button {\n    align-items: center;\n    display: flex;\n    height: 20px;\n    justify-content: center;\n    margin-left: 4px;\n    margin-right: 1px;\n    width: 20px;\n\n    .mat-icon {\n      font-size: 20px;\n      height: 20px;\n      width: 20px;\n    }\n  }\n\n  &__arrow.mat-mdc-icon-button {\n    height: 18px;\n    line-height: 18px;\n    width: 18px;\n\n    .mat-icon {\n      font-size: 18px;\n      height: 18px;\n      width: 18px;\n    }\n  }\n\n  &__panel {\n    border-radius: 4px;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    transform-origin: center top;\n  }\n\n  &__toggle-group {\n    display: flex;\n    /* TODO(mdc-migration): The following rule targets internal classes of button that may no longer apply for the MDC version. */\n    &.mat-button-toggle-group-appearance-standard {\n      border: 0 none;\n      border-radius: 0;\n    }\n  }\n\n  &__button-toggle {\n    flex: 1;\n    /* TODO(mdc-migration): The following rule targets internal classes of button that may no longer apply for the MDC version. */\n    &.mat-button-toggle + &.mat-button-toggle {\n      border-left: 0 none;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of button that may no longer apply for the MDC version. */\n    /* TODO(mdc-migration): The following rule targets internal classes of button that may no longer apply for the MDC version. */\n    &.mat-button-toggle-appearance-standard {\n      border-bottom-style: solid;\n      border-bottom-width: 1px;\n      /* TODO(mdc-migration): The following rule targets internal classes of button that may no longer apply for the MDC version. */\n      &.mat-button-toggle-checked {\n        border-bottom-width: 2px;\n      }\n      /* TODO(mdc-migration): The following rule targets internal classes of button that may no longer apply for the MDC version. */\n      .mat-button-toggle-label-content {\n        line-height: 32px;\n      }\n    }\n  }\n\n  &__options {\n    max-height: 208px;\n    overflow: auto;\n\n    &.mat-mdc-list-base {\n      padding: 0;\n    }\n  }\n\n  &__option {\n    &:first-child {\n      margin-top: 8px;\n    }\n\n    &:last-child {\n      margin-bottom: 8px;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of list that may no longer apply for the MDC version. */\n    &.mat-list-option.mat-list-option .mat-list-item-content .mat-list-text {\n      padding-left: 8px;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of list that may no longer apply for the MDC version. */\n    .mat-list-text {\n      white-space: nowrap;\n    }\n  }\n\n  &__menu {\n    align-items: center;\n    border-bottom-style: solid;\n    border-bottom-width: 1px;\n    display: flex;\n    height: 32px;\n    padding-left: 8px;\n  }\n\n  &__menu-button {\n    height: 32px;\n\n    &.mat-mdc-button {\n      border-radius: 0;\n      height: 32px;\n      line-height: 32px;\n      padding: 0 8px;\n    }\n  }\n\n  &__footer {\n    display: flex;\n    justify-content: space-between;\n    padding: 6px 16px;\n  }\n}\n\n.es-autocomplete-multiple-search {\n  align-items: center;\n  border-bottom-style: solid;\n  border-bottom-width: 1px;\n  display: flex;\n  padding: 10px 12px;\n\n  &__icon {\n    flex-shrink: 0;\n    margin-right: 8px;\n  }\n\n  &__input {\n    background: none;\n    border: 0;\n    display: block;\n    flex: 1;\n    height: 24px;\n    outline: none;\n    padding: 0;\n  }\n\n  &__clear.mat-mdc-icon-button {\n    align-items: center;\n    display: flex;\n    flex-shrink: 0;\n    height: 24px;\n    justify-content: center;\n    line-height: 24px;\n    margin-left: 8px;\n    width: 24px;\n\n    .mat-icon {\n      display: flex;\n      font-size: 16px;\n      height: 16px;\n      width: 16px;\n    }\n  }\n}\n",
                    "styleUrl": "./autocomplete-multiple.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "MatFormFieldControl",
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "placeholder": {
                    "name": "placeholder",
                    "setSignature": {
                        "name": "placeholder",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "placeholder",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 111,
                        "jsdoctags": [
                            {
                                "name": "placeholder",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 108,
                        "rawdescription": "Placeholder for search input.",
                        "description": "<p>Placeholder for search input.</p>\n"
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "required",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 122,
                        "jsdoctags": [
                            {
                                "name": "required",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 119,
                        "rawdescription": "Whether the control is required.",
                        "description": "<p>Whether the control is required.</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "disabled",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 133,
                        "jsdoctags": [
                            {
                                "name": "disabled",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 130,
                        "rawdescription": "Whether the control is disabled.",
                        "description": "<p>Whether the control is disabled.</p>\n"
                    }
                },
                "sizes": {
                    "name": "sizes",
                    "setSignature": {
                        "name": "sizes",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ESAutocompleteMultipleDefaultOptionsSizes",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 146,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ESAutocompleteMultipleDefaultOptionsSizes",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sizes",
                        "type": "",
                        "returnType": "ESAutocompleteMultipleDefaultOptionsSizes",
                        "line": 143,
                        "rawdescription": "Sizes of component elements which are used for collapse calculations.",
                        "description": "<p>Sizes of component elements which are used for collapse calculations.</p>\n"
                    }
                },
                "optionsCount": {
                    "name": "optionsCount",
                    "setSignature": {
                        "name": "optionsCount",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 156,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "optionsCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 153,
                        "rawdescription": "Total number of options.",
                        "description": "<p>Total number of options.</p>\n"
                    }
                }
            },
            "templateData": "<div *ngIf=\"locale$ | async as locale\" class=\"es-autocomplete-multiple es-subtitle-1\">\n  <div class=\"es-autocomplete-multiple__value\">\n    <mat-chip-listbox *ngIf=\"value.length\" class=\"es-autocomplete-multiple__chip-list\" #chipList>\n      <mat-chip-option\n        *ngFor=\"let option of this.value; index as i\"\n        [esTooltip]=\"displayWith(option)\"\n        esTooltipArrow\n        class=\"es-autocomplete-multiple__chip es-body-100\"\n        removable\n        [disabled]=\"ngControl.disabled || disabled\"\n        (removed)=\"onRemove(i)\"\n      >\n        <label class=\"es-autocomplete-multiple__chip-text\">\n          {{ displayWith(option) }}\n        </label>\n\n        <mat-icon matChipRemove svgIcon=\"es-autocomplete-multiple:clear-small\"></mat-icon>\n      </mat-chip-option>\n\n      <button\n        *ngIf=\"hiddenChipCount\"\n        tabindex=\"0\"\n        class=\"es-autocomplete-multiple__count es-caption\"\n        [ngClass]=\"{ 'es-autocomplete-multiple__count_disabled': ngControl.disabled || disabled }\"\n        [esTooltip]=\"locale.autocompliteMultiple.labelShowSelected\"\n        esTooltipArrow\n        (click)=\"onShowSelectedTab()\"\n      >\n        +{{ hiddenChipCount }}\n      </button>\n    </mat-chip-listbox>\n  </div>\n\n  <button\n    *ngIf=\"value.length\"\n    class=\"es-autocomplete-multiple__clear\"\n    mat-icon-button\n    [attr.aria-label]=\"locale.autocompliteMultiple.labelRemoveAll\"\n    [disabled]=\"ngControl.disabled || disabled\"\n    (click)=\"onRemoveAll($event)\"\n  >\n    <mat-icon svgIcon=\"es-autocomplete-multiple:clear\"></mat-icon>\n  </button>\n\n  <button\n    #arrow\n    class=\"es-autocomplete-multiple__arrow\"\n    mat-icon-button\n    [attr.aria-describedby]=\"describedBy\"\n    [attr.aria-label]=\"\n      this.isOpen\n        ? locale.autocompliteMultiple.labelCloseMenu\n        : locale.autocompliteMultiple.labelOpenMenu\n    \"\n    [disabled]=\"ngControl.disabled || disabled\"\n  >\n    <mat-icon\n      svgIcon=\"es-autocomplete-multiple:{{ this.isOpen ? 'menu-up' : 'menu-down' }}\"\n    ></mat-icon>\n  </button>\n</div>\n\n<ng-template\n  cdkConnectedOverlay\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  [cdkConnectedOverlayOffsetY]=\"8\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n  (backdropClick)=\"onClose()\"\n  (detach)=\"onClose(true)\"\n>\n  <div\n    *ngIf=\"locale$ | async as locale\"\n    class=\"es-autocomplete-multiple__panel mat-elevation-z8\"\n    [ngStyle]=\"{ 'width.px': width }\"\n    [formGroup]=\"form\"\n    cdkTrapFocus\n    @panel\n  >\n    <mat-button-toggle-group class=\"es-autocomplete-multiple__toggle-group\" formControlName=\"scope\">\n      <mat-button-toggle\n        class=\"es-autocomplete-multiple__button-toggle es-body-100\"\n        [aria-label]=\"locale.autocompliteMultiple.labelSearchScopeAll\"\n        [value]=\"searchScope.ALL\"\n        >{{ locale.autocompliteMultiple.labelTabAll }}</mat-button-toggle\n      >\n      <mat-button-toggle\n        class=\"es-autocomplete-multiple__button-toggle es-body-100\"\n        [aria-label]=\"locale.autocompliteMultiple.labelSearchScopeSelected\"\n        [value]=\"searchScope.SELECTED\"\n        >{{ locale.autocompliteMultiple.labelTabSelected }}</mat-button-toggle\n      >\n      <mat-button-toggle\n        class=\"es-autocomplete-multiple__button-toggle es-body-100\"\n        [aria-label]=\"locale.autocompliteMultiple.labelSearchScopeNotSelected\"\n        [value]=\"searchScope.NOT_SELECTED\"\n        >{{ locale.autocompliteMultiple.labelTabNotSelected }}</mat-button-toggle\n      >\n    </mat-button-toggle-group>\n\n    <div class=\"es-autocomplete-multiple-search\">\n      <mat-icon\n        class=\"es-autocomplete-multiple-search__icon\"\n        matPrefix\n        svgIcon=\"es-autocomplete-multiple:magnify\"\n      ></mat-icon>\n\n      <input\n        #input\n        class=\"es-autocomplete-multiple-search__input es-subtitle-1\"\n        formControlName=\"text\"\n        [attr.aria-label]=\"locale.autocompliteMultiple.labelSearch\"\n        [placeholder]=\"placeholder\"\n      />\n\n      <button\n        *ngIf=\"form.get('text').value\"\n        class=\"es-autocomplete-multiple-search__clear\"\n        mat-icon-button\n        [attr.aria-label]=\"locale.autocompliteMultiple.labelClear\"\n        (click)=\"onClear()\"\n      >\n        <mat-icon svgIcon=\"es-autocomplete-multiple:clear\"></mat-icon>\n      </button>\n    </div>\n\n    <ng-container *ngIf=\"filteredOptions$ | async as options\">\n      <div *ngIf=\"options.length\" class=\"es-autocomplete-multiple__menu\">\n        <button\n          mat-button\n          class=\"es-autocomplete-multiple__menu-button es-body-100\"\n          [attr.aria-label]=\"locale.autocompliteMultiple.labelChooseAll\"\n          (click)=\"onSelectAll()\"\n        >\n          {{ locale.autocompliteMultiple.labelChooseAll }}\n        </button>\n\n        <button\n          mat-button\n          class=\"es-autocomplete-multiple__menu-button es-body-100\"\n          [attr.aria-label]=\"locale.autocompliteMultiple.labelRemoveChoice\"\n          (click)=\"onDeSelectAll()\"\n        >\n          {{ locale.autocompliteMultiple.labelRemoveChoice }}\n        </button>\n      </div>\n\n      <mat-selection-list\n        class=\"es-autocomplete-multiple__options\"\n        color=\"primary\"\n        (selectionChange)=\"onSelectionChange($event)\"\n        #selectionList\n      >\n        <mat-list-option\n          *ngFor=\"let option of options\"\n          class=\"es-autocomplete-multiple__option\"\n          [ngClass]=\"{ 'es-autocomplete-multiple__option_selected': matOption.selected }\"\n          [attr.aria-label]=\"displayWith(option)\"\n          checkboxPosition=\"before\"\n          [value]=\"option\"\n          [selected]=\"isSelected(option)\"\n          data-testid=\"mat-option\"\n          #matOption\n        >\n          {{ displayWith(option) }}\n        </mat-list-option>\n      </mat-selection-list>\n\n      <mat-divider *ngIf=\"options.length\" class=\"es-autocomplete-multiple__divider\"></mat-divider>\n    </ng-container>\n\n    <div class=\"es-autocomplete-multiple__footer es-caption\">\n      <label>\n        {{\n          getShownCountInfo(\n            locale.autocompliteMultiple.labelShown,\n            locale.autocompliteMultiple.labelOf\n          )\n        }}</label\n      >\n      <label>{{ locale.autocompliteMultiple.labelSelected + ': ' + value.length }}</label>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ESAvatarComponent",
            "id": "component-ESAvatarComponent-b50c25bc5eed6c5b6b068c0a8b8ade6a",
            "file": "projects/elonkit/src/ui/avatar/avatar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The alt attribute for avatar image.",
                    "description": "<p>The alt attribute for avatar image.</p>\n",
                    "line": 59,
                    "type": "string"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Size of the avatar in pixels.",
                    "description": "<p>Size of the avatar in pixels.</p>\n",
                    "line": 36,
                    "type": "any"
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The src attribute for avatar image.",
                    "description": "<p>The src attribute for avatar image.</p>\n",
                    "line": 64,
                    "type": "string"
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to text.",
                    "description": "<p>Class applied to text.</p>\n",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The shape of the avatar.",
                    "description": "<p>The shape of the avatar.</p>\n",
                    "line": 70,
                    "type": "ESAvatarVariant"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESAvatarVariant",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Optional,\n  Inject,\n  ViewEncapsulation\n} from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\n\nimport { ESAvatarDefaultOptions, ESAvatarVariant } from './avatar.types';\n\nexport const ES_AVATAR_DEFAULT_OPTIONS = new InjectionToken<ESAvatarDefaultOptions>(\n  'ES_AVATAR_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESAvatarComponent {\n  /**\n   * @internal\n   * @ignore\n   */\n  public avatarVariant = ESAvatarVariant;\n\n  /**\n   * Size of the avatar in pixels.\n   */\n  @Input()\n  public get size(): any {\n    return this._size;\n  }\n  public set size(value: any) {\n    this._size = coerceNumberProperty(value, 40);\n  }\n  private _size: any;\n\n  /**\n   * Class applied to text.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography = value || 'es-subtitle-2';\n  }\n  private _typography: string;\n\n  /**\n   * The alt attribute for avatar image.\n   */\n  @Input() public alt?: string;\n\n  /**\n   * The src attribute for avatar image.\n   */\n  @Input() public src?: string;\n\n  /**\n   * The shape of the avatar.\n   */\n  @Input()\n  public get variant(): ESAvatarVariant {\n    return this._variant;\n  }\n  public set variant(value: ESAvatarVariant) {\n    this._variant = value || this.avatarVariant.Round;\n  }\n  private _variant: ESAvatarVariant;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    @Optional()\n    @Inject(ES_AVATAR_DEFAULT_OPTIONS)\n    private defaultOptions: ESAvatarDefaultOptions\n  ) {\n    this.size = this.defaultOptions?.size;\n    this.typography = this.defaultOptions?.typography;\n    this.variant = this.defaultOptions?.variant;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-avatar {\n  position: relative;\n\n  &__img {\n    height: 100%;\n    object-fit: cover;\n    width: 100%;\n  }\n\n  &__default {\n    display: flex;\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    transform: translate(-50%, -50%);\n\n    img {\n      height: 100%;\n      object-fit: cover;\n      width: 100%;\n    }\n  }\n\n  &_variant_square {\n    border-radius: 8px;\n    // stylelint-disable-next-line\n    .es-avatar__img {\n      border-radius: 5px;\n    }\n  }\n\n  &_variant_round {\n    border-radius: 50%;\n    // stylelint-disable-next-line\n    .es-avatar__img {\n      border-radius: 50%;\n    }\n  }\n}\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "size": {
                    "name": "size",
                    "setSignature": {
                        "name": "size",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "size",
                        "type": "any",
                        "returnType": "any",
                        "line": 36,
                        "rawdescription": "Size of the avatar in pixels.",
                        "description": "<p>Size of the avatar in pixels.</p>\n"
                    }
                },
                "typography": {
                    "name": "typography",
                    "setSignature": {
                        "name": "typography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "typography",
                        "type": "string",
                        "returnType": "string",
                        "line": 48,
                        "rawdescription": "Class applied to text.",
                        "description": "<p>Class applied to text.</p>\n"
                    }
                },
                "variant": {
                    "name": "variant",
                    "setSignature": {
                        "name": "variant",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ESAvatarVariant",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 73,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ESAvatarVariant",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "variant",
                        "type": "",
                        "returnType": "ESAvatarVariant",
                        "line": 70,
                        "rawdescription": "The shape of the avatar.",
                        "description": "<p>The shape of the avatar.</p>\n"
                    }
                }
            },
            "templateData": "<div\n  data-testid=\"avatar\"\n  class=\"es-avatar\"\n  [ngStyle]=\"{ 'height.px': size, 'width.px': size }\"\n  [ngClass]=\"{ 'es-avatar_variant_round': variant === avatarVariant.Round,  'es-avatar_variant_square': variant === avatarVariant.Square}\"\n>\n  <img\n    *ngIf=\"src\"\n    class=\"es-avatar__img\"\n    [src]=\"src\"\n    [alt]=\"alt\"\n  />\n  <div *ngIf=\"!src\" data-testid=\"typography\" class=\"es-avatar__default\" [ngClass]=\"typography\">\n    <ng-content>\n\n    </ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "ESAvatarGroupComponent",
            "id": "component-ESAvatarGroupComponent-a2c35a96177911acfaec8ed510b497ff",
            "file": "projects/elonkit/src/ui/avatar/avatar-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-avatar-group",
            "styleUrls": [
                "./avatar-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Defines size of the avatar in pixels.",
                    "description": "<p>Defines size of the avatar in pixels.</p>\n",
                    "line": 32,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "avatars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ESAvatarComponent, {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setAvatarsIndex",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  ElementRef,\n  ViewEncapsulation,\n  OnInit,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Renderer2,\n  OnDestroy\n} from '@angular/core';\n\nimport { ESAvatarComponent } from './avatar.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'es-avatar-group',\n  templateUrl: './avatar-group.component.html',\n  styleUrls: ['./avatar-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESAvatarGroupComponent implements OnInit, AfterContentInit, OnDestroy {\n  @ContentChildren(ESAvatarComponent, { read: ElementRef }) private avatars: QueryList<ElementRef>;\n  /**\n   * Defines size of the avatar in pixels.\n   */\n  @Input()\n  public size: number;\n\n  private destroyed$ = new Subject<void>();\n\n  /**\n   * @ignore\n   */\n  constructor(private _elementRef: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * @ignore\n   */\n  public ngOnInit() {\n    console.log(this.size);\n    this._elementRef.nativeElement.style.setProperty('--size', `${this.size + `px`}`);\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterContentInit() {\n    this.setAvatarsIndex(this.avatars);\n    this.avatars.changes.pipe(takeUntil(this.destroyed$)).subscribe((avatars) => {\n      if (avatars) {\n        this.setAvatarsIndex(avatars);\n      }\n    });\n  }\n\n  private setAvatarsIndex = (avatars): void => {\n    avatars.forEach((avatar, index) => {\n      this.renderer.setStyle(avatar.nativeElement, 'z-index', index);\n    });\n  };\n\n  /**\n   * @ignore\n   */\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-avatar-group {\n  display: flex;\n\n  es-avatar {\n    border-radius: 50%;\n\n    &:last-child {\n      z-index: 1;\n    }\n\n    &:not(:first-child) {\n      margin-left: -12px;\n    }\n\n    /* change the white border to mask only if it's supported: */\n    @supports (mask: radial-gradient(transparent 12px, black 0)) {\n      /* stylelint-disable-next-line */\n\n      &:not(:last-of-type) {\n        mask: radial-gradient(\n          circle at calc((var(--size) * 0.75) + ((var(--size) / 2) + 2px)),\n          transparent calc((var(--size) / 2) + 2px),\n          #fff 0\n        );\n      }\n\n      &:not(:first-of-type) {\n        margin-left: calc((var(--size) * -0.25) + 2.2px);\n      }\n\n      .es-avatar {\n        border: unset !important;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./avatar-group.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "AfterContentInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"es-avatar-group\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ESBreadcrumbsBreadcrumbComponent",
            "id": "component-ESBreadcrumbsBreadcrumbComponent-fd2ec050e77be0f06d03509556710099",
            "file": "projects/elonkit/src/ui/breadcrumbs/components/breadcrumbs-breadcrumb/breadcrumbs-breadcrumb.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-breadcrumb",
            "styleUrls": [
                "./breadcrumbs-breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs-breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadcrumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 572,
                            "end": 585,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 573,
                                "end": 581,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 19,
                    "type": "ESBreadcrumb"
                },
                {
                    "name": "last",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 644,
                            "end": 657,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 645,
                                "end": 653,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 24,
                    "type": "boolean"
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 704,
                            "end": 717,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 705,
                                "end": 713,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 29,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESLocaleService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "rawdescription": "\n\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "pos": 870,
                            "end": 885,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 871,
                                "end": 879,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ESBreadcrumb } from '../../breadcrumbs.types';\nimport { ESLocaleService, ESLocale } from '../../../locale';\n\n@Component({\n  selector: 'es-breadcrumbs-breadcrumb',\n  templateUrl: './breadcrumbs-breadcrumb.component.html',\n  styleUrls: ['./breadcrumbs-breadcrumb.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESBreadcrumbsBreadcrumbComponent {\n  /**\n   * @internal\n   */\n  @Input() public breadcrumb: ESBreadcrumb;\n\n  /**\n   * @internal\n   */\n  @Input() public last = false;\n\n  /**\n   * @internal\n   */\n  @Input() public typography: string;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  constructor(\n    /**\n     * @internal\n     */\n    public localeService: ESLocaleService\n  ) {\n    this.locale$ = this.localeService.locale();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-breadcrumbs-breadcrumb {\n  $root: '.es-breadcrumbs-breadcrumb';\n\n  align-items: center;\n  display: flex;\n  flex-shrink: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  &__link {\n    align-items: center;\n    border-radius: 4px;\n    display: flex;\n    height: 24px;\n    min-width: 0;\n    overflow: hidden;\n    text-decoration: none;\n    transition: 200ms;\n\n    &:not(&_last) {\n      &:hover,\n      &:focus {\n        outline: 0;\n      }\n    }\n  }\n\n  &__icon {\n    + #{$root}__label {\n      margin-left: 4px;\n    }\n  }\n\n  &__label {\n    overflow: hidden;\n    padding: 4px;\n    text-overflow: ellipsis;\n  }\n\n  &__menu {\n    &.mat-mdc-icon-button {\n      border-radius: 4px;\n      height: 24px;\n      line-height: 20px;\n      width: 20px;\n\n      &:hover,\n      &:focus {\n        outline: 0;\n      }\n    }\n\n    .mat-icon {\n      align-items: center;\n      display: flex;\n      height: 24px;\n      justify-content: center;\n      line-height: 20px;\n      width: 20px;\n    }\n  }\n}\n",
                    "styleUrl": "./breadcrumbs-breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "ESLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "ESLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"es-breadcrumbs-breadcrumb\" [ngClass]=\"typography\">\n  <a\n    *ngIf=\"!last\"\n    [routerLink]=\"[breadcrumb.path]\"\n    [attr.aria-label]=\"breadcrumb.data.ariaLabel\"\n    class=\"es-breadcrumbs-breadcrumb__link\"\n    mat-ripple\n  >\n    <ng-container *ngTemplateOutlet=\"item\"></ng-container>\n  </a>\n  <span *ngIf=\"last\" class=\"es-breadcrumbs-breadcrumb__link es-breadcrumbs-breadcrumb__link_last\">\n    <ng-container *ngTemplateOutlet=\"item\"></ng-container>\n  </span>\n\n  <ng-container *ngIf=\"breadcrumb.data.breadcrumbs\">\n    <button\n      type=\"button\"\n      mat-icon-button\n      [matMenuTriggerFor]=\"breadcrumbsMenu\"\n      [attr.aria-label]=\"(locale$ | async).breadcrumbs.labelMore\"\n      class=\"es-breadcrumbs-breadcrumb__menu\"\n    >\n      <mat-icon>arrow_drop_down</mat-icon>\n    </button>\n    <mat-menu #breadcrumbsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\" class=\"es-breadcrumbs__menu\">\n      <a\n        *ngFor=\"let item of breadcrumb.data.breadcrumbs\"\n        mat-menu-item\n        [routerLink]=\"[breadcrumb.parentPath, item.path]\"\n        class=\"es-caption\"\n      >\n        <mat-icon *ngIf=\"item.icon\">{{ item.icon }}</mat-icon>\n        <mat-icon *ngIf=\"item.svgIcon\" [svgIcon]=\"item.svgIcon\"></mat-icon>\n        {{ item.label }}\n      </a>\n    </mat-menu>\n  </ng-container>\n</div>\n\n<ng-template #item>\n  <mat-icon *ngIf=\"breadcrumb.data.icon\" class=\"es-breadcrumbs-breadcrumb__icon\">\n    {{ breadcrumb.data.icon }}\n  </mat-icon>\n  <mat-icon\n    *ngIf=\"breadcrumb.data.svgIcon\"\n    [svgIcon]=\"breadcrumb.data.svgIcon\"\n    class=\"es-breadcrumbs-breadcrumb__icon\"\n  >\n    {{ breadcrumb.data.svgIcon }}\n  </mat-icon>\n  <span *ngIf=\"breadcrumb.data.label\" class=\"es-breadcrumbs-breadcrumb__label\">\n    {{ breadcrumb.data.label }}\n  </span>\n</ng-template>\n"
        },
        {
            "name": "ESBreadcrumbsCollapseComponent",
            "id": "component-ESBreadcrumbsCollapseComponent-9a12fb1af75007485fe56e1af074fc79",
            "file": "projects/elonkit/src/ui/breadcrumbs/components/breadcrumbs-collapse/breadcrumbs-collapse.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs-collapse",
            "styleUrls": [
                "./breadcrumbs-collapse.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs-collapse.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadcrumbs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 564,
                            "end": 577,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 565,
                                "end": 573,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 19,
                    "type": "ESBreadcrumb[]"
                },
                {
                    "name": "moreTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 639,
                            "end": 652,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 640,
                                "end": 648,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 24,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESLocaleService",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "rawdescription": "\n\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "pos": 804,
                            "end": 819,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 805,
                                "end": 813,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ESBreadcrumb } from '../../breadcrumbs.types';\nimport { ESLocaleService, ESLocale } from '../../../locale';\n\n@Component({\n  selector: 'es-breadcrumbs-collapse',\n  templateUrl: './breadcrumbs-collapse.component.html',\n  styleUrls: ['./breadcrumbs-collapse.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESBreadcrumbsCollapseComponent {\n  /**\n   * @internal\n   */\n  @Input() public breadcrumbs: ESBreadcrumb[];\n\n  /**\n   * @internal\n   */\n  @Input() public moreTemplate: any;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  constructor(\n    /**\n     * @internal\n     */\n    public localeService: ESLocaleService\n  ) {\n    this.locale$ = this.localeService.locale();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-breadcrumbs-collapse {\n  background: transparent;\n  border: 0;\n  border-radius: 4px;\n  cursor: pointer;\n  display: block;\n  height: 24px;\n  outline: 0;\n  padding: 0;\n  transition: 200ms;\n\n  &:hover,\n  &:focus {\n    outline: 0;\n  }\n\n  &__more {\n    display: inline-block;\n    height: 24px;\n    width: 24px;\n  }\n}\n",
                    "styleUrl": "./breadcrumbs-collapse.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "ESLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "ESLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button\n  type=\"button\"\n  [matMenuTriggerFor]=\"menu\"\n  matRipple\n  [attr.aria-label]=\"(locale$ | async).breadcrumbs.labelMore\"\n  class=\"es-breadcrumbs-collapse\"\n>\n  <div *ngIf=\"!moreTemplate\" class=\"es-breadcrumbs-collapse__more\">\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        fill-rule=\"evenodd\"\n        clip-rule=\"evenodd\"\n        d=\"M5 11.5C5 10.6716 5.67157 10 6.5 10C7.32843 10 8 10.6716 8 11.5C8 12.3284 7.32843 13 6.5 13C5.67157 13 5 12.3284 5 11.5ZM11 11.5C11 10.6716 11.6716 10 12.5 10C13.3284 10 14 10.6716 14 11.5C14 12.3284 13.3284 13 12.5 13C11.6716 13 11 12.3284 11 11.5ZM18.5 10C17.6716 10 17 10.6716 17 11.5C17 12.3284 17.6716 13 18.5 13C19.3284 13 20 12.3284 20 11.5C20 10.6716 19.3284 10 18.5 10Z\"\n        fill=\"black\"\n        fill-opacity=\"0.54\"\n      />\n    </svg>\n  </div>\n  <ng-container *ngIf=\"moreTemplate\">\n    <ng-container *ngTemplateOutlet=\"moreTemplate\"></ng-container>\n  </ng-container>\n</button>\n<mat-menu #menu=\"matMenu\" yPosition=\"below\" class=\"es-breadcrumbs__menu\">\n  <ng-container *ngFor=\"let breadcrumb of breadcrumbs\">\n    <a *ngIf=\"!breadcrumb.data.breadcrumbs\" mat-menu-item [routerLink]=\"[breadcrumb.path]\" class=\"es-caption\">\n      <mat-icon *ngIf=\"breadcrumb.data.icon\">{{ breadcrumb.data.icon }}</mat-icon>\n      {{ breadcrumb.data.label }}\n    </a>\n    <ng-container *ngIf=\"breadcrumb.data.breadcrumbs\">\n      <button mat-menu-item [matMenuTriggerFor]=\"subMenu\" class=\"es-caption\">\n        <mat-icon *ngIf=\"breadcrumb.data.icon\">{{ breadcrumb.data.icon }}</mat-icon>\n        {{ breadcrumb.data.label }}\n      </button>\n      <mat-menu #subMenu=\"matMenu\" class=\"es-breadcrumbs__menu\">\n        <a\n          *ngFor=\"let item of breadcrumb.data.breadcrumbs\"\n          mat-menu-item\n          [routerLink]=\"[breadcrumb.parentPath, item.path]\"\n          class=\"es-caption\"\n        >\n          <mat-icon *ngIf=\"item.icon\">{{ item.icon }}</mat-icon>\n          <mat-icon *ngIf=\"item.svgIcon\" [svgIcon]=\"item.svgIcon\"></mat-icon>\n          {{ item.label }}\n        </a>\n      </mat-menu>\n    </ng-container>\n  </ng-container>\n</mat-menu>\n"
        },
        {
            "name": "ESBreadcrumbsComponent",
            "id": "component-ESBreadcrumbsComponent-921e872d7a15c8d47214fce3ff09fd8c",
            "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-breadcrumbs",
            "styleUrls": [
                "./breadcrumbs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Sizes of component elements which are used for collapse calculations.",
                    "description": "<p>Sizes of component elements which are used for collapse calculations.</p>\n",
                    "line": 99,
                    "type": "ESBreadcrumbsDefaultOptionsSizes"
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to breadcrumb labels.",
                    "description": "<p>Class applied to breadcrumb labels.</p>\n",
                    "line": 85,
                    "type": "string"
                },
                {
                    "name": "withBackButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether to show Back button.",
                    "description": "<p>Whether to show Back button.</p>\n",
                    "line": 79,
                    "type": "ESBreadcrumb"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 214,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getLabelWidth",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  AfterContentInit,\n  InjectionToken,\n  Optional,\n  Inject,\n  Input,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\n\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil, delay } from 'rxjs/operators';\n\nimport { ESBreadcrumb } from './breadcrumbs.types';\nimport { ESBreadcrumbsService } from './breadcrumbs.service';\n\nimport { ESBreadcrumbsMoreDirective } from './directives/breadcrumbs-more.directive';\nimport { ESBreadcrumbsSeparatorDirective } from './directives/breadcrumbs-separator.directive';\nimport { ESBreadcrumbsBackDirective } from './directives/breadcrumbs-back.directive';\nimport { ESLocaleService, ESLocale } from '../locale';\n\nexport interface ESBreadcrumbsDefaultOptionsSizes {\n  itemPadding: number;\n  icon: number;\n  iconMargin: number;\n  menu: number;\n  separator: number;\n  more: number;\n}\n\nexport interface ESBreadcrumbsDefaultOptions {\n  typography?: string;\n  sizes?: ESBreadcrumbsDefaultOptionsSizes;\n}\n\nexport const ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY = 'es-caption';\n\nexport const ES_BREADCRUMBS_DEFAULT_SIZES = {\n  itemPadding: 4,\n  icon: 24,\n  iconMargin: 4,\n  menu: 20,\n  separator: 16,\n  more: 24\n};\n\nexport const ES_BREADCRUMBS_DEFAULT_OPTIONS = new InjectionToken<ESBreadcrumbsDefaultOptions>(\n  'ES_BREADCRUMBS_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESBreadcrumbsComponent implements OnInit, OnDestroy, AfterContentInit {\n  private _typography;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public windowHistoryLength: number;\n\n  /**\n   * Whether to show Back button.\n   */\n  @Input() public withBackButton: ESBreadcrumb;\n\n  /**\n   * Class applied to breadcrumb labels.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography =\n      value || this.defaultOptions?.typography || ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY;\n  }\n\n  private _sizes;\n\n  /**\n   * Sizes of component elements which are used for collapse calculations.\n   */\n  @Input()\n  public get sizes(): ESBreadcrumbsDefaultOptionsSizes {\n    return this._sizes;\n  }\n  public set sizes(value: ESBreadcrumbsDefaultOptionsSizes) {\n    this._sizes = value || this.defaultOptions?.sizes || ES_BREADCRUMBS_DEFAULT_SIZES;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(ESBreadcrumbsMoreDirective, { read: TemplateRef, static: false })\n  public moreTemplate: any;\n\n  /**\n   * @ignore\n   */\n  @ContentChild(ESBreadcrumbsBackDirective, { read: TemplateRef, static: false })\n  public backTemplate: any;\n\n  /**\n   * @ignore\n   */\n  @ContentChild(ESBreadcrumbsSeparatorDirective, { read: TemplateRef, static: false })\n  public separatorTemplate: any;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('navigation', { static: true }) public elementNavigation: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('width', { static: true }) public elementWidth: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('backButton', { static: true }) public elementBackButton: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @HostListener('window:resize') public onResize() {\n    const element = this.elementNavigation.nativeElement;\n    const goBackButton = this.elementBackButton.nativeElement;\n\n    if (element && this.breadcrumbs.length > 2) {\n      const sizes = this.sizes;\n      const widths = this.breadcrumbs.map(({ data: { label, icon, breadcrumbs } }) => {\n        let result = 0;\n\n        if (label) {\n          result += sizes.itemPadding;\n          result += this.getLabelWidth(label);\n        }\n        if (icon) {\n          result += sizes.icon;\n        }\n        if (label && icon) {\n          result += sizes.iconMargin;\n        }\n        if (breadcrumbs) {\n          result += sizes.menu;\n        }\n\n        return result;\n      });\n      let scrollWidth =\n        widths.reduce((acc, w) => acc + w, 0) + sizes.separator * (widths.length - 1);\n      const clientWidth = element.clientWidth - goBackButton.clientWidth;\n\n      const collapseIndexes = [];\n      const collapseBreadcrumbs = [];\n\n      for (let i = 1; i < widths.length - 1 && scrollWidth > clientWidth; i++) {\n        if (!collapseIndexes.length) {\n          scrollWidth += sizes.more + sizes.separator;\n        }\n\n        collapseIndexes.push(i);\n        collapseBreadcrumbs.push(this.breadcrumbs[i]);\n        scrollWidth -= widths[i] + sizes.separator;\n      }\n\n      this.collapseIndexes = collapseIndexes;\n      this.collapseBreadcrumbs = collapseBreadcrumbs;\n    } else if (this.collapseIndexes.length) {\n      this.collapseIndexes = [];\n      this.collapseBreadcrumbs = [];\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public breadcrumbs: ESBreadcrumb[] = [];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public collapseIndexes: number[] = [];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public collapseBreadcrumbs: ESBreadcrumb[] = [];\n\n  private destroyed$ = new Subject<void>();\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private breadcrumbsService: ESBreadcrumbsService,\n    @Optional()\n    @Inject(ES_BREADCRUMBS_DEFAULT_OPTIONS)\n    private defaultOptions: ESBreadcrumbsDefaultOptions,\n\n    private localeService: ESLocaleService\n  ) {\n    this.typography = defaultOptions?.typography || ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY;\n    this.sizes = defaultOptions?.sizes || ES_BREADCRUMBS_DEFAULT_SIZES;\n    this.locale$ = this.localeService.locale();\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnInit() {\n    this.breadcrumbsService.breadcrumbs$\n      .pipe(takeUntil(this.destroyed$), delay(1))\n      .subscribe((breadcrumbs) => {\n        this.breadcrumbs = breadcrumbs;\n        this.onResize();\n        this.changeDetector.detectChanges();\n      });\n\n    this.locale$.pipe(takeUntil(this.destroyed$)).subscribe((value) => {\n      this.onResize();\n    });\n    this.windowHistoryLength = window.history.length;\n  }\n\n  /**\n   * @ignore\n   */\n  public ngOnDestroy() {\n    this.destroyed$.next();\n  }\n\n  /**\n   * @ignore\n   */\n  public ngAfterContentInit() {\n    if ((document as any).fonts?.ready) {\n      (document as any).fonts.ready.then(() => {\n        this.onResize();\n\n        // Tests in CI fail without this check.\n        // tslint:disable-next-line\n        if (!this.changeDetector['destroyed']) {\n          this.changeDetector.detectChanges();\n        }\n      });\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  private getLabelWidth(text: string) {\n    const container = this.elementWidth.nativeElement;\n    container.textContent = text;\n    const width = container.clientWidth + 1;\n    container.textContent = '';\n    return width;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onClick() {\n    if (window.history.length) {\n      window.history.back();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-breadcrumbs {\n  align-items: center;\n  display: flex;\n  overflow: hidden;\n\n  &__link-back-wrapper {\n    align-content: center;\n    display: flex;\n  }\n\n  &__breadcrumb {\n    &:last-child {\n      margin-right: 0;\n      min-width: 0;\n    }\n  }\n\n  &__separator {\n    display: inline-block;\n    fill: currentColor;\n    height: 24px;\n    margin: 0 -4px;\n    width: 24px;\n\n    &_single {\n      align-items: center;\n      display: flex;\n      margin-left: 8px;\n      margin-right: 8px;\n      width: 1px;\n    }\n  }\n\n  &__width {\n    height: auto;\n    left: -1000px;\n    position: absolute;\n    visibility: hidden;\n    white-space: nowrap;\n    width: auto;\n    z-index: -1;\n  }\n\n  &__link-back {\n    align-items: center;\n    background-color: unset;\n    border-radius: 4px;\n    border-width: 0;\n    cursor: pointer;\n    display: flex;\n    height: 24px;\n    min-width: fit-content;\n    outline: unset;\n    overflow: hidden;\n    padding: 2px 4px;\n    position: relative;\n    text-decoration: none;\n    transition: 200ms;\n  }\n\n  &__back-icon {\n    align-items: baseline;\n    display: flex;\n    margin-right: 5px;\n  }\n\n  &__menu {\n    min-height: auto !important;\n\n    .mat-mdc-menu-content:not(:empty) {\n      padding-bottom: 4px;\n      padding-top: 4px;\n    }\n\n    .mat-mdc-menu-item {\n      align-items: center;\n      display: flex;\n      height: 32px;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  }\n}\n",
                    "styleUrl": "./breadcrumbs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breadcrumbsService",
                        "type": "ESBreadcrumbsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultOptions",
                        "type": "ESBreadcrumbsDefaultOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localeService",
                        "type": "ESLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 214,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breadcrumbsService",
                        "type": "ESBreadcrumbsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultOptions",
                        "type": "ESBreadcrumbsDefaultOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localeService",
                        "type": "ESLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterContentInit"
            ],
            "accessors": {
                "typography": {
                    "name": "typography",
                    "setSignature": {
                        "name": "typography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 88,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "typography",
                        "type": "string",
                        "returnType": "string",
                        "line": 85,
                        "rawdescription": "Class applied to breadcrumb labels.",
                        "description": "<p>Class applied to breadcrumb labels.</p>\n"
                    }
                },
                "sizes": {
                    "name": "sizes",
                    "setSignature": {
                        "name": "sizes",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ESBreadcrumbsDefaultOptionsSizes",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 102,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ESBreadcrumbsDefaultOptionsSizes",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sizes",
                        "type": "",
                        "returnType": "ESBreadcrumbsDefaultOptionsSizes",
                        "line": 99,
                        "rawdescription": "Sizes of component elements which are used for collapse calculations.",
                        "description": "<p>Sizes of component elements which are used for collapse calculations.</p>\n"
                    }
                }
            },
            "templateData": "<nav #navigation class=\"es-breadcrumbs\">\n  <div #backButton class=\"es-breadcrumbs__link-back-wrapper\">\n    <button\n      type=\"button\"\n      *ngIf=\"withBackButton\"\n      [disabled]=\"!windowHistoryLength\"\n      (click)=\"onClick()\"\n      [attr.aria-label]=\"(locale$ | async).breadcrumbs.labelBack\"\n      class=\"es-breadcrumbs__link-back\"\n      [ngClass]=\"typography\"\n      mat-ripple\n    >\n      <ng-container *ngTemplateOutlet=\"back\"></ng-container>\n      <span>{{(locale$ | async).breadcrumbs.labelBack}}</span>\n    </button>\n    <div *ngIf=\"withBackButton\" class=\"es-breadcrumbs__separator es-breadcrumbs__separator_single\">\n    </div>\n  </div>\n  <ng-container *ngFor=\"let breadcrumb of breadcrumbs; let i = index\">\n    <ng-container *ngIf=\"!collapseIndexes.includes(i)\">\n      <es-breadcrumbs-breadcrumb\n        [breadcrumb]=\"breadcrumb\"\n        [last]=\"i === breadcrumbs.length - 1\"\n        [typography]=\"typography\"\n        class=\"es-breadcrumbs__breadcrumb\"\n      ></es-breadcrumbs-breadcrumb>\n      <ng-container *ngIf=\"i < breadcrumbs.length - 1\">\n        <ng-container *ngTemplateOutlet=\"separator\"></ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"i === 1 && collapseIndexes.length\">\n      <es-breadcrumbs-collapse\n        [breadcrumbs]=\"collapseBreadcrumbs\"\n        [moreTemplate]=\"moreTemplate\"\n      ></es-breadcrumbs-collapse>\n      <ng-container *ngTemplateOutlet=\"separator\"></ng-container>\n    </ng-container>\n  </ng-container>\n</nav>\n\n<ng-template #separator>\n  <ng-container *ngIf=\"!separatorTemplate\">\n    <div class=\"es-breadcrumbs__separator\">\n      <svg\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M10 8L14 12L10 16\"\n          stroke=\"currentColor\"\n          stroke-opacity=\"0.38\"\n          stroke-width=\"1.5\"\n        />\n      </svg>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"separatorTemplate\">\n    <ng-container *ngTemplateOutlet=\"separatorTemplate\"></ng-container>\n  </ng-container>\n</ng-template>\n\n<div #width class=\"es-breadcrumbs__width\" aria-hidden=\"true\" [ngClass]=\"typography\"></div>\n\n<ng-template #back>\n  <div *ngIf=\"!backTemplate\" class=\"es-breadcrumbs__back-icon\">\n    <svg width=\"11\" height=\"10\" viewBox=\"0 0 11 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M6 1L2 5M2 5L6 9M2 5H11\" stroke=\"black\" stroke-opacity=\"0.38\" stroke-width=\"1.5\"/>\n    </svg>\n  </div>\n  <ng-container *ngIf=\"backTemplate\">\n    <ng-container *ngTemplateOutlet=\"backTemplate\"></ng-container>\n  </ng-container>\n</ng-template>\n"
        },
        {
            "name": "ESDropzoneComponent",
            "id": "component-ESDropzoneComponent-29d7c38b4158968e393beb3b2b63d598",
            "file": "projects/elonkit/src/ui/dropzone/dropzone.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-dropzone",
            "styleUrls": [
                "./dropzone.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropzone.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "File types to accept separated by a comma, e.g. `image/png,image/jpg,image/jpeg`",
                    "description": "<p>File types to accept separated by a comma, e.g. <code>image/png,image/jpg,image/jpeg</code></p>\n",
                    "line": 83,
                    "type": "string"
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Defines Choose Text Label.",
                    "description": "<p>Defines Choose Text Label.</p>\n",
                    "line": 71,
                    "type": "string"
                },
                {
                    "name": "headingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to heading text.",
                    "description": "<p>Class applied to heading text.</p>\n",
                    "line": 131,
                    "type": "string"
                },
                {
                    "name": "maxSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Max accepted file size in megabytes.",
                    "description": "<p>Max accepted file size in megabytes.</p>\n",
                    "line": 107,
                    "type": "number"
                },
                {
                    "name": "subheading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Defines Drag Text Label.",
                    "description": "<p>Defines Drag Text Label.</p>\n",
                    "line": 77,
                    "type": "string"
                },
                {
                    "name": "subheadingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to subheading text.",
                    "description": "<p>Class applied to subheading text.</p>\n",
                    "line": 143,
                    "type": "string"
                },
                {
                    "name": "svgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Custom svg icon to render with `chooseText`.",
                    "description": "<p>Custom svg icon to render with <code>chooseText</code>.</p>\n",
                    "line": 95,
                    "type": "string"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Defines if ESDropzoneFile `content` property will be `base64` or `binary` format.",
                    "description": "<p>Defines if ESDropzoneFile <code>content</code> property will be <code>base64</code> or <code>binary</code> format.</p>\n",
                    "line": 119,
                    "type": "\"base64\" | \"binary\""
                }
            ],
            "outputsClass": [
                {
                    "name": "validate",
                    "defaultValue": "new EventEmitter<\n    ESDropzoneValidationError[]\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of validation errors is emitted.\n",
                    "description": "<p>Array of validation errors is emitted.</p>\n",
                    "line": 156,
                    "type": "EventEmitter<ESDropzoneValidationError[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_headingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_maxSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_subheadingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 150,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_svgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"base64\" | \"binary\"",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ESDropzoneValidationError[]",
                    "optional": false,
                    "description": "",
                    "line": 168,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "errorState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 170,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 167,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fileTypeValid",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isErrorState",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateFileSize",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Optional,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Self,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  DoCheck\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl } from '@angular/forms';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\n\nimport { validateFileType } from '../../utils/validate-file-type';\nimport {\n  ESDropzoneFile,\n  ESDropzoneDefaultOptions,\n  ESDropzoneValidationError\n} from './dropzones.types';\n\nexport const ES_DROPZONE_DEFAULT_OPTIONS = new InjectionToken<ESDropzoneDefaultOptions>(\n  'ES_DROPZONE_DEFAULT_OPTIONS'\n);\n\nconst toFile = (type: string, file: File) =>\n  new Promise<ESDropzoneFile>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      resolve({\n        content: type === 'binary' ? file : (reader.result as string),\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        base64: reader.result as string\n      });\n    };\n    reader.onerror = (error) => reject(error);\n  });\n\n@Component({\n  selector: 'es-dropzone',\n  templateUrl: './dropzone.component.html',\n  styleUrls: ['./dropzone.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ESDropzoneComponent implements ControlValueAccessor, DoCheck {\n  /**\n   * @internal\n   * @ignore\n   */\n  public files: ESDropzoneFile[];\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public isDragover: boolean;\n\n  /**\n   * Defines Choose Text Label.\n   */\n  @Input()\n  public heading: string;\n\n  /**\n   * Defines Drag Text Label.\n   */\n  @Input()\n  public subheading: string;\n\n  /**\n   * File types to accept separated by a comma, e.g. `image/png,image/jpg,image/jpeg`\n   */\n  @Input()\n  public get accept(): string {\n    return this._accept;\n  }\n  public set accept(value: string) {\n    this._accept = value || this.defaultOptions?.accept || '*';\n  }\n  private _accept: string;\n\n  /**\n   * Custom svg icon to render with `chooseText`.\n   */\n  @Input()\n  public get svgIcon(): string {\n    return this._svgIcon;\n  }\n  public set svgIcon(value: string) {\n    this._svgIcon = value || this.defaultOptions?.svgIcon;\n  }\n  private _svgIcon: string;\n\n  /**\n   * Max accepted file size in megabytes.\n   */\n  @Input()\n  public get maxSize(): number {\n    return this._maxSize;\n  }\n  public set maxSize(value: number) {\n    this._maxSize = coerceNumberProperty(value, this.defaultOptions?.maxSize || 0);\n  }\n  private _maxSize: number;\n\n  /**\n   * Defines if ESDropzoneFile `content` property will be `base64` or `binary` format.\n   */\n  @Input()\n  public get type(): 'base64' | 'binary' {\n    return this._type;\n  }\n  public set type(value: 'base64' | 'binary') {\n    this._type = value || this.defaultOptions?.type || 'binary';\n  }\n  private _type: 'base64' | 'binary';\n\n  /**\n   * Class applied to heading text.\n   */\n  @Input()\n  public get headingTypography(): string {\n    return this._headingTypography;\n  }\n  public set headingTypography(value: string) {\n    this._headingTypography = value || this.defaultOptions?.headingTypography || 'mat-body-2';\n  }\n  private _headingTypography: string;\n\n  /**\n   * Class applied to subheading text.\n   */\n  @Input()\n  public get subheadingTypography(): string {\n    return this._subheadingTypography;\n  }\n  public set subheadingTypography(value: string) {\n    this._subheadingTypography =\n      value || this.defaultOptions?.subheadingTypography || 'mat-caption';\n  }\n  private _subheadingTypography: string;\n\n  /**\n   * Array of validation errors is emitted.\n   */\n  @Output()\n  public validate: EventEmitter<ESDropzoneValidationError[]> = new EventEmitter<\n    ESDropzoneValidationError[]\n  >();\n\n  /**\n   * @internal\n   * @ignore\n   */\n  @ViewChild('fileInput', { static: true })\n  public fileInput: ElementRef;\n\n  private propagateChange = (_: any) => {};\n  private errors: ESDropzoneValidationError[];\n  // tslint:disable-next-line: no-inferrable-types\n  private errorState: boolean = false;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  constructor(\n    private cdRef: ChangeDetectorRef,\n    @Optional()\n    @Inject(ES_DROPZONE_DEFAULT_OPTIONS)\n    private defaultOptions: ESDropzoneDefaultOptions,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Self()\n    public ngControl: NgControl,\n    /**\n     * @internal\n     */\n    @Optional() public ngForm: FormGroupDirective\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n    this.accept = this.defaultOptions?.accept;\n    this.svgIcon = this.defaultOptions?.svgIcon;\n    this.maxSize = this.defaultOptions?.maxSize;\n    this.type = this.defaultOptions?.type;\n    this.headingTypography = this.defaultOptions?.headingTypography;\n    this.subheadingTypography = this.defaultOptions?.subheadingTypography;\n  }\n\n  /**\n   * @ignore\n   */\n  public ngDoCheck(): void {\n    const newErrorState = this.isErrorState();\n    if (this.errorState !== newErrorState) {\n      this.cdRef.markForCheck();\n      this.errorState = newErrorState;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  public writeValue(files: ESDropzoneFile[]): void {\n    this.files = files;\n  }\n\n  /**\n   * @ignore\n   */\n  public registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  /**\n   * @ignore\n   */\n  public registerOnTouched(fn: any): void {}\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public async onDrop(e: DragEvent) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.errors = [];\n    const files = e.dataTransfer.files as FileList;\n    for (let i = 0; i < files.length; i++) {\n      await this.setFile(files.item(i));\n    }\n    this.isDragover = false;\n    this.cdRef.markForCheck();\n    this.propagateChange(this.files);\n    this.validate.emit(this.errors);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onDragover(e: DragEvent): void {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDragover = true;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onDragleave(e: DragEvent): void {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDragover = false;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onDragend(e: DragEvent): void {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDragover = false;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public openSelectFileDialog(): void {\n    const input = this.fileInput.nativeElement;\n    input.value = null;\n    input.click();\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public async onChange(e: any) {\n    e.stopPropagation();\n    this.errors = [];\n    const files = e.target.files as FileList;\n    for (let i = 0; i < files.length; i++) {\n      await this.setFile(files.item(i));\n    }\n    this.cdRef.markForCheck();\n    this.propagateChange(this.files);\n    this.validate.emit(this.errors);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public get invalid(): boolean {\n    return this.errorState;\n  }\n\n  private async setFile(file: File) {\n    if (!this.fileTypeValid(file) || !this.validateFileSize(file)) {\n      return;\n    }\n\n    const targetFile = await toFile(this.type, file);\n    this.files = [...this.files, targetFile];\n  }\n\n  private fileTypeValid(file: File): boolean {\n    if (!validateFileType(file, this.accept)) {\n      this.errors.push({\n        fileName: file.name,\n        error: 'FILE_TYPE'\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private get maxSizeInBytes(): number {\n    return +this.maxSize * 1024 * 1024;\n  }\n\n  private validateFileSize(file: File): boolean {\n    if (this.maxSize && file.size > this.maxSizeInBytes) {\n      this.errors.push({\n        fileName: file.name,\n        error: 'FILE_SIZE'\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private isErrorState(): boolean {\n    return !!(\n      this.ngControl &&\n      this.ngControl.invalid &&\n      (this.ngControl.touched || (this.ngForm && this.ngForm.submitted))\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-dropzone {\n  align-items: center;\n  border-radius: 5px;\n  box-sizing: border-box;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px;\n  width: 100%;\n\n  &:active,\n  &:focus {\n    outline: 0;\n  }\n\n  &_dragover {\n    * {\n      pointer-events: none;\n    }\n  }\n\n  &__input {\n    display: none;\n  }\n\n  &__heading {\n    align-items: center;\n    display: flex;\n    letter-spacing: 0.5px;\n\n    &:not(:last-child) {\n      margin-bottom: 4px;\n    }\n  }\n\n  &__subheading {\n    letter-spacing: 0.4px;\n    margin-bottom: 4px;\n  }\n\n  &__choose-icon {\n    margin-right: 8px;\n  }\n\n  &__hint {\n    letter-spacing: 0.4px;\n    margin-top: 8px;\n    padding: 0 12px;\n  }\n}\n",
                    "styleUrl": "./dropzone.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor",
                "DoCheck"
            ],
            "accessors": {
                "accept": {
                    "name": "accept",
                    "setSignature": {
                        "name": "accept",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 86,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "accept",
                        "type": "string",
                        "returnType": "string",
                        "line": 83,
                        "rawdescription": "File types to accept separated by a comma, e.g. `image/png,image/jpg,image/jpeg`",
                        "description": "<p>File types to accept separated by a comma, e.g. <code>image/png,image/jpg,image/jpeg</code></p>\n"
                    }
                },
                "svgIcon": {
                    "name": "svgIcon",
                    "setSignature": {
                        "name": "svgIcon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 98,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "svgIcon",
                        "type": "string",
                        "returnType": "string",
                        "line": 95,
                        "rawdescription": "Custom svg icon to render with `chooseText`.",
                        "description": "<p>Custom svg icon to render with <code>chooseText</code>.</p>\n"
                    }
                },
                "maxSize": {
                    "name": "maxSize",
                    "setSignature": {
                        "name": "maxSize",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 110,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "maxSize",
                        "type": "number",
                        "returnType": "number",
                        "line": 107,
                        "rawdescription": "Max accepted file size in megabytes.",
                        "description": "<p>Max accepted file size in megabytes.</p>\n"
                    }
                },
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"base64\" | \"binary\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 122,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"base64\" | \"binary\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "\"base64\" | \"binary\"",
                        "line": 119,
                        "rawdescription": "Defines if ESDropzoneFile `content` property will be `base64` or `binary` format.",
                        "description": "<p>Defines if ESDropzoneFile <code>content</code> property will be <code>base64</code> or <code>binary</code> format.</p>\n"
                    }
                },
                "headingTypography": {
                    "name": "headingTypography",
                    "setSignature": {
                        "name": "headingTypography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 134,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "headingTypography",
                        "type": "string",
                        "returnType": "string",
                        "line": 131,
                        "rawdescription": "Class applied to heading text.",
                        "description": "<p>Class applied to heading text.</p>\n"
                    }
                },
                "subheadingTypography": {
                    "name": "subheadingTypography",
                    "setSignature": {
                        "name": "subheadingTypography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 146,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "subheadingTypography",
                        "type": "string",
                        "returnType": "string",
                        "line": 143,
                        "rawdescription": "Class applied to subheading text.",
                        "description": "<p>Class applied to subheading text.</p>\n"
                    }
                },
                "maxSizeInBytes": {
                    "name": "maxSizeInBytes",
                    "getSignature": {
                        "name": "maxSizeInBytes",
                        "type": "number",
                        "returnType": "number",
                        "line": 335
                    }
                }
            },
            "templateData": "<button\n  class=\"es-dropzone\"\n  matRipple\n  data-testid=\"root\"\n  [ngClass]=\"{ 'es-dropzone_dragover': isDragover }\"\n  (drop)=\"onDrop($event)\"\n  (dragover)=\"onDragover($event)\"\n  (dragleave)=\"onDragleave($event)\"\n  (dragend)=\"onDragend($event)\"\n  (click)=\"openSelectFileDialog()\"\n>\n  <div class=\"es-dropzone__heading\" [ngClass]=\"headingTypography\">\n    <mat-icon *ngIf=\"!svgIcon\" class=\"es-dropzone__choose-icon\">cloud_upload</mat-icon>\n    <mat-icon *ngIf=\"svgIcon\" [svgIcon]=\"svgIcon\" class=\"es-dropzone__choose-icon\"></mat-icon>\n    {{ heading }}\n  </div>\n  <div *ngIf=\"!!subheading\" class=\"es-dropzone__subheading\">\n    <span [ngClass]=\"subheadingTypography\">{{ subheading }}</span>\n  </div>\n</button>\n<div class=\"es-dropzone__hint mat-caption\">\n  <ng-content *ngIf=\"!invalid\" select=\"mat-hint\"></ng-content>\n  <ng-content *ngIf=\"invalid\" select=\"mat-error\"></ng-content>\n</div>\n<input\n  #fileInput\n  data-testid=\"input\"\n  class=\"es-dropzone__input\"\n  [accept]=\"accept\"\n  type=\"file\"\n  (change)=\"onChange($event)\"\n  multiple\n/>\n"
        },
        {
            "name": "ESEmptyStateComponent",
            "id": "component-ESEmptyStateComponent-df72c397f2b1825f432f8f13796dd99e",
            "file": "projects/elonkit/src/ui/empty-state/empty-state.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-empty-state",
            "styleUrls": [
                "./empty-state.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty-state.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Heading text.",
                    "description": "<p>Heading text.</p>\n",
                    "line": 53,
                    "type": "string"
                },
                {
                    "name": "headingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to heading text.",
                    "description": "<p>Class applied to heading text.</p>\n",
                    "line": 61,
                    "type": "string"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Icon to diaplsy.",
                    "description": "<p>Icon to diaplsy.</p>\n",
                    "line": 38,
                    "type": "ESEmptyStateIcon"
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Path to image to display instead of the prebuilt icon.",
                    "description": "<p>Path to image to display instead of the prebuilt icon.</p>\n",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "subheading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Subheading text.",
                    "description": "<p>Subheading text.</p>\n",
                    "line": 71,
                    "type": "string"
                },
                {
                    "name": "subheadingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to subheading text.",
                    "description": "<p>Class applied to subheading text.</p>\n",
                    "line": 79,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_headingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_subheadingTypography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  Input,\n  InjectionToken,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { ESEmptyStateIcon } from './empty-state.types';\n\nexport interface ESEmptyStateDefaultOptions {\n  icon?: ESEmptyStateIcon;\n  headingTypography?: string;\n  subheadingTypography?: string;\n}\n\nexport const ES_EMPTY_STATE_DEFAULT_OPTIONS = new InjectionToken<ESEmptyStateDefaultOptions>(\n  'ES_EMPTY_STATE_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-empty-state',\n  templateUrl: './empty-state.component.html',\n  styleUrls: ['./empty-state.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESEmptyStateComponent {\n  private _icon;\n\n  /**\n   * Icon to diaplsy.\n   */\n  @Input()\n  public get icon(): ESEmptyStateIcon {\n    return this._icon;\n  }\n  public set icon(value: ESEmptyStateIcon) {\n    this._icon = value || this.defaultOptions?.icon || 'box';\n  }\n\n  /**\n   * Path to image to display instead of the prebuilt icon.\n   */\n  @Input() public src?: string;\n\n  /**\n   * Heading text.\n   */\n  @Input() public heading: string;\n\n  private _headingTypography;\n\n  /**\n   * Class applied to heading text.\n   */\n  @Input()\n  public get headingTypography(): string {\n    return this._headingTypography;\n  }\n  public set headingTypography(value: string) {\n    this._headingTypography = value || this.defaultOptions?.headingTypography || 'es-body-200';\n  }\n\n  /**\n   * Subheading text.\n   */\n  @Input() public subheading: string;\n\n  private _subheadingTypography;\n\n  /**\n   * Class applied to subheading text.\n   */\n  @Input()\n  public get subheadingTypography(): string {\n    return this._subheadingTypography;\n  }\n  public set subheadingTypography(value: string) {\n    this._subheadingTypography = value || this.defaultOptions?.subheadingTypography || 'es-caption';\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_EMPTY_STATE_DEFAULT_OPTIONS)\n    private defaultOptions: ESEmptyStateDefaultOptions\n  ) {\n    this.icon = this.defaultOptions?.icon;\n    this.headingTypography = this.defaultOptions?.headingTypography;\n    this.subheadingTypography = this.defaultOptions?.subheadingTypography;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-empty-state {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 600px;\n  padding: 24px;\n\n  &__image {\n    margin-bottom: 12px;\n\n    &.mat-icon {\n      display: block;\n      height: 56px;\n      width: 56px;\n    }\n  }\n\n  &__heading {\n    margin-bottom: 2px;\n    text-align: center;\n  }\n\n  &__subheading {\n    text-align: center;\n\n    &:not(:last-child) {\n      margin-bottom: 20px;\n    }\n  }\n\n  .mat-mdc-outlined-button {\n    line-height: 46px;\n  }\n}\n",
                    "styleUrl": "./empty-state.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ESEmptyStateIcon",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ESEmptyStateIcon",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "icon",
                        "type": "",
                        "returnType": "ESEmptyStateIcon",
                        "line": 38,
                        "rawdescription": "Icon to diaplsy.",
                        "description": "<p>Icon to diaplsy.</p>\n"
                    }
                },
                "headingTypography": {
                    "name": "headingTypography",
                    "setSignature": {
                        "name": "headingTypography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 64,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "headingTypography",
                        "type": "string",
                        "returnType": "string",
                        "line": 61,
                        "rawdescription": "Class applied to heading text.",
                        "description": "<p>Class applied to heading text.</p>\n"
                    }
                },
                "subheadingTypography": {
                    "name": "subheadingTypography",
                    "setSignature": {
                        "name": "subheadingTypography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "subheadingTypography",
                        "type": "string",
                        "returnType": "string",
                        "line": 79,
                        "rawdescription": "Class applied to subheading text.",
                        "description": "<p>Class applied to subheading text.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"es-empty-state\">\n  <mat-icon\n    *ngIf=\"!src\"\n    class=\"es-empty-state__image\"\n    svgIcon=\"es-empty-state:{{ icon }}\"\n    data-testid=\"svg\"\n  ></mat-icon>\n  <img *ngIf=\"src\" class=\"es-empty-state__image\" [src]=\"src\" data-testid=\"img\" />\n\n  <div class=\"es-empty-state__heading\" [ngClass]=\"headingTypography\">{{ heading }}</div>\n  <div class=\"es-empty-state__subheading\" [ngClass]=\"subheadingTypography\">{{ subheading }}</div>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ESInlineFormFieldComponent",
            "id": "component-ESInlineFormFieldComponent-63d49ac53167edc43c1af281eb1c3298",
            "file": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {\n        appearance: , floatLabel: \n    }\n}"
                }
            ],
            "selector": "es-inline-form-field",
            "styleUrls": [
                "./inline-form-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inline-form-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "manualSave",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Disable default behaviour of \"save\" button and only emit event.",
                    "description": "<p>Disable default behaviour of &quot;save&quot; button and only emit event.</p>\n",
                    "line": 72,
                    "type": "boolean"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Text to display.",
                    "description": "<p>Text to display.</p>\n",
                    "line": 67,
                    "type": "string"
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to text.",
                    "description": "<p>Class applied to text.</p>\n",
                    "line": 56,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter<ESInlineFormFieldComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when user clicks \"cancel\" button.\n",
                    "description": "<p>Event emitted when user clicks &quot;cancel&quot; button.</p>\n",
                    "line": 87,
                    "type": "EventEmitter"
                },
                {
                    "name": "edit",
                    "defaultValue": "new EventEmitter<ESInlineFormFieldComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when user clicks \"edit\" button.\n",
                    "description": "<p>Event emitted when user clicks &quot;edit&quot; button.</p>\n",
                    "line": 77,
                    "type": "EventEmitter"
                },
                {
                    "name": "save",
                    "defaultValue": "new EventEmitter<ESInlineFormFieldComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when user clicks \"save\" button.\n",
                    "description": "<p>Event emitted when user clicks &quot;save&quot; button.</p>\n",
                    "line": 82,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormControl",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "UntypedFormControl"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControlName",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "FormControlName"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "formField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatFormField",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "MatFormField"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgModel",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgModel"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "previousValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getControl",
                    "args": [],
                    "optional": false,
                    "returnType": "UntypedFormControl | null",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setHidden",
                    "args": [
                        {
                            "name": "isHidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse this method to manually switch between display value and input.\n",
                    "description": "<p>Use this method to manually switch between display value and input.</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "isHidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter,\n  ContentChild,\n  InjectionToken,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { UntypedFormControl, FormControlName, NgModel } from '@angular/forms';\n\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormField } from '@angular/material/form-field';\n\nimport { Observable } from 'rxjs';\n\nimport { ESLocaleService, ESLocale } from '../locale';\n\nexport interface ESInlineFormFieldDefaultOptions {\n  typography?: string;\n}\n\nconst DEFAULT_TYPOGRAPHY = 'es-body-200';\n\nexport const ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken<ESInlineFormFieldDefaultOptions>(\n  'ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-inline-form-field',\n  templateUrl: './inline-form-field.component.html',\n  styleUrls: ['./inline-form-field.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: {\n        appearance: 'standard',\n        floatLabel: 'never'\n      }\n    }\n  ]\n})\nexport class ESInlineFormFieldComponent {\n  private _typography;\n\n  /**\n   * Class applied to text.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography =\n      value || (this.defaultOptions && this.defaultOptions.typography) || DEFAULT_TYPOGRAPHY;\n  }\n\n  /**\n   * Text to display.\n   */\n  @Input() public text: string;\n\n  /**\n   * Disable default behaviour of \"save\" button and only emit event.\n   */\n  @Input() public manualSave = false;\n\n  /**\n   * Event emitted when user clicks \"edit\" button.\n   */\n  @Output() public edit = new EventEmitter<ESInlineFormFieldComponent>();\n\n  /**\n   * Event emitted when user clicks \"save\" button.\n   */\n  @Output() public save = new EventEmitter<ESInlineFormFieldComponent>();\n\n  /**\n   * Event emitted when user clicks \"cancel\" button.\n   */\n  @Output() public cancel = new EventEmitter<ESInlineFormFieldComponent>();\n\n  @ContentChild(MatFormField) private formField: MatFormField;\n\n  @ContentChild(NgModel) private ngModel: NgModel;\n  @ContentChild(UntypedFormControl) private formControl: UntypedFormControl;\n  @ContentChild(FormControlName) private formControlName: FormControlName;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public isHidden = true;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  private previousValue;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    public localeService: ESLocaleService,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS)\n    private defaultOptions: ESInlineFormFieldDefaultOptions\n  ) {\n    this.locale$ = this.localeService.locale();\n\n    this.typography = (defaultOptions && defaultOptions.typography) || DEFAULT_TYPOGRAPHY;\n  }\n\n  private getControl(): UntypedFormControl | null {\n    if (this.formControl) {\n      return this.formControl;\n    }\n    if (this.formControlName) {\n      return this.formControlName.control;\n    }\n    if (this.ngModel) {\n      return this.ngModel.control;\n    }\n    return null;\n  }\n\n  /**\n   * Use this method to manually switch between display value and input.\n   */\n  public setHidden(isHidden: boolean) {\n    this.isHidden = isHidden;\n    this.changeDetector.detectChanges();\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onEdit() {\n    const control = this.getControl();\n    if (control) {\n      this.previousValue = control.value;\n    }\n\n    this.edit.emit(this);\n    this.isHidden = false;\n    if (this.formField) {\n      const element = this.formField._elementRef.nativeElement as HTMLElement;\n      const input = element.querySelector('input') || element.querySelector('textarea');\n\n      if (input) {\n        setTimeout(() => {\n          input.focus();\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSave() {\n    if (this.manualSave) {\n      this.save.emit(this);\n      return;\n    }\n\n    const control = this.getControl();\n    if (control && control.invalid) {\n      return;\n    }\n\n    this.save.emit(this);\n    this.isHidden = true;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onCancel() {\n    const control = this.getControl();\n    if (control) {\n      control.setValue(this.previousValue);\n    }\n\n    this.cancel.emit(this);\n    this.isHidden = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-inline-form-field {\n  margin: 0;\n  width: 100%;\n\n  &__preview,\n  &__input {\n    align-items: flex-start;\n    display: flex;\n  }\n\n  &__preview {\n    &:hover {\n      /* stylelint-disable-next-line */\n      .es-inline-form-field__button_edit .mat-mdc-icon-button {\n        opacity: 1;\n      }\n    }\n  }\n\n  &__text {\n    line-height: normal;\n    padding: 5px 0;\n    white-space: pre-wrap;\n  }\n\n  &__input {\n    position: relative;\n\n    /* stylelint-disable selector-max-compound-selectors, selector-no-qualifying-type, indentation */\n\n    .mat-mdc-form-field {\n      font-weight: inherit;\n      line-height: normal;\n      width: 100%;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    .mat-form-field-infix {\n      border-top: 0;\n      padding: 5px 0;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    .mat-form-field-wrapper {\n      padding-bottom: 0;\n      padding-right: 64px;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    .mat-form-field-underline {\n      bottom: 0;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    .mat-form-field-appearance-standard .mat-form-field-flex {\n      padding-top: 0;\n    }\n\n    .mat-mdc-input-element {\n      margin-top: 0;\n    }\n\n    textarea.mat-mdc-input-element {\n      margin: 0;\n      overflow: hidden;\n      padding: 0;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    .mat-form-field-subscript-wrapper {\n      position: absolute;\n      top: 100%;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    .mat-form-field-flex {\n      align-items: center;\n    }\n\n    .mat-mdc-form-field:not(.mat-form-field-appearance-legacy) {\n      /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n      /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n      .mat-form-field-prefix,\n      .mat-form-field-suffix {\n        .mat-mdc-icon-button {\n          height: 24px;\n          width: 24px;\n        }\n\n        .mat-datepicker-toggle-default-icon {\n          width: 18px;\n        }\n\n        .mat-icon {\n          font-size: 18px;\n        }\n      }\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    .mat-form-field-appearance-standard.mat-form-field-has-label\n      .mat-select:not(.mat-select-empty)\n      .mat-select-arrow-wrapper {\n      transform: none;\n    }\n  }\n\n  &__buttons {\n    display: flex;\n    position: absolute;\n    right: 0;\n  }\n\n  &__button {\n    margin-left: 8px;\n    position: relative;\n\n    &::after {\n      content: '\\a0';\n      display: block;\n      font-size: inherit;\n      line-height: normal;\n      padding: 5px 0;\n      width: 24px;\n    }\n\n    .mat-mdc-icon-button {\n      font-size: inherit;\n      height: 24px;\n      line-height: 24px;\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      width: 24px;\n      /* TODO(mdc-migration): The following rule targets internal classes of button that may no longer apply for the MDC version. */\n      .mat-button-wrapper {\n        align-items: center;\n        display: flex;\n        height: 24px;\n      }\n    }\n\n    .mat-icon {\n      font-size: 22px;\n    }\n\n    &_edit {\n      .mat-mdc-icon-button {\n        opacity: 0;\n        transition: 200ms;\n\n        &:focus {\n          opacity: 1;\n        }\n      }\n\n      .mat-icon {\n        font-size: 18px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./inline-form-field.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "typography": {
                    "name": "typography",
                    "setSignature": {
                        "name": "typography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "typography",
                        "type": "string",
                        "returnType": "string",
                        "line": 56,
                        "rawdescription": "Class applied to text.",
                        "description": "<p>Class applied to text.</p>\n"
                    }
                }
            },
            "templateData": "<div\n  *ngIf=\"locale$ | async as locale\"\n  class=\"es-inline-form-field\"\n  [ngClass]=\"typography\"\n  data-testid=\"root\"\n>\n  <div *ngIf=\"isHidden\" class=\"es-inline-form-field__preview\">\n    <div class=\"es-inline-form-field__text\">{{ text }}</div>\n\n    <div class=\"es-inline-form-field__button es-inline-form-field__button_edit\">\n      <button\n        mat-icon-button\n        (click)=\"onEdit()\"\n        [attr.aria-label]=\"locale.inlineFormField.labelEdit\"\n      >\n        <mat-icon>edit</mat-icon>\n      </button>\n    </div>\n  </div>\n\n  <div *ngIf=\"!isHidden\" class=\"es-inline-form-field__input\">\n    <ng-content select=\"mat-form-field\"></ng-content>\n\n    <div class=\"es-inline-form-field__buttons\">\n      <div class=\"es-inline-form-field__button es-inline-form-field__button_save\">\n        <button\n          mat-icon-button\n          (click)=\"onSave()\"\n          [attr.aria-label]=\"locale.inlineFormField.labelSave\"\n        >\n          <mat-icon>check</mat-icon>\n        </button>\n      </div>\n      <div class=\"es-inline-form-field__button\">\n        <button\n          mat-icon-button\n          (click)=\"onCancel()\"\n          [attr.aria-label]=\"locale.inlineFormField.labelCancel\"\n        >\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ESPaginatorComponent",
            "id": "component-ESPaginatorComponent-f3c6cc72fdd53f8950b57b6a17131423",
            "file": "projects/elonkit/src/ui/paginator/paginator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-paginator",
            "styleUrls": [
                "./paginator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "boundaryCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Number of always visible pages at the beginning and end.",
                    "description": "<p>Number of always visible pages at the beginning and end.</p>\n",
                    "line": 101,
                    "type": "number"
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The count of the total number of items that are being paginated.",
                    "description": "<p>The count of the total number of items that are being paginated.</p>\n",
                    "line": 46,
                    "type": "number"
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The current page.",
                    "description": "<p>The current page.</p>\n",
                    "line": 55,
                    "type": "number"
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Number of items to display on a page.",
                    "description": "<p>Number of items to display on a page.</p>\n",
                    "line": 66,
                    "type": "number"
                },
                {
                    "name": "pageSizeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The set of provided page size options to display to the user.",
                    "description": "<p>The set of provided page size options to display to the user.</p>\n",
                    "line": 74,
                    "type": "[]"
                },
                {
                    "name": "siblingCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Number of always visible pages before and after the current page.",
                    "description": "<p>Number of always visible pages before and after the current page.</p>\n",
                    "line": 88,
                    "type": "number"
                },
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Class applied to text.",
                    "description": "<p>Class applied to text.</p>\n",
                    "line": 114,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when the paginator changes the page index.\n",
                    "description": "<p>Event emitted when the paginator changes the page index.</p>\n",
                    "line": 124,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageSizeChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when the paginator changes the page size.\n",
                    "description": "<p>Event emitted when the paginator changes the page size.</p>\n",
                    "line": 129,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_boundaryCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_pageSizeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_siblingCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onKeyLeftDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown.shift.arrowleft', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyWrightDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown.shift.arrowright', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keydown.shift.arrowleft",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 321
                },
                {
                    "name": "window:keydown.shift.arrowright",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 315
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter,\n  InjectionToken,\n  Optional,\n  Inject,\n  HostListener\n} from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ESLocaleService, ESLocale } from '../locale';\n\nfunction range(start: number, end: number) {\n  const length = end - start + 1;\n  return Array.from({ length }, (_, i) => start + i);\n}\n\nexport interface ESPaginatorDefaultOptions {\n  pageSizeOptions?: number[];\n  siblingCount?: number;\n  boundaryCount?: number;\n  typography?: string;\n}\n\nexport const ES_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken<ESPaginatorDefaultOptions>(\n  'ES_PAGINATOR_DEFAULT_OPTIONS'\n);\n\n@Component({\n  selector: 'es-paginator',\n  templateUrl: './paginator.component.html',\n  styleUrls: ['./paginator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ESPaginatorComponent {\n  /**\n   * The count of the total number of items that are being paginated.\n   */\n  @Input() public count: number;\n\n  // tslint:disable-next-line\n  private _page: number;\n\n  /**\n   * The current page.\n   */\n  @Input()\n  public set page(page: number) {\n    this.pageGoTo = '';\n    this._page = page;\n  }\n  public get page() {\n    return this._page;\n  }\n\n  /**\n   * Number of items to display on a page.\n   */\n  @Input() public pageSize: number;\n\n  private _pageSizeOptions: number[];\n\n  /**\n   * The set of provided page size options to display to the user.\n   */\n  @Input()\n  public set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = value ||\n      this.defaultOptions?.pageSizeOptions || [5, 10, 25, 50, 100, 250, 500];\n  }\n  public get pageSizeOptions(): number[] {\n    return this._pageSizeOptions;\n  }\n\n  private _siblingCount: number;\n\n  /**\n   * Number of always visible pages before and after the current page.\n   */\n  @Input()\n  public set siblingCount(value: number) {\n    this._siblingCount = value ?? this.defaultOptions?.siblingCount ?? 2;\n  }\n  public get siblingCount(): number {\n    return this._siblingCount;\n  }\n\n  private _boundaryCount: number;\n\n  /**\n   * Number of always visible pages at the beginning and end.\n   */\n  @Input()\n  public set boundaryCount(value: number) {\n    this._boundaryCount = value ?? this.defaultOptions?.boundaryCount ?? 1;\n  }\n  public get boundaryCount(): number {\n    return this._boundaryCount;\n  }\n\n  private _typography;\n\n  /**\n   * Class applied to text.\n   */\n  @Input()\n  public get typography(): string {\n    return this._typography;\n  }\n  public set typography(value: string) {\n    this._typography = value || this.defaultOptions?.typography || 'es-caption';\n  }\n\n  /**\n   * Event emitted when the paginator changes the page index.\n   */\n  @Output() public pageChange = new EventEmitter<number>();\n\n  /**\n   * Event emitted when the paginator changes the page size.\n   */\n  @Output() public pageSizeChange = new EventEmitter<number>();\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public pageGoTo = '';\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public locale$: Observable<ESLocale>;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    /**\n     * @internal\n     */\n    public changeDetector: ChangeDetectorRef,\n    /**\n     * @internal\n     */\n    private localeService: ESLocaleService,\n    /**\n     * @internal\n     */\n    @Optional()\n    @Inject(ES_PAGINATOR_DEFAULT_OPTIONS)\n    private defaultOptions: ESPaginatorDefaultOptions\n  ) {\n    this.locale$ = this.localeService.locale();\n\n    this.pageSizeOptions = this.defaultOptions?.pageSizeOptions;\n    this.siblingCount = this.defaultOptions?.siblingCount;\n    this.boundaryCount = this.defaultOptions?.boundaryCount;\n    this.typography = this.defaultOptions?.typography;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public get countStart() {\n    return (this.page - 1) * this.pageSize + (this.count ? 1 : 0);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public get countEnd() {\n    return Math.min(this.page * this.pageSize, this.count);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public get pagesCount() {\n    return Math.ceil(this.count / this.pageSize);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public get pages() {\n    const startPages = range(1, Math.min(this.boundaryCount, this.pagesCount));\n    const endPages = range(\n      Math.max(this.pagesCount - this.boundaryCount + 1, this.boundaryCount + 1),\n      this.pagesCount\n    );\n\n    const siblingsStart = Math.max(\n      Math.min(\n        // Natural start\n        this.page - this.siblingCount,\n        // Lower boundary when page is high\n        this.pagesCount - this.boundaryCount - this.siblingCount * 2 - 1\n      ),\n      // Greater than startPages\n      this.boundaryCount + 2\n    );\n\n    const siblingsEnd = Math.min(\n      Math.max(\n        // Natural end\n        this.page + this.siblingCount,\n        // Upper boundary when page is low\n        this.boundaryCount + this.siblingCount * 2 + 2\n      ),\n      // Less than endPages\n      endPages[0] - 2\n    );\n\n    const itemList = [\n      ...startPages,\n\n      // Start ellipsis\n      ...(siblingsStart > this.boundaryCount + 2\n        ? [null]\n        : this.boundaryCount + 1 < this.pagesCount - this.boundaryCount\n        ? [this.boundaryCount + 1]\n        : []),\n\n      // Sibling pages\n      ...range(siblingsStart, siblingsEnd),\n\n      // End ellipsis\n      ...(siblingsEnd < this.pagesCount - this.boundaryCount - 1\n        ? [null]\n        : this.pagesCount - this.boundaryCount > this.boundaryCount\n        ? [this.pagesCount - this.boundaryCount]\n        : []),\n\n      ...endPages\n    ];\n\n    return itemList;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onPageSizeChange(pageSize: number) {\n    this.pageSizeChange.emit(pageSize);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onPageClick(page: number) {\n    this.pageChange.emit(page);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onNextPage() {\n    this.pageChange.emit(Math.min(this.page + 1, this.pagesCount));\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onPrevPage() {\n    this.pageChange.emit(Math.max(1, this.page - 1));\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public onSubmit(event: Event) {\n    event.preventDefault();\n    if (this.pageGoTo) {\n      const page = Math.max(1, Math.min(+this.pageGoTo, this.pagesCount));\n      this.pageChange.emit(page);\n    }\n  }\n\n  /**\n   * Prevent letter typing\n   */\n  /**\n   * @internal\n   * @ignore\n   */\n  public onKeyPress(event: KeyboardEvent) {\n    const key = event.key;\n    const regex = /[0-9]/;\n\n    if (key === 'Enter' || regex.test(key)) {\n      return;\n    }\n\n    event.preventDefault();\n  }\n\n  @HostListener('window:keydown.shift.arrowright', ['$event']) public onKeyWrightDown(\n    event: KeyboardEvent\n  ) {\n    this.onNextPage();\n  }\n\n  @HostListener('window:keydown.shift.arrowleft', ['$event']) public onKeyLeftDown(\n    event: KeyboardEvent\n  ) {\n    if (this.page !== 1) {\n      this.onPrevPage();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".es-paginator {\n  align-items: baseline;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  white-space: nowrap;\n\n  &__size {\n    align-items: center;\n    display: flex;\n    margin-bottom: 16px;\n    margin-right: 24px;\n  }\n\n  &__select {\n    display: block;\n    margin-left: 4px;\n    margin-right: 18px;\n\n    &.mat-mdc-select {\n      width: 40px;\n    }\n  }\n\n  &__pages {\n    margin-left: auto;\n  }\n\n  &__form {\n    margin-left: 16px;\n  }\n\n  &__input {\n    appearance: textfield;\n    width: 64px;\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    &.mat-form-field-appearance-outline .mat-form-field-flex {\n      padding-bottom: 0;\n      padding-left: 0.6em;\n      padding-right: 0.6em;\n      padding-top: 0;\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    &.mat-form-field-appearance-outline .mat-form-field-wrapper {\n      margin-bottom: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n      .mat-form-field-infix {\n        border: 0;\n        font-size: 12px;\n        padding-bottom: 9px;\n        padding-top: 14px;\n      }\n    }\n    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\n    .mat-form-field-subscript-wrapper {\n      display: none;\n    }\n\n    .mat-mdc-input-element {\n      appearance: textfield;\n\n      &::-webkit-outer-spin-button,\n      &::-webkit-inner-spin-button {\n        appearance: none !important;\n        margin: 0 !important;\n      }\n    }\n  }\n\n  &__items {\n    align-items: center;\n    display: flex;\n    margin-left: -12px;\n  }\n\n  &__item {\n    align-items: center;\n    display: flex;\n    font-size: 12px;\n    justify-content: center;\n\n    &-icon {\n      opacity: 0.38;\n    }\n\n    &,\n    &.mat-mdc-icon-button {\n      height: 32px;\n      line-height: unset;\n      margin: 0;\n      width: 32px;\n    }\n\n    &:first-child {\n      margin-left: 0;\n    }\n\n    &:last-child {\n      margin-right: 24px;\n    }\n\n    &_active {\n      font-weight: 600;\n    }\n\n    &_arrow {\n      padding: 0;\n\n      &:disabled {\n        opacity: 0.3;\n      }\n    }\n\n    &_gap {\n      align-items: center;\n      color: inherit;\n      display: flex;\n      width: 32px;\n\n      &:hover {\n        background: none;\n      }\n    }\n\n    &-icon {\n      margin-top: 12px;\n    }\n  }\n}\n",
                    "styleUrl": "./paginator.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "page": {
                    "name": "page",
                    "setSignature": {
                        "name": "page",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "page",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "rawdescription": "The current page.",
                        "description": "<p>The current page.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "page",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "page",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "pageSizeOptions": {
                    "name": "pageSizeOptions",
                    "setSignature": {
                        "name": "pageSizeOptions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "rawdescription": "The set of provided page size options to display to the user.",
                        "description": "<p>The set of provided page size options to display to the user.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pageSizeOptions",
                        "type": "[]",
                        "returnType": "number[]",
                        "line": 78
                    }
                },
                "siblingCount": {
                    "name": "siblingCount",
                    "setSignature": {
                        "name": "siblingCount",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 88,
                        "rawdescription": "Number of always visible pages before and after the current page.",
                        "description": "<p>Number of always visible pages before and after the current page.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "siblingCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 91
                    }
                },
                "boundaryCount": {
                    "name": "boundaryCount",
                    "setSignature": {
                        "name": "boundaryCount",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "rawdescription": "Number of always visible pages at the beginning and end.",
                        "description": "<p>Number of always visible pages at the beginning and end.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "boundaryCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 104
                    }
                },
                "typography": {
                    "name": "typography",
                    "setSignature": {
                        "name": "typography",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 117,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "typography",
                        "type": "string",
                        "returnType": "string",
                        "line": 114,
                        "rawdescription": "Class applied to text.",
                        "description": "<p>Class applied to text.</p>\n"
                    }
                }
            },
            "templateData": "<div *ngIf=\"locale$ | async as locale\" class=\"es-paginator\">\n  <div class=\"es-paginator__size\" [ngClass]=\"typography\">\n    <span>{{ locale.paginator.labelItemsPerPage }}:</span>\n    <mat-select\n      class=\"es-paginator__select\"\n      size=\"sm\"\n      [aria-label]=\"locale.paginator.labelItemsPerPage\"\n      [ngModel]=\"pageSize\"\n      (ngModelChange)=\"onPageSizeChange($event)\"\n    >\n      <mat-option *ngFor=\"let size of pageSizeOptions\" [value]=\"size\">\n        {{ size }}\n      </mat-option>\n    </mat-select>\n\n    <span data-testid=\"es-paginator-pages\" class=\"es-paginator__pages\">\n      {{ countStart }} &mdash; {{ countEnd }} {{ locale.paginator.labelOf }} {{ count }}\n    </span>\n  </div>\n\n  <div *ngIf=\"count\" class=\"es-paginator__items\">\n    <button\n      class=\"es-paginator__item es-paginator__item_arrow\"\n      mat-icon-button\n      [disabled]=\"page === 1\"\n      (click)=\"onPrevPage()\"\n      [attr.aria-label]=\"locale.paginator.labelPrev\"\n    >\n      <mat-icon> chevron_left </mat-icon>\n    </button>\n\n    <ng-container *ngFor=\"let i of pages\">\n      <button\n        *ngIf=\"i !== null\"\n        class=\"es-paginator__item\"\n        [ngClass]=\"{ 'es-paginator__item_active': i === page }\"\n        mat-icon-button\n        [disabled]=\"i === page\"\n        (click)=\"onPageClick(i)\"\n        esTooltip='&#8592; shift &#8594;'\n        esTooltipArrow=\"true\"\n      >\n        {{ i }}\n      </button>\n      <div *ngIf=\"i === null\" class=\"es-paginator__item es-paginator__item_gap\">\n        <svg class=\"es-paginator__item-icon\" width=\"12\" height=\"2\" viewBox=\"0 0 12 2\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2 1C2 1.55228 1.55228 2 1 2C0.447715 2 0 1.55228 0 1C0 0.447715 0.447715 0 1 0C1.55228 0 2 0.447715 2 1ZM7 1C7 1.55228 6.55228 2 6 2C5.44772 2 5 1.55228 5 1C5 0.447715 5.44772 0 6 0C6.55228 0 7 0.447715 7 1ZM11 2C11.5523 2 12 1.55228 12 1C12 0.447715 11.5523 0 11 0C10.4477 0 10 0.447715 10 1C10 1.55228 10.4477 2 11 2Z\" fill=\"currentColor\" />\n        </svg>\n      </div>\n    </ng-container>\n\n    <button\n      class=\"es-paginator__item es-paginator__item_arrow\"\n      mat-icon-button\n      [disabled]=\"page === pagesCount\"\n      (click)=\"onNextPage()\"\n      [attr.aria-label]=\"locale.paginator.labelNext\"\n    >\n      <mat-icon> chevron_right </mat-icon>\n    </button>\n\n    <form class=\"es-paginator__form\" novalidate (submit)=\"onSubmit($event)\">\n      <mat-form-field class=\"es-paginator__input\" appearance=\"outline\">\n        <input\n          [attr.aria-label]=\"locale.paginator.labelGoTo\"\n          matInput\n          [(ngModel)]=\"pageGoTo\"\n          name=\"pageGoTo\"\n          type=\"number\"\n          min=\"1\"\n          [max]=\"pagesCount\"\n          placeholder=\"{{ page }} {{ locale.paginator.labelPage }}\"\n          (keypress)=\"onKeyPress($event)\"\n        />\n      </mat-form-field>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "ESTooltipComponent",
            "id": "component-ESTooltipComponent-f754bfcf6ea360828b30d95abf7a2280",
            "file": "projects/elonkit/src/ui/tooltip/tooltip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-tooltip-component",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeOnInteraction",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether interactions on the page should close the tooltip</p>\n",
                    "line": 229,
                    "rawdescription": "\n\nWhether interactions on the page should close the tooltip\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "hide",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Begins the animation to hide the tooltip after the provided delay in ms.</p>\n",
                    "line": 285,
                    "rawdescription": "\n\nBegins the animation to hide the tooltip after the provided delay in ms.\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "pos": 7282,
                            "end": 7351,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 7283,
                                "end": 7288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Amount of milliseconds to delay showing the tooltip.</p>\n",
                            "name": {
                                "pos": 7289,
                                "end": 7294,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "delay"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "onHide$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subject for notifying that the tooltip has been hidden from the view.</p>\n",
                    "line": 234,
                    "rawdescription": "\n\nSubject for notifying that the tooltip has been hidden from the view.\n",
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "afterHidden",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable that notifies when the tooltip has been hidden from view.\n",
                    "description": "<p>Returns an observable that notifies when the tooltip has been hidden from view.</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether the tooltip is being displayed.\n",
                    "description": "<p>Whether the tooltip is being displayed.</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onBodyClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'body:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocusOut",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusout', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows the tooltip with an animation originating from the provided origin.\n",
                    "description": "<p>Shows the tooltip with an animation originating from the provided origin.</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6521,
                                "end": 6526,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "delay"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6515,
                                "end": 6520,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Amount of milliseconds to the delay showing the tooltip.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.pointer-events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "any"
                },
                {
                    "name": "style.zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "any"
                }
            ],
            "hostListeners": [
                {
                    "name": "body:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57
                },
                {
                    "name": "document:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71
                },
                {
                    "name": "focusout",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82
                },
                {
                    "name": "mouseleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  ViewEncapsulation,\n  HostListener,\n  ElementRef,\n  HostBinding\n} from '@angular/core';\n\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AnimationEvent } from '@angular/animations';\n\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { getNextFocusableElement } from '../../cdk/a11y';\n\nimport { matTooltipAnimations, TooltipVisibility } from '@angular/material/tooltip';\n\nimport { Subject } from 'rxjs';\n\nimport { ESTooltipDirective } from './tooltip.directive';\nimport { ESTooltipService } from './tooltip.service';\n\n@Component({\n  selector: 'es-tooltip-component',\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState]\n})\nexport class ESTooltipComponent implements OnDestroy {\n  @HostBinding('style.zoom') public get zoom() {\n    return this.sanitizer.bypassSecurityTrustStyle(this.visibility === 'visible' ? '1' : null);\n  }\n\n  @HostBinding('style.pointer-events') public get pointerEvents() {\n    return this.sanitizer.bypassSecurityTrustStyle(this.interactive ? 'auto' : null);\n  }\n\n  @HostListener('body:click', ['$event']) public onBodyClick(event: Event) {\n    if (this.disableCloseClickListener) {\n      return;\n    }\n\n    const isContainer =\n      this.elementRef.nativeElement.contains(event.target as HTMLElement) ||\n      this.parentElementRef.nativeElement.contains(event.target as HTMLElement);\n\n    if ((true || this.closeOnInteraction) && !(this.interactive && isContainer)) {\n      this.hide(0);\n    }\n  }\n\n  @HostListener('document:keydown', ['$event']) public onKeyDown(event: KeyboardEvent) {\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.hide(0);\n      this.focusMonitor.focusVia(this.parentElementRef, 'program');\n    }\n  }\n\n  @HostListener('mouseenter') public onMouseEnter() {\n    this.parent.cancelPossiblyHide();\n  }\n\n  @HostListener('mouseleave', ['$event']) public onMouseLeave(event: MouseEvent) {\n    if (this.disableCloseHoverListener) {\n      return;\n    }\n\n    if (this.interactive && event.relatedTarget !== this.parentElementRef.nativeElement) {\n      this.hide(0);\n    }\n  }\n\n  @HostListener('focusout', ['$event']) public onFocusOut(event: FocusEvent) {\n    if (this.disableCloseFocusListener) {\n      return;\n    }\n\n    // Timeout for correct document.hasFocus detection\n    setTimeout(() => {\n      if (this.interactive) {\n        if (\n          document.hasFocus() &&\n          (!event.relatedTarget ||\n            (event.relatedTarget &&\n              this.elementRef.nativeElement.contains(event.relatedTarget as HTMLElement))) &&\n          this.elementRef.nativeElement.contains(event.target as HTMLElement)\n        ) {\n          return;\n        }\n\n        const isPrev =\n          event.relatedTarget &&\n          (event.target as HTMLElement).compareDocumentPosition(\n            event.relatedTarget as HTMLElement\n          ) === 2;\n\n        if (isPrev) {\n          this.parentElementRef.nativeElement.focus();\n        } else {\n          this.hide(0);\n          const element = getNextFocusableElement(this.parentElementRef.nativeElement);\n          if (element) {\n            element.focus();\n          }\n        }\n      } else {\n        this.hide(0);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Message to display in the tooltip.\n   */\n  public message?: string;\n\n  /**\n   * @internal\n   * @ignore\n   * Content to display in the tooltip.\n   */\n  public content?: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   * Wheter the tooltip interactive.\n   */\n  public interactive: boolean;\n\n  /**\n   * @internal\n   * @ignore\n   * The arrow postition.\n   */\n  public arrow: { position: string; offsetX?: number; offsetY?: number } | null = null;\n\n  /**\n   * @internal\n   * @ignore\n   * Do not respond to focus events.\n   */\n  public disableCloseFocusListener = false;\n\n  /**\n   * @internal\n   * @ignore\n   * Do not respond to hover events.\n   */\n  public disableCloseHoverListener = false;\n\n  /**\n   * @internal\n   * @ignore\n   * Do not respond to backdrop click events.\n   */\n  public disableCloseClickListener = false;\n\n  /**\n   * @internal\n   * @ignore\n   * Directive's host element class instance.\n   */\n  public parent: ESTooltipDirective;\n\n  /**\n   * @internal\n   * @ignore\n   * Directive's host element reference.\n   */\n  public parentElementRef: ElementRef<HTMLElement>;\n\n  /**\n   * @internal\n   * @ignore\n   * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n   */\n  public tooltipClass: string | string[] | Set<string> | { [key: string]: any };\n\n  /**\n   * @internal\n   * @ignore\n   * The timeout ID of any current timer set to show the tooltip.\n   */\n  public showTimeoutId: NodeJS.Timeout | null;\n\n  /**\n   * @internal\n   * @ignore\n   * The timeout ID of any current timer set to hide the tooltip.\n   */\n  public hideTimeoutId: NodeJS.Timeout | null;\n\n  /**\n   * @internal\n   * @ignore\n   * Property watched by the animation framework to show or hide the tooltip.\n   */\n  public visibility: TooltipVisibility = 'initial';\n\n  /**\n   * Whether interactions on the page should close the tooltip\n   */\n  private closeOnInteraction = false;\n\n  /**\n   * Subject for notifying that the tooltip has been hidden from the view.\n   */\n  private readonly onHide$ = new Subject<void>();\n\n  /**\n   * @internal\n   * @ignore\n   */\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private sanitizer: DomSanitizer,\n    private focusMonitor: FocusMonitor,\n    private tooltipService: ESTooltipService,\n    /**\n     * @internal\n     */\n    public elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * @ignore\n   */\n  public ngOnDestroy() {\n    this.onHide$.complete();\n  }\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  public show(delay: number) {\n    // Cancel the delayed hide if it is scheduled\n    if (this.hideTimeoutId) {\n      clearTimeout(this.hideTimeoutId);\n      this.hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this.closeOnInteraction = true;\n    this.showTimeoutId = setTimeout(() => {\n      this.visibility = 'visible';\n      this.showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this.markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  public hide = (delay: number = 0) => {\n    // Cancel the delayed show if it is scheduled\n    if (this.showTimeoutId) {\n      clearTimeout(this.showTimeoutId);\n      this.showTimeoutId = null;\n    }\n\n    this.hideTimeoutId = setTimeout(() => {\n      this.visibility = 'hidden';\n      this.hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this.markForCheck();\n    }, delay);\n  };\n\n  /**\n   * Returns an observable that notifies when the tooltip has been hidden from view.\n   */\n  public afterHidden() {\n    return this.onHide$.asObservable();\n  }\n\n  /**\n   * Whether the tooltip is being displayed.\n   */\n  public isVisible() {\n    return this.visibility === 'visible';\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public animationStart() {\n    this.closeOnInteraction = false;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   */\n  public animationDone(event: AnimationEvent) {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this.onHide$.next();\n      this.tooltipService.closed$.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this.closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  public markForCheck() {\n    this.changeDetector.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'sass:math';\n\n$es-tooltip-max-width: 250px;\n$es-tooltip-margin: 12px;\n\n.es-tooltip-panel {\n  // The overlay reference updates the pointer-events style property directly on the HTMLElement\n  // depending on the state of the overlay. For tooltips the overlay panel should never enable\n  // pointer events. To overwrite the inline CSS from the overlay reference `!important` is needed.\n  pointer-events: none !important;\n}\n\n.es-tooltip {\n  border-radius: 4px;\n  font-family: Roboto;\n  font-size: 12px;\n  letter-spacing: 0.4px;\n  line-height: 16px;\n  margin: $es-tooltip-margin;\n  max-width: $es-tooltip-max-width;\n  padding: 8px;\n  position: relative;\n\n  &__content {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  &__arrow {\n    $base: 12; // Triangle base\n    $height: 8; // Triangle height\n\n    $size: math.round(math.div($base, math.sqrt(2))); // Square side size\n    $scale: math.div($height, math.div($base, 2));\n    $offset: -#{math.div($size, 2)}px;\n\n    border-bottom-right-radius: 2px;\n    height: #{$size}px;\n    position: absolute;\n    width: #{$size}px;\n\n    &_bottom {\n      bottom: $offset;\n      transform: scaleY($scale) translateX(-50%) rotate(45deg);\n    }\n\n    &_left {\n      left: $offset;\n      transform: scaleX($scale) translateY(-50%) rotate(135deg);\n    }\n\n    &_top {\n      top: $offset;\n      transform: scaleY($scale) translateX(-50%) rotate(225deg);\n    }\n\n    &_right {\n      right: $offset;\n      transform: scaleX($scale) translateY(-50%) rotate(315deg);\n    }\n  }\n}\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "zoom": {
                    "name": "zoom",
                    "getSignature": {
                        "name": "zoom",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                },
                "pointerEvents": {
                    "name": "pointerEvents",
                    "getSignature": {
                        "name": "pointerEvents",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "templateData": "<div\n  class=\"es-tooltip\"\n  [ngClass]=\"tooltipClass\"\n  [@state]=\"visibility\"\n  (@state.start)=\"animationStart()\"\n  (@state.done)=\"animationDone($event)\"\n>\n  <div class=\"es-tooltip__content\">\n    <ng-container *ngIf=\"content; else messageTemplate\">\n      <ng-container *ngTemplateOutlet=\"content; context: { hide: hide }\"></ng-container>\n    </ng-container>\n    <ng-template #messageTemplate>\n      {{ message }}\n    </ng-template>\n  </div>\n\n  <div\n    *ngIf=\"arrow\"\n    class=\"es-tooltip__arrow\"\n    [ngClass]=\"'es-tooltip__arrow_' + arrow.position\"\n    [ngStyle]=\"{\n      'top.px': arrow.offsetY,\n      'left.px': arrow.offsetX\n    }\"\n  ></div>\n</div>\n"
        },
        {
            "name": "InlineFormFieldStoryBasicComponent",
            "id": "component-InlineFormFieldStoryBasicComponent-cc86ebc5fdc02418ab1d6344f97d49b0",
            "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-basic/inline-form-field-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-inline-form-field-basic",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./inline-form-field-story-basic.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "text",
                    "defaultValue": "'Hello World'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'es-inline-form-field-basic',\n  templateUrl: './inline-form-field-story-basic.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InlineFormFieldStoryBasicComponent {\n  public text = 'Hello World';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<es-inline-form-field [text]=\"text\">\n  <mat-form-field>\n    <input [(ngModel)]=\"text\" matInput autocomplete=\"off\" />\n  </mat-form-field>\n</es-inline-form-field>\n"
        },
        {
            "name": "InlineFormFieldStoryCompositionComponent",
            "id": "component-InlineFormFieldStoryCompositionComponent-681584b122a6d04ac4dfc5bcb42e4d7c",
            "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-composition/inline-form-field-story-composition.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-inline-form-field-composition",
            "styleUrls": [
                "./inline-form-field-story-composition.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inline-form-field-story-composition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "hint",
                    "defaultValue": "'Input with hint'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "select",
                    "defaultValue": "'Grape'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "text",
                    "defaultValue": "'Prefix & Suffix'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'es-inline-form-field-composition',\n  templateUrl: './inline-form-field-story-composition.component.html',\n  styleUrls: ['./inline-form-field-story-composition.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class InlineFormFieldStoryCompositionComponent {\n  public date = new Date();\n  public text = 'Prefix & Suffix';\n  public select = 'Grape';\n  public hint = 'Input with hint';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".inline-form-field {\n  display: block;\n  margin-bottom: 16px;\n}\n",
                    "styleUrl": "./inline-form-field-story-composition.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<es-inline-form-field [text]=\"date | date: 'M/d/yyyy'\" class=\"inline-form-field\">\n  <mat-form-field>\n    <input [(ngModel)]=\"date\" matInput [matDatepicker]=\"picker\" autocomplete=\"off\" />\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker #picker></mat-datepicker>\n  </mat-form-field>\n</es-inline-form-field>\n\n<es-inline-form-field [text]=\"text\" class=\"inline-form-field\">\n  <mat-form-field>\n    <button matPrefix mat-icon-button>\n      <mat-icon>favorite</mat-icon>\n    </button>\n    <input [(ngModel)]=\"text\" matInput autocomplete=\"off\" />\n    <button matSuffix mat-icon-button>\n      <mat-icon>thumb_up</mat-icon>\n    </button>\n  </mat-form-field>\n</es-inline-form-field>\n\n<es-inline-form-field [text]=\"select\" class=\"inline-form-field\">\n  <mat-form-field>\n    <mat-select [(ngModel)]=\"select\">\n      <mat-option value=\"Apple\">\n        Apple\n      </mat-option>\n      <mat-option value=\"Grape\">\n        Grape\n      </mat-option>\n      <mat-option value=\"Pineapple\">\n        Pineapple\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</es-inline-form-field>\n\n<es-inline-form-field [text]=\"hint\" class=\"inline-form-field\">\n  <mat-form-field>\n    <input [(ngModel)]=\"hint\" matInput autocomplete=\"off\" />\n    <mat-hint>This is a hint</mat-hint>\n  </mat-form-field>\n</es-inline-form-field>\n"
        },
        {
            "name": "InlineFormFieldStoryTypographyComponent",
            "id": "component-InlineFormFieldStoryTypographyComponent-d0943b5d83ee825fea913c6ea9b2b919",
            "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-inline-form-field-typography",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./inline-form-field-story-typography.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "typography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "text",
                    "defaultValue": "TEXT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "textMultiline",
                    "defaultValue": "TEXT_MMULTILINE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\nconst TEXT = 'Hello World';\n\nconst TEXT_MMULTILINE = `Hello World\nGood Morning World`;\n\n@Component({\n  selector: 'es-inline-form-field-typography',\n  templateUrl: './inline-form-field-story-typography.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InlineFormFieldStoryTypographyComponent {\n  @Input() public typography;\n\n  public text = TEXT;\n  public textMultiline = TEXT_MMULTILINE;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<es-inline-form-field [text]=\"text\" [typography]=\"typography\">\n  <mat-form-field>\n    <input [(ngModel)]=\"text\" matInput placeholder=\"Placeholder\" autocomplete=\"off\" />\n  </mat-form-field>\n</es-inline-form-field>\n\n<es-inline-form-field [text]=\"textMultiline\" [typography]=\"typography\">\n  <mat-form-field>\n    <textarea\n      [(ngModel)]=\"textMultiline\"\n      matInput\n      matTextareaAutosize\n      placeholder=\"Placeholder\"\n      autocomplete=\"off\"\n    ></textarea>\n  </mat-form-field>\n</es-inline-form-field>\n"
        },
        {
            "name": "InlineFormFieldStoryValidationComponent",
            "id": "component-InlineFormFieldStoryValidationComponent-a54d46ed2055e4b1465f0f949672df3b",
            "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-inline-form-field-validation",
            "styleUrls": [
                "./inline-form-field-story-validation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inline-form-field-story-validation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSave",
                    "args": [
                        {
                            "name": "inlineFormField",
                            "type": "ESInlineFormFieldComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "inlineFormField",
                            "type": "ESInlineFormFieldComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { UntypedFormBuilder, UntypedFormGroup, FormControl, Validators } from '@angular/forms';\n\nimport { of, throwError } from 'rxjs';\nimport { delay, switchMap } from 'rxjs/operators';\n\nimport { ESInlineFormFieldComponent } from '../..';\n\nconst save = (value: string) =>\n  of(value).pipe(\n    delay(100),\n    switchMap((v) => {\n      if (v.length) {\n        return of(v);\n      }\n      return throwError({ required: true });\n    })\n  );\n\n@Component({\n  selector: 'es-inline-form-field-validation',\n  templateUrl: './inline-form-field-story-validation.component.html',\n  styleUrls: ['./inline-form-field-story-validation.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class InlineFormFieldStoryValidationComponent {\n  public form: UntypedFormGroup;\n\n  constructor(private changeDetector: ChangeDetectorRef, private formBuilder: UntypedFormBuilder) {\n    this.form = this.formBuilder.group({\n      text: ['Hello World', [Validators.required]],\n      server: 'Hello Server Side Validation'\n    });\n  }\n\n  public onSave(inlineFormField: ESInlineFormFieldComponent) {\n    const value: string = this.form.get('server').value;\n\n    save(value).subscribe(\n      () => {\n        inlineFormField.setHidden(true);\n      },\n      (errors) => {\n        this.form.get('server').setErrors(errors);\n        this.changeDetector.detectChanges();\n      }\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".inline-form-field {\n  display: block;\n  margin-bottom: 16px;\n}\n",
                    "styleUrl": "./inline-form-field-story-validation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form [formGroup]=\"form\">\n  <es-inline-form-field [text]=\"form.get('text').value\" class=\"inline-form-field\">\n    <mat-form-field>\n      <input formControlName=\"text\" matInput autocomplete=\"off\" />\n      <mat-error *ngIf=\"form.get('text').hasError('required')\">\n        This field is required\n      </mat-error>\n    </mat-form-field>\n  </es-inline-form-field>\n\n  <es-inline-form-field\n    [text]=\"form.get('server').value\"\n    [manualSave]=\"true\"\n    (save)=\"onSave($event)\"\n    class=\"inline-form-field\"\n  >\n    <mat-form-field>\n      <input formControlName=\"server\" matInput autocomplete=\"off\" />\n      <mat-error *ngIf=\"form.get('server').hasError('required')\">\n        This field is required\n      </mat-error>\n    </mat-form-field>\n  </es-inline-form-field>\n</form>\n"
        },
        {
            "name": "PaginatorStoryBasicComponent",
            "id": "component-PaginatorStoryBasicComponent-c3b06795ae8a35058c41a2419553fa86",
            "file": "projects/elonkit/src/ui/paginator/__stories__/paginator-story-basic/paginator-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-paginator-basic",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./paginator-story-basic.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "boundaryCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "pageSizeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number[]"
                },
                {
                    "name": "siblingCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "pageSize",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageSizeChange",
                    "args": [
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'es-paginator-basic',\n  templateUrl: './paginator-story-basic.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaginatorStoryBasicComponent {\n  private _count: number;\n\n  @Input()\n  public set count(value: number) {\n    this._count = value;\n    this.page = 1;\n  }\n  public get count() {\n    return this._count;\n  }\n\n  @Input() public siblingCount: number;\n  @Input() public boundaryCount: number;\n  @Input() public pageSizeOptions: number[];\n\n  public page = 1;\n  public pageSize = 5;\n\n  public onPageChange(page: number) {\n    this.page = page;\n  }\n\n  public onPageSizeChange(pageSize: number) {\n    this.pageSize = pageSize;\n    this.page = 1;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "count": {
                    "name": "count",
                    "setSignature": {
                        "name": "count",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "count",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            },
            "templateData": "<es-paginator\n  [count]=\"count\"\n  [siblingCount]=\"siblingCount\"\n  [boundaryCount]=\"boundaryCount\"\n  [page]=\"page\"\n  [pageSize]=\"pageSize\"\n  [pageSizeOptions]=\"pageSizeOptions\"\n  (pageChange)=\"onPageChange($event)\"\n  (pageSizeChange)=\"onPageSizeChange($event)\"\n></es-paginator>\n"
        },
        {
            "name": "TooltipStoryBasicComponent",
            "id": "component-TooltipStoryBasicComponent-79f2f3261eddf8eee89586f00f18af09",
            "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-basic/tooltip-story-basic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-tooltip-story-basic",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tooltip-story-basic.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "esTooltipArrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'es-tooltip-story-basic',\n  templateUrl: './tooltip-story-basic.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipStoryBasicComponent {\n  @Input() public esTooltipArrow: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div style=\"padding: 10px;\">\n  <button\n    mat-flat-button\n    color=\"primary\"\n    esTooltip=\"Information about the action\"\n    esTooltipPosition=\"after\"\n    [esTooltipArrow]=\"esTooltipArrow\"\n  >\n    Button\n  </button>\n</div>\n"
        },
        {
            "name": "TooltipStoryInteractiveComponent",
            "id": "component-TooltipStoryInteractiveComponent-ed2a9a6bce43ef80e2a2b14cc4340cdc",
            "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-interactive/tooltip-story-interactive.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-tooltip-story-interactive",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tooltip-story-interactive.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "esTooltipArrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipMouseAimDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'es-tooltip-story-interactive',\n  templateUrl: './tooltip-story-interactive.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipStoryInteractiveComponent {\n  @Input() public esTooltipArrow: boolean;\n  @Input() public esTooltipMouseAimDelay: number;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div style=\"padding: 10px;\">\n  <div style=\"margin-bottom: 8px;\">\n    <button\n      style=\"margin-right: 8px;\"\n      mat-flat-button\n      color=\"primary\"\n      esTooltip\n      [esTooltipContent]=\"content\"\n      esTooltipPosition=\"after\"\n      esTooltipInteractive\n      [esTooltipArrow]=\"esTooltipArrow\"\n      [esTooltipMouseAimDelay]=\"esTooltipMouseAimDelay\"\n    >\n      Button 1\n    </button>\n    <button mat-flat-button color=\"accent\">Extra Button</button>\n  </div>\n  <div>\n    <button\n      style=\"margin-right: 8px;\"\n      mat-flat-button\n      color=\"primary\"\n      esTooltip\n      [esTooltipContent]=\"content\"\n      esTooltipPosition=\"after\"\n      esTooltipInteractive\n      [esTooltipArrow]=\"esTooltipArrow\"\n      [esTooltipMouseAimDelay]=\"esTooltipMouseAimDelay\"\n    >\n      Button 2\n    </button>\n  </div>\n</div>\n\n<ng-template #content>\n  This is a tooltip with an interactive content.\n  <br /><br />\n  <button mat-flat-button>Action</button>\n</ng-template>\n"
        },
        {
            "name": "TooltipStoryListenersComponent",
            "id": "component-TooltipStoryListenersComponent-d533dcab30a929b6ff1c9167c3b29d5b",
            "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-listeners/tooltip-story-listeners.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-tooltip-story-listeners",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tooltip-story-listeners.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "esTooltipArrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipDisableCloseClickListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipDisableCloseFocusListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipDisableCloseHoverListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipDisableFocusListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "esTooltipDisableHoverListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'es-tooltip-story-listeners',\n  templateUrl: './tooltip-story-listeners.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipStoryListenersComponent {\n  @Input() public esTooltipArrow: boolean;\n  @Input() public esTooltipDisableFocusListener: boolean;\n  @Input() public esTooltipDisableHoverListener: boolean;\n  @Input() public esTooltipDisableCloseFocusListener: boolean;\n  @Input() public esTooltipDisableCloseHoverListener: boolean;\n  @Input() public esTooltipDisableCloseClickListener: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div style=\"padding: 10px;\">\n  <button\n    mat-flat-button\n    color=\"primary\"\n    esTooltip\n    [esTooltipContent]=\"content\"\n    esTooltipPosition=\"after\"\n    esTooltipInteractive\n    [esTooltipArrow]=\"esTooltipArrow\"\n    [esTooltipDisableFocusListener]=\"esTooltipDisableFocusListener\"\n    [esTooltipDisableHoverListener]=\"esTooltipDisableHoverListener\"\n    [esTooltipDisableCloseFocusListener]=\"esTooltipDisableCloseFocusListener\"\n    [esTooltipDisableCloseHoverListener]=\"esTooltipDisableCloseHoverListener\"\n    [esTooltipDisableCloseClickListener]=\"esTooltipDisableCloseClickListener\"\n  >\n    Button\n  </button>\n  <ng-template #content let-hide=\"hide\">\n    Click this button to close the tooltip.\n    <br /><br />\n    <button mat-flat-button (click)=\"hide()\">Close</button>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "TooltipStoryThemingComponent",
            "id": "component-TooltipStoryThemingComponent-8a073b0dbdac7a0e8cc4540b0cf25a78",
            "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-theming/tooltip-story-theming.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "es-tooltip-story-theming",
            "styleUrls": [
                "./tooltip-story-theming.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip-story-theming.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "esTooltipArrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input } from '@angular/core';\n\n@Component({\n  selector: 'es-tooltip-story-theming',\n  templateUrl: './tooltip-story-theming.component.html',\n  styleUrls: ['./tooltip-story-theming.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class TooltipStoryThemingComponent {\n  @Input() public esTooltipArrow: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../tooltip.component.theme';\n\n.es-tooltip {\n  &_purple {\n    @include es-tooltip-color(#9b78ff, #fff);\n  }\n\n  &_marine {\n    @include es-tooltip-color(#3acac0, #fff);\n  }\n}\n",
                    "styleUrl": "./tooltip-story-theming.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div style=\"padding: 10px;\">\n  <button\n    mat-stroked-button\n    esTooltip=\"This is a customized tooltip\"\n    esTooltipPosition=\"after\"\n    [esTooltipArrow]=\"esTooltipArrow\"\n    esTooltipClass=\"es-tooltip_purple\"\n  >\n    Purple\n  </button>\n  <br /><br />\n  <button\n    mat-stroked-button\n    esTooltip=\"This is a customized tooltip\"\n    esTooltipPosition=\"after\"\n    [esTooltipArrow]=\"esTooltipArrow\"\n    esTooltipClass=\"es-tooltip_marine\"\n  >\n    Marine\n  </button>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AlertStoryIconMappingModule",
            "id": "module-AlertStoryIconMappingModule-c2d9b17dea5642061bd42ca77a02871e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/alert/__stories__/alert-story-icon-mapping/alert-story-icon-mapping.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AlertStoryIconMappingComponent } from './alert-story-icon-mapping.component';\n\nimport { ESAlertModule, ES_ALERT_DEFAULT_OPTIONS } from '../..';\n\n@NgModule({\n  declarations: [AlertStoryIconMappingComponent],\n  imports: [CommonModule, HttpClientModule, ESAlertModule],\n  exports: [AlertStoryIconMappingComponent],\n  providers: [\n    {\n      provide: ES_ALERT_DEFAULT_OPTIONS,\n      useValue: {\n        iconMapping: {\n          warning: { svgIcon: 'warning' },\n          error: { svgIcon: 'error' }\n        }\n      }\n    }\n  ]\n})\nexport class AlertStoryIconMappingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertStoryIconMappingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESAlertModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertStoryIconMappingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AutocompleteMultipleStoryServiceModule",
            "id": "module-AutocompleteMultipleStoryServiceModule-ff365a22eabf644f4f755300d2c97bd1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { CoreModule } from '~storybook/core.module';\n\nimport { ESAutocompleteMultipleModule } from '../..';\n\nimport { AutocompleteMultipleStoryServiceComponent } from './autocomplete-multiple-story-service.component';\nimport { AutocompleteMultipleStoryService } from './autocomplete-multiple-story-service.service';\n\n@NgModule({\n  declarations: [AutocompleteMultipleStoryServiceComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    CoreModule,\n    ESAutocompleteMultipleModule\n  ],\n  exports: [AutocompleteMultipleStoryServiceComponent],\n  providers: [AutocompleteMultipleStoryService]\n})\nexport class AutocompleteMultipleStoryServiceModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AutocompleteMultipleStoryService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutocompleteMultipleStoryServiceComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "ESAutocompleteMultipleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutocompleteMultipleStoryServiceComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BreadcrumbsStoryBasicModule",
            "id": "module-BreadcrumbsStoryBasicModule-53809a57de12c232ec7c37b32054a772",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule, APP_BASE_HREF } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { RouterTestingModule } from '@angular/router/testing';\n\nimport {\n  BreadcrumbsStoryBasicComponent,\n  BreadcrumbsStoryBasicHomeComponent,\n  BreadcrumbsStoryBasicCategoriesListComponent,\n  BreadcrumbsStoryBasicItemsListComponent,\n  BreadcrumbsStoryBasicItemsShowComponent,\n  BreadcrumbsStoryBasicItemsEditComponent\n} from './breadcrumbs-story-basic.component';\n\nimport { CategoriesService, ItemsService } from './breadcrumbs-story-basic.service';\n\nimport {\n  CategoriesListResolver,\n  CategoriesShowResolver,\n  CategoriesShowBreadcrumbsResolver,\n  ItemsListResolver,\n  ItemsShowResolver,\n  ItemsShowBreadcrumbsResolver\n} from './breadcrumbs-story-basic.resolver';\n\nimport { ESBreadcrumbsModule, ESBreadcrumbsResolver } from '../..';\n\nconst ROUTES = [\n  {\n    path: '',\n    data: {\n      breadcrumb: { svgIcon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsStoryBasicHomeComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsStoryBasicCategoriesListComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsStoryBasicItemsListComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsStoryBasicItemsShowComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsStoryBasicItemsEditComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@NgModule({\n  declarations: [\n    BreadcrumbsStoryBasicComponent,\n    BreadcrumbsStoryBasicHomeComponent,\n    BreadcrumbsStoryBasicCategoriesListComponent,\n    BreadcrumbsStoryBasicItemsListComponent,\n    BreadcrumbsStoryBasicItemsShowComponent,\n    BreadcrumbsStoryBasicItemsEditComponent\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ESBreadcrumbsModule,\n    RouterTestingModule.withRoutes(ROUTES)\n  ],\n  exports: [BreadcrumbsStoryBasicComponent],\n  providers: [\n    CategoriesService,\n    ItemsService,\n    CategoriesListResolver,\n    CategoriesShowResolver,\n    CategoriesShowBreadcrumbsResolver,\n    ItemsListResolver,\n    ItemsShowResolver,\n    ItemsShowBreadcrumbsResolver,\n    { provide: APP_BASE_HREF, useValue: '/' }\n  ]\n})\nexport class BreadcrumbsStoryBasicModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CategoriesListResolver"
                        },
                        {
                            "name": "CategoriesService"
                        },
                        {
                            "name": "CategoriesShowBreadcrumbsResolver"
                        },
                        {
                            "name": "CategoriesShowResolver"
                        },
                        {
                            "name": "ItemsListResolver"
                        },
                        {
                            "name": "ItemsService"
                        },
                        {
                            "name": "ItemsShowBreadcrumbsResolver"
                        },
                        {
                            "name": "ItemsShowResolver"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BreadcrumbsStoryBasicCategoriesListComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryBasicComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryBasicHomeComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryBasicItemsEditComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryBasicItemsListComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryBasicItemsShowComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESBreadcrumbsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BreadcrumbsStoryBasicComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BreadcrumbsStoryCustomizationModule",
            "id": "module-BreadcrumbsStoryCustomizationModule-4d24c81ea6b912015d0b5809c92e3b1c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule, APP_BASE_HREF } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterTestingModule } from '@angular/router/testing';\n\nimport { BreadcrumbsStoryCustomizationComponent } from './breadcrumbs-story-customization.component';\n\nimport {\n  BreadcrumbsStoryBasicHomeComponent,\n  BreadcrumbsStoryBasicCategoriesListComponent,\n  BreadcrumbsStoryBasicItemsListComponent,\n  BreadcrumbsStoryBasicItemsShowComponent,\n  BreadcrumbsStoryBasicItemsEditComponent\n} from '../breadcrumbs-story-basic/breadcrumbs-story-basic.component';\n\nimport {\n  CategoriesService,\n  ItemsService\n} from '../breadcrumbs-story-basic/breadcrumbs-story-basic.service';\n\nimport {\n  CategoriesListResolver,\n  CategoriesShowResolver,\n  CategoriesShowBreadcrumbsResolver,\n  ItemsListResolver,\n  ItemsShowResolver,\n  ItemsShowBreadcrumbsResolver\n} from '../breadcrumbs-story-basic/breadcrumbs-story-basic.resolver';\n\nimport { ESBreadcrumbsModule, ESBreadcrumbsResolver } from '../..';\n\nconst ROUTES = [\n  {\n    path: '',\n    data: {\n      breadcrumb: { icon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsStoryBasicHomeComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsStoryBasicCategoriesListComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsStoryBasicItemsListComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsStoryBasicItemsShowComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsStoryBasicItemsEditComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@NgModule({\n  declarations: [\n    BreadcrumbsStoryCustomizationComponent,\n    BreadcrumbsStoryBasicHomeComponent,\n    BreadcrumbsStoryBasicCategoriesListComponent,\n    BreadcrumbsStoryBasicItemsListComponent,\n    BreadcrumbsStoryBasicItemsShowComponent,\n    BreadcrumbsStoryBasicItemsEditComponent\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    MatIconModule,\n    ESBreadcrumbsModule,\n    RouterTestingModule.withRoutes(ROUTES)\n  ],\n  exports: [BreadcrumbsStoryCustomizationComponent],\n  providers: [\n    CategoriesService,\n    ItemsService,\n    CategoriesListResolver,\n    CategoriesShowResolver,\n    CategoriesShowBreadcrumbsResolver,\n    ItemsListResolver,\n    ItemsShowResolver,\n    ItemsShowBreadcrumbsResolver,\n    { provide: APP_BASE_HREF, useValue: '/' }\n  ]\n})\nexport class BreadcrumbsStoryCustomizationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CategoriesListResolver"
                        },
                        {
                            "name": "CategoriesService"
                        },
                        {
                            "name": "CategoriesShowBreadcrumbsResolver"
                        },
                        {
                            "name": "CategoriesShowResolver"
                        },
                        {
                            "name": "ItemsListResolver"
                        },
                        {
                            "name": "ItemsService"
                        },
                        {
                            "name": "ItemsShowBreadcrumbsResolver"
                        },
                        {
                            "name": "ItemsShowResolver"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BreadcrumbsStoryBasicCategoriesListComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryBasicHomeComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryBasicItemsEditComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryBasicItemsListComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryBasicItemsShowComponent"
                        },
                        {
                            "name": "BreadcrumbsStoryCustomizationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESBreadcrumbsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BreadcrumbsStoryCustomizationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-898eb635c452c34e49b639856d7df7c1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/storybook/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ESIconsService } from '../src/ui/icons';\n\n@NgModule({\n  imports: [MatIconModule],\n  providers: [ESIconsService]\n})\nexport class CoreModule {\n  constructor(private iconsService: ESIconsService) {\n    this.iconsService.register();\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ESIconsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DropzoneStoryBasicModule",
            "id": "module-DropzoneStoryBasicModule-77dcf0fb87122dfb0ef98d40d79ec6fd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-basic/dropzone-story-basic.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { DropzoneStoryBasicComponent } from './dropzone-story-basic.component';\nimport { ESDropzoneModule } from '../..';\n\n@NgModule({\n  declarations: [DropzoneStoryBasicComponent],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    FormsModule,\n    MatFormFieldModule,\n    ESDropzoneModule\n  ],\n  exports: [DropzoneStoryBasicComponent]\n})\nexport class DropzoneStoryBasicModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropzoneStoryBasicComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESDropzoneModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DropzoneStoryBasicComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DropzoneStoryCustomIconModule",
            "id": "module-DropzoneStoryCustomIconModule-e32bf417cc382e8ce1d9ae7c2cc4f3d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-custom-icon/dropzone-story-custom-icon.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { DropzoneStoryCustomIconComponent } from './dropzone-story-custom-icon.component';\nimport { ESDropzoneModule } from '../..';\n\n@NgModule({\n  declarations: [DropzoneStoryCustomIconComponent],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    FormsModule,\n    MatFormFieldModule,\n    ESDropzoneModule\n  ],\n  exports: [DropzoneStoryCustomIconComponent]\n})\nexport class DropzoneStoryCustomIconModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropzoneStoryCustomIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESDropzoneModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DropzoneStoryCustomIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DropzoneStoryRequiredModule",
            "id": "module-DropzoneStoryRequiredModule-df56297c433228179044cbe8f097e495",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-required/dropzone-story-required.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { DropzoneStoryRequiredComponent } from './dropzone-story-required.component';\nimport { ESDropzoneModule } from '../..';\n\n@NgModule({\n  declarations: [DropzoneStoryRequiredComponent],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    CommonModule,\n    MatFormFieldModule,\n    ESDropzoneModule\n  ],\n  exports: [DropzoneStoryRequiredComponent]\n})\nexport class DropzoneStoryRequiredModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropzoneStoryRequiredComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESDropzoneModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DropzoneStoryRequiredComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESActionHeadingModule",
            "id": "module-ESActionHeadingModule-a34dfd2cc635044a8d4549d81f0e6dcc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/action-heading/action-heading.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ESActionHeadingComponent } from './action-heading.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\n\n@NgModule({\n  imports: [CommonModule, MatIconModule, MatButtonModule],\n  declarations: [ESActionHeadingComponent],\n  exports: [ESActionHeadingComponent]\n})\nexport class ESActionHeadingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESActionHeadingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESActionHeadingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESAlertModule",
            "id": "module-ESAlertModule-f9779e8ae35471e3d2775fae25112e7a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/alert/alert.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { ESAlertComponent } from './alert.component';\nimport { ESAlertActionsComponent } from './components/alert-actions';\n\n@NgModule({\n  declarations: [ESAlertComponent, ESAlertActionsComponent],\n  imports: [CommonModule, MatButtonModule, MatIconModule],\n  exports: [ESAlertComponent, ESAlertActionsComponent, MatButtonModule]\n})\nexport class ESAlertModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESAlertActionsComponent"
                        },
                        {
                            "name": "ESAlertComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESAlertActionsComponent"
                        },
                        {
                            "name": "ESAlertComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESAutocompleteMultipleModule",
            "id": "module-ESAutocompleteMultipleModule-bcf952dbaf3aa76ac3871875676ccfa6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\n\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { ESAutocompleteMultipleComponent } from './autocomplete-multiple.component';\nimport { ESTooltipModule } from '../tooltip';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatChipsModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    A11yModule,\n    OverlayModule,\n    ESTooltipModule\n  ],\n  exports: [ESAutocompleteMultipleComponent],\n  declarations: [ESAutocompleteMultipleComponent]\n})\nexport class ESAutocompleteMultipleModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESAutocompleteMultipleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESAutocompleteMultipleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESAvatarModule",
            "id": "module-ESAvatarModule-def77077c0d3814c7c0defab25fe85b5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { ESAvatarComponent } from './avatar.component';\nimport { ESAvatarGroupComponent } from './avatar-group.component';\n\n@NgModule({\n  declarations: [ESAvatarComponent, ESAvatarGroupComponent],\n  imports: [CommonModule, MatIconModule],\n  exports: [ESAvatarComponent, ESAvatarGroupComponent]\n})\nexport class ESAvatarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESAvatarComponent"
                        },
                        {
                            "name": "ESAvatarGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESAvatarComponent"
                        },
                        {
                            "name": "ESAvatarGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESBreadcrumbsModule",
            "id": "module-ESBreadcrumbsModule-dbaea73aae074c1cb693a034252437ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatRippleModule } from '@angular/material/core';\n\nimport { ESBreadcrumbsComponent } from './breadcrumbs.component';\nimport { ESBreadcrumbsResolver } from './breadcrumbs.resolver';\n\nimport { ESBreadcrumbsBreadcrumbComponent } from './components/breadcrumbs-breadcrumb';\nimport { ESBreadcrumbsCollapseComponent } from './components/breadcrumbs-collapse';\n\nimport { ESBreadcrumbsMoreDirective } from './directives/breadcrumbs-more.directive';\nimport { ESBreadcrumbsSeparatorDirective } from './directives/breadcrumbs-separator.directive';\nimport { ESBreadcrumbsBackDirective } from './directives/breadcrumbs-back.directive';\n\n@NgModule({\n  declarations: [\n    ESBreadcrumbsComponent,\n\n    ESBreadcrumbsBreadcrumbComponent,\n    ESBreadcrumbsCollapseComponent,\n\n    ESBreadcrumbsMoreDirective,\n    ESBreadcrumbsSeparatorDirective,\n    ESBreadcrumbsBackDirective\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    MatButtonModule,\n    MatIconModule,\n    MatMenuModule,\n    MatRippleModule\n  ],\n  exports: [\n    ESBreadcrumbsComponent,\n    ESBreadcrumbsMoreDirective,\n    ESBreadcrumbsSeparatorDirective,\n    ESBreadcrumbsBackDirective\n  ],\n  providers: [ESBreadcrumbsResolver]\n})\nexport class ESBreadcrumbsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ESBreadcrumbsResolver"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESBreadcrumbsBackDirective"
                        },
                        {
                            "name": "ESBreadcrumbsBreadcrumbComponent"
                        },
                        {
                            "name": "ESBreadcrumbsCollapseComponent"
                        },
                        {
                            "name": "ESBreadcrumbsComponent"
                        },
                        {
                            "name": "ESBreadcrumbsMoreDirective"
                        },
                        {
                            "name": "ESBreadcrumbsSeparatorDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESBreadcrumbsBackDirective"
                        },
                        {
                            "name": "ESBreadcrumbsComponent"
                        },
                        {
                            "name": "ESBreadcrumbsMoreDirective"
                        },
                        {
                            "name": "ESBreadcrumbsSeparatorDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESDropzoneModule",
            "id": "module-ESDropzoneModule-707c7e70a753b9cf339263d05d8bcb8a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/dropzone/dropzone.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatRippleModule } from '@angular/material/core';\n\nimport { ESDropzoneComponent } from './dropzone.component';\n\n@NgModule({\n  declarations: [ESDropzoneComponent],\n  imports: [CommonModule, MatButtonModule, MatIconModule, MatRippleModule, HttpClientModule],\n  exports: [ESDropzoneComponent]\n})\nexport class ESDropzoneModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESDropzoneComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESDropzoneComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESEmptyStateModule",
            "id": "module-ESEmptyStateModule-0a14431d31e9507a0cc4d6c208f8bf0f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/empty-state/empty-state.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { ESEmptyStateComponent } from './empty-state.component';\n\n@NgModule({\n  declarations: [ESEmptyStateComponent],\n  imports: [CommonModule, MatIconModule],\n  exports: [ESEmptyStateComponent]\n})\nexport class ESEmptyStateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESEmptyStateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESEmptyStateComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESInlineFormFieldModule",
            "id": "module-ESInlineFormFieldModule-0a7e158a2b2aa3ae498dfc356abc639d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/inline-form-field/inline-form-field.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { ESInlineFormFieldComponent } from './inline-form-field.component';\n\n@NgModule({\n  declarations: [ESInlineFormFieldComponent],\n  imports: [CommonModule, MatButtonModule, MatIconModule],\n  exports: [ESInlineFormFieldComponent]\n})\nexport class ESInlineFormFieldModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESInlineFormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESInlineFormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESPaginatorModule",
            "id": "module-ESPaginatorModule-fb624636a369da9129bf311129f8b78b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/paginator/paginator.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { ESPaginatorComponent } from './paginator.component';\nimport { ESTooltipModule } from '../tooltip';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n\n    MatButtonModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatSelectModule,\n    ESTooltipModule\n  ],\n  exports: [ESPaginatorComponent],\n  declarations: [ESPaginatorComponent]\n})\nexport class ESPaginatorModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESPaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESPaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ESTooltipModule",
            "id": "module-ESTooltipModule-447b66a772983130d5f4beadb40c61ab",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\nimport { MatCommonModule } from '@angular/material/core';\nimport { MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/tooltip';\n\nimport { ESTooltipDirective } from './tooltip.directive';\nimport { ESTooltipComponent } from './tooltip.component';\n\n@NgModule({\n  imports: [CommonModule, A11yModule, OverlayModule, MatCommonModule],\n  exports: [ESTooltipDirective, ESTooltipComponent, CdkScrollableModule, MatCommonModule],\n  declarations: [ESTooltipDirective, ESTooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class ESTooltipModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ESTooltipComponent"
                        },
                        {
                            "name": "ESTooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ESTooltipComponent"
                        },
                        {
                            "name": "ESTooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InlineFormFieldStoryBasicModule",
            "id": "module-InlineFormFieldStoryBasicModule-47f2b459cf7b6c94637391e844e1c8b5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-basic/inline-form-field-story-basic.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { InlineFormFieldStoryBasicComponent } from './inline-form-field-story-basic.component';\n\nimport { ESInlineFormFieldModule } from '../..';\n\n@NgModule({\n  declarations: [InlineFormFieldStoryBasicComponent],\n  imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule, ESInlineFormFieldModule],\n  exports: [InlineFormFieldStoryBasicComponent]\n})\nexport class InlineFormFieldStoryBasicModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InlineFormFieldStoryBasicComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESInlineFormFieldModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InlineFormFieldStoryBasicComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InlineFormFieldStoryCompositionModule",
            "id": "module-InlineFormFieldStoryCompositionModule-bc75a3bb75ba1e488d5b7339d4d0204c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-composition/inline-form-field-story-composition.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { InlineFormFieldStoryCompositionComponent } from './inline-form-field-story-composition.component';\n\nimport { ESInlineFormFieldModule } from '../..';\n\n@NgModule({\n  declarations: [InlineFormFieldStoryCompositionComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n\n    MatDatepickerModule,\n    MatNativeDateModule,\n\n    MatButtonModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatSelectModule,\n\n    ESInlineFormFieldModule\n  ],\n  exports: [InlineFormFieldStoryCompositionComponent]\n})\nexport class InlineFormFieldStoryCompositionModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InlineFormFieldStoryCompositionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESInlineFormFieldModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InlineFormFieldStoryCompositionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InlineFormFieldStoryTypographyModule",
            "id": "module-InlineFormFieldStoryTypographyModule-2ca0a213f0e36d7b9ca70787cbd853af",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { InlineFormFieldStoryTypographyComponent } from './inline-form-field-story-typography.component';\n\nimport { ESInlineFormFieldModule } from '../..';\n\n@NgModule({\n  declarations: [InlineFormFieldStoryTypographyComponent],\n  imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule, ESInlineFormFieldModule],\n  exports: [InlineFormFieldStoryTypographyComponent]\n})\nexport class InlineFormFieldStoryTypographyModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InlineFormFieldStoryTypographyComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESInlineFormFieldModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InlineFormFieldStoryTypographyComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InlineFormFieldStoryValidationModule",
            "id": "module-InlineFormFieldStoryValidationModule-3b712d995f04f874c853c5548a935736",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { InlineFormFieldStoryValidationComponent } from './inline-form-field-story-validation.component';\n\nimport { ESInlineFormFieldModule } from '../..';\n\n@NgModule({\n  declarations: [InlineFormFieldStoryValidationComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ESInlineFormFieldModule\n  ],\n  exports: [InlineFormFieldStoryValidationComponent]\n})\nexport class InlineFormFieldStoryValidationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InlineFormFieldStoryValidationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESInlineFormFieldModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InlineFormFieldStoryValidationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginatorStoryBasicModule",
            "id": "module-PaginatorStoryBasicModule-85ab12de85a96ecb70a273a0d3b170e5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/paginator/__stories__/paginator-story-basic/paginator-story-basic.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PaginatorStoryBasicComponent } from './paginator-story-basic.component';\n\nimport { ESPaginatorModule } from '../..';\n\n@NgModule({\n  declarations: [PaginatorStoryBasicComponent],\n  imports: [CommonModule, ESPaginatorModule],\n  exports: [PaginatorStoryBasicComponent]\n})\nexport class PaginatorStoryBasicModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginatorStoryBasicComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESPaginatorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginatorStoryBasicComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipStoryBasicModule",
            "id": "module-TooltipStoryBasicModule-e6c7ad7c93675249e78ece493e8afaa9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-basic/tooltip-story-basic.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TooltipStoryBasicComponent } from './tooltip-story-basic.component';\n\nimport { ESTooltipModule } from '../..';\n\n@NgModule({\n  declarations: [TooltipStoryBasicComponent],\n  imports: [CommonModule, MatButtonModule, ESTooltipModule],\n  exports: [TooltipStoryBasicComponent]\n})\nexport class TooltipStoryBasicModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipStoryBasicComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipStoryBasicComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipStoryInteractiveModule",
            "id": "module-TooltipStoryInteractiveModule-21282480131123124b5d91677eeffad6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-interactive/tooltip-story-interactive.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TooltipStoryInteractiveComponent } from './tooltip-story-interactive.component';\n\nimport { ESTooltipModule } from '../..';\n\n@NgModule({\n  declarations: [TooltipStoryInteractiveComponent],\n  imports: [CommonModule, MatButtonModule, ESTooltipModule],\n  exports: [TooltipStoryInteractiveComponent]\n})\nexport class TooltipStoryInteractiveModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipStoryInteractiveComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipStoryInteractiveComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipStoryListenersModule",
            "id": "module-TooltipStoryListenersModule-cb68b6b23cac651c12802d04e258dcb0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-listeners/tooltip-story-listeners.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TooltipStoryListenersComponent } from './tooltip-story-listeners.component';\n\nimport { ESTooltipModule } from '../..';\n\n@NgModule({\n  declarations: [TooltipStoryListenersComponent],\n  imports: [CommonModule, MatButtonModule, ESTooltipModule],\n  exports: [TooltipStoryListenersComponent]\n})\nexport class TooltipStoryListenersModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipStoryListenersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipStoryListenersComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipStoryThemingModule",
            "id": "module-TooltipStoryThemingModule-29c0261006b863b22624059cd0135fd8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-theming/tooltip-story-theming.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TooltipStoryThemingComponent } from './tooltip-story-theming.component';\n\nimport { ESTooltipModule } from '../..';\n\n@NgModule({\n  declarations: [TooltipStoryThemingComponent],\n  imports: [CommonModule, MatButtonModule, ESTooltipModule],\n  exports: [TooltipStoryThemingComponent]\n})\nexport class TooltipStoryThemingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipStoryThemingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ESTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipStoryThemingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACTION_HEADING_STORY_BASIC_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/action-heading/__stories__/action-heading-story-basic/action-heading-story-basic.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n    <es-action-heading\n      [text]=\"text\"\n      [type]=\"type\"\n      [typography]=\"typography\"\n      [actionLabel]=\"actionLabel\"\n      [actionIcon]=\"actionIcon\"\n      [actionSvgIcon]=\"actionSvgIcon\"\n      [color]=\"color\"\n      (action)=\"onAction()\">\n    </es-action-heading>\n  `\n}"
            },
            {
                "name": "ALERT_STORY_ACTIONS_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/alert/__stories__/alert-story-actions/alert-story-actions.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-alert>\n    Message\n    <es-alert-actions>\n      <button mat-flat-button (click)=\"onAction()\">Action</button>\n      <button mat-button (click)=\"onCancel()\">Cancel</button>\n    </es-alert-actions>\n  </es-alert>\n  `\n}"
            },
            {
                "name": "ALERT_STORY_BASIC_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/alert/__stories__/alert-story-basic/alert-story-basic.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-alert variant=\"info\">Message</es-alert>\n\n  <es-alert closable (closed)=\"onClose()\">Message</es-alert>\n  `\n}"
            },
            {
                "name": "ALERT_STORY_ICON_MAPPING_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/alert/__stories__/alert-story-icon-mapping/alert-story-icon-mapping.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ts: `\n  import { ES_ALERT_DEFAULT_OPTIONS } from '@elonkit/angular/ui/alert';\n\n  @NgModule({\n    ...\n    providers: [{\n      provide: ES_ALERT_DEFAULT_OPTIONS,\n      useValue: {\n        iconMapping: {\n          warning: { svgIcon: 'warning' },\n          error: { svgIcon: 'error' }\n        }\n      }\n    }]\n  })\n  export class AppModule {}\n  `,\n  html: `\n  <es-alert variant=\"default\" icon=\"new_releases\">\n    Message\n  </es-alert>\n\n  <es-alert variant=\"info\" svgIcon=\"warning\">\n    Message\n  </es-alert>\n\n  <es-alert variant=\"success\">\n    Message\n  </es-alert>\n\n  <es-alert variant=\"warning\">\n    Message\n  </es-alert>\n\n  <es-alert variant=\"error\">\n    Message\n  </es-alert>\n  `\n}"
            },
            {
                "name": "AUTOCOMPLETE_MULTIPLE_STORY_SERVICE_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ts: `\n  import { Component, Input, ViewEncapsulation } from '@angular/core';\n  import { FormBuilder, FormGroup } from '@angular/forms';\n\n  import { of } from 'rxjs';\n  import { map, tap } from 'rxjs/operators';\n\n  import { AutocompleteMultipleStoryService } from './autocomplete-multiple-story-service.service';\n\n  @Component({\n    selector: 'es-autocomplete-multiple-story-service',\n    styleUrls: ['./autocomplete-multiple-story-service.component.scss'],\n    encapsulation: ViewEncapsulation.None\n  })\n  export class AutocompleteMultipleStoryServiceComponent {\n    @Input() public width: number;\n\n    @Input() public showedOptionCount = null;\n\n    @Input() public required: boolean;\n\n    @Input() public disabled: boolean;\n\n    public form: FormGroup;\n\n    public totalOptionCount: number;\n\n    constructor(private service: AutocompleteMultipleStoryService, private formBuilder: FormBuilder) {\n      this.form = this.formBuilder.group({\n        autocomplete: [\n          [\n            { id: 3, name: 'Norway' },\n            { id: 9, name: 'Portugal' },\n            { id: 10, name: 'Russia' }\n          ]\n        ]\n      });\n    }\n\n    public searchService = (text: string, options?: any[]) => {\n      const lowerText = text ? text.toLowerCase() : '';\n\n      this.totalOptionCount = 0;\n\n      if (options) {\n        return of(options.filter((option) => option.name.toLowerCase().includes(lowerText))).pipe(\n          tap((o) => {\n            this.totalOptionCount = o.length;\n          })\n        );\n      } else {\n        return this.service.getOptions(lowerText, this.showedOptionCount).pipe(\n          map((o) => {\n            this.totalOptionCount = o.totalCount;\n\n            return o.options;\n          })\n        );\n      }\n    };\n\n    public displayWith = (value: { id: number; name: string }) => value.name;\n  }\n\n  `,\n  html: `\n  <form class=\"es-autocomplete-multiple-story-service\" [formGroup]=\"form\">\n    <mat-form-field\n      appearance=\"outline\"\n      class=\"es-autocomplete-multiple-story-service__field\"\n      [ngStyle]=\"{ 'width.px': width }\"\n    >\n      <mat-label>Country</mat-label>\n\n      <es-autocomplete-multiple\n        formControlName=\"autocomplete\"\n        [service]=\"searchService\"\n        [required]=\"required\"\n        [disabled]=\"disabled\"\n        [optionsCount]=\"totalOptionCount\"\n        [displayWith]=\"displayWith\"\n      ></es-autocomplete-multiple>\n    </mat-form-field>\n  </form>\n  `\n}"
            },
            {
                "name": "AVATAR_STORY_GROUP_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-group/avatar-story-group.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-avatar-group\n    [size]=\"size\"\n  >\n    <es-avatar\n      [size]=\"size\"\n      [alt]=\"alt\"\n      [src]=\"src\"\n    ></es-avatar>\n    <es-avatar\n      [size]=\"size\"\n      [alt]=\"alt\"\n      [src]=\"src\"\n    ></es-avatar>\n    <es-avatar\n      [size]=\"size\"\n      [alt]=\"alt\"\n      [src]=\"src\"\n    ></es-avatar>\n  </es-avatar-group>\n  `\n}"
            },
            {
                "name": "AVATAR_STORY_IMAGE_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-image/avatar-story-image.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-avatar\n    [size]=\"size\"\n    [alt]=\"alt\"\n    [src]=\"src\"\n    [variant]=\"variant\"\n  ></es-avatar>\n  `\n}"
            },
            {
                "name": "AVATAR_STORY_NO_IMAGE_ICON_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-no-image-icon/avatar-story-no-image-icon.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-avatar\n    [size]=\"size\"\n    [variant]=\"variant\"\n  >\n    <mat-icon>person</mat-icon>\n  </es-avatar>\n  `\n}"
            },
            {
                "name": "AVATAR_STORY_NO_IMAGE_TYPOGRAPHY_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-no-image-typography/avatar-story-no-image-typography.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-avatar\n    [size]=\"size\"\n    [variant]=\"variant\"\n    НФ\n  </es-avatar>`\n}"
            },
            {
                "name": "BREADCRUMBS_STORY_BASIC_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-breadcrumbs [withBackButton]=\"withBackButton\"></es-breadcrumbs>\n  `,\n  ts: `\n  import { ESBreadcrumbsModule, ESBreadcrumbsResolver } from '@elonkit/angular/ui/breadcrumbs';\n\n  const ROUTES = [\n    {\n      path: '',\n      data: {\n        breadcrumb: { icon: 'home', ariaLabel: 'Home' },\n      },\n      resolve: {\n        breadcrumb: ESBreadcrumbsResolver\n      },\n      children: [\n        {\n          path: '',\n          component: HomeComponent\n        },\n        {\n          path: 'categories',\n          data: {\n            breadcrumb: { label: 'Categories' }\n          },\n          resolve: {\n            data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n            breadcrumb: ESBreadcrumbsResolver\n          },\n          children: [\n            {\n              path: '',\n              component: CategoriesListComponent\n            },\n            {\n              path: ':category',\n              resolve: {\n                data: CategoriesShowResolver,\n                breadcrumb: CategoriesShowBreadcrumbsResolver\n              },\n              children: [\n                {\n                  path: '',\n                  component: ItemsListComponent,\n                  resolve: {\n                    data: ItemsListResolver\n                  }\n                },\n                {\n                  path: ':item',\n                  resolve: {\n                    data: ItemsShowResolver\n                  },\n                  children: [\n                    {\n                      path: '',\n                      resolve: {\n                        breadcrumb: ItemsShowBreadcrumbsResolver\n                      },\n                      children: [\n                        {\n                          path: '',\n                          component: ItemsShowComponent\n                        },\n                        {\n                          path: 'edit',\n                          component: ItemsEditComponent,\n                          data: {\n                            breadcrumb: { label: 'Edit' }\n                          },\n                          resolve: {\n                            breadcrumb: ESBreadcrumbsResolver\n                          }\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ];\n\n  @NgModule({\n    imports: [..., ESBreadcrumbsModule, RouterModule.forRoot(ROUTES)],\n    ...\n  })\n  export class AppModule {}\n  `\n}"
            },
            {
                "name": "BREADCRUMBS_STORY_CUSTOMIZATION_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ts: `\n  import { ES_BREADCRUMBS_DEFAULT_SIZES } from '@elonkit/angular/ui/breadcrumbs';\n\n  ...\n\n  public sizes = {\n    ...ES_BREADCRUMBS_DEFAULT_SIZES,\n    separator: 24\n  };\n  `,\n  html: `\n  <es-breadcrumbs typography=\"mat-body-2\" [sizes]=\"sizes\" [withBackButton]=\"withBackButton\">\n    <mat-icon *esBreadcrumbsSeparator class=\"es-breadcrumbs__separator\">\n      chevron_right\n    </mat-icon>\n    <mat-icon *esBreadcrumbsBack>\n      keyboard_backspace\n    </mat-icon>\n    <mat-icon *esBreadcrumbsMore>\n      more_horiz\n    </mat-icon>\n  </es-breadcrumbs>\n  `,\n  scss: `\n  .es-breadcrumbs__separator {\n    margin: 0;\n  }\n  `\n}"
            },
            {
                "name": "CATEGORIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 1,\n    title: `Category #1`\n  },\n  {\n    id: 2,\n    title: `Category #2`\n  },\n  {\n    id: 3,\n    title: `Category #3`\n  }\n]"
            },
            {
                "name": "CATEGORIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 1,\n    title: `Category #1`\n  },\n  {\n    id: 2,\n    title: `Category #2`\n  },\n  {\n    id: 3,\n    title: `Category #3`\n  }\n]"
            },
            {
                "name": "Colors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/theming/__stories__/colors/colors.component.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "React.FC",
                "defaultValue": "() => {\n  return (\n    <div className='es-colors-story es-body-200'>\n      {Object.keys(PALETTES).map((palette) => (\n        <div key={palette} className='es-colors-story__palette'>\n          <h6 className='es-colors-story__title mat-h4'>{palette}</h6>\n          <div className='es-colors-story__colors'>\n            {PALETTES[palette].map((hue) => (\n              <div\n                key={hue}\n                className={`es-colors-story__color es-colors-story__color_${palette}_${hue}`}\n              >\n                {hue}\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}"
            },
            {
                "name": "DEFAULT_ICON_MAPPING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/alert/alert.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  default: { icon: 'info' },\n  info: { icon: 'info' },\n  success: { icon: 'check_circle' },\n  warning: { icon: 'warning' },\n  error: { icon: 'error' }\n}"
            },
            {
                "name": "DEFAULT_LANGUAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/locale/locale.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'en'"
            },
            {
                "name": "DEFAULT_TITLE_TYPOGRAPHY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/alert/alert.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'es-body-100'"
            },
            {
                "name": "DEFAULT_TYPOGRAPHY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/alert/alert.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'es-body-100'"
            },
            {
                "name": "DEFAULT_TYPOGRAPHY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'es-body-200'"
            },
            {
                "name": "DROPZONE_STORY_BASIC_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-basic/dropzone-story-basic.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ts: `\n  export class AppComponent {\n    public docs = new FormControl([]);\n  }\n  `,\n  html: `\n  <div class=\"dropzone\">\n    <es-dropzone\n      [heading]=\"heading\"\n      [subheading]=\"subheading\"\n      [maxSize]=\"maxSize\"\n      [accept]=\"accept\"\n      [type]=\"type\"\n      [formControl]=\"docs\"\n      (validate)=\"validate($event)\"\n    >\n      <mat-hint>This is an example of a hint message</mat-hint>\n    </es-dropzone>\n  </div>\n  `\n}"
            },
            {
                "name": "DROPZONE_STORY_CUSTOM_ICON_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-custom-icon/dropzone-story-custom-icon.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ts: `\n  export class AppComponent {\n    public form = new FormGroup({\n      docs: new FormControl([])\n    });\n\n    constructor(private iconRegistry: MatIconRegistry, private sanitizer: DomSanitizer) {\n      iconRegistry.addSvgIcon(\n        'upload',\n        sanitizer.bypassSecurityTrustResourceUrl('/icons/upload.svg')\n      );\n    }\n  }\n  `,\n  html: `\n  <form class=\"form\" [formGroup]=\"form\">\n    <es-dropzone\n      heading=\"CHOOSE FILES\"\n      subheading=\"or drag files in this area (max size: 50 MB)\"\n      svgIcon=\"upload\"\n      formControlName=\"docs\"\n    >\n      <mat-hint>This is an example of a hint message</mat-hint>\n    </es-dropzone>\n  </form>\n  `\n}"
            },
            {
                "name": "DROPZONE_STORY_REQUIRED_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-required/dropzone-story-required.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ts: `\n  export class AppComponent {\n    public form = new FormGroup({\n      docs: new FormControl([], Validators.required)\n    });\n    ...\n    public onSubmit(form: any) {}\n  }\n  `,\n  html: `\n  <form #f=\"ngForm\" class=\"form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit(f)\">\n    <es-dropzone\n      chooseText=\"CHOOSE FILES\"\n      dragText=\"or drag files in this area (max size: 50 MB)\"\n      formControlName=\"docs\"\n    >\n      <mat-hint>This is an example of a hint message</mat-hint>\n      <mat-error>Select at least one file</mat-error>\n    </es-dropzone>\n    <button class=\"form__submit\" color=\"primary\" mat-raised-button type=\"submit\">Submit</button>\n  </form>\n  `,\n  scss: `\n  .form {\n    max-width: 400px;\n\n    &__submit {\n      margin-top: 15px;\n      text-transform: uppercase;\n    }\n  }\n  `\n}"
            },
            {
                "name": "EMPTY_STATE_STORY_BASIC_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/empty-state/__stories__/empty-state-story-basic/empty-state-story-basic.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-empty-state></es-empty-state>\n  `\n}"
            },
            {
                "name": "EMPTY_STATE_STORY_BUTTON_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/empty-state/__stories__/empty-state-story-button/empty-state-story-button.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-empty-state>\n    <button mat-stroked-button color=\"primary\">CREATE NEW</button>\n  </es-empty-state>\n  `\n}"
            },
            {
                "name": "en",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/locale/locales/en.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  alert: {\n    labelClose: 'Close'\n  },\n  breadcrumbs: {\n    labelMore: 'More',\n    labelBack: 'Back'\n  },\n  inlineFormField: {\n    labelEdit: 'Edit',\n    labelSave: 'Save',\n    labelCancel: 'Cancel'\n  },\n  paginator: {\n    labelItemsPerPage: 'Items per page',\n    labelOf: 'of',\n    labelPrev: 'Previous page',\n    labelNext: 'Next page',\n    labelGoTo: 'Go to page',\n    labelPage: 'page'\n  },\n  timepicker: {\n    labelHH: 'HH',\n    labelMM: 'MM',\n    labelSS: 'SS'\n  },\n  audioPlayer: {\n    labelPlay: 'Play',\n    labelPause: 'Pause',\n    labelMute: 'Mute',\n    labelUnmute: 'Unmute',\n    labelOptions: 'Options',\n    labelRate: 'Rate',\n    labelDownload: 'Download',\n    labelBack: 'Back',\n    labelNormal: 'Normal'\n  },\n  avatar: {\n    labelAvatar: 'Avatar',\n    labelStatus: 'Status'\n  },\n  autocompliteMultiple: {\n    labelTabAll: 'All',\n    labelTabSelected: 'Selected',\n    labelTabNotSelected: 'Not selected',\n    labelShown: 'Shown',\n    labelOf: 'of',\n    labelSelected: 'Selected',\n    labelAllSelected: 'All selected',\n    labelSearchScopeAll: 'Search scope all',\n    labelSearchScopeSelected: 'Search scope Selected',\n    labelSearchScopeNotSelected: 'Search scope Not selected',\n\n    labelClear: 'Clear',\n    labelCloseMenu: ' Close menu',\n    labelChoose: 'Choose',\n    labelChooseAll: 'Choose all',\n    labelOpenMenu: 'Open menu',\n    labelRemoveAll: 'Remove all',\n    labelRemoveChoice: 'Remove choice',\n    labelSearch: 'Search',\n    labelShowSelected: 'Show selected'\n  }\n}"
            },
            {
                "name": "ES_ACTION_HEADING_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/action-heading/action-heading.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESActonHeadingDefaultOptions>(\n  'ES_ACTION_HEADING_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "ES_ALERT_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/alert/alert.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESAlertDefaultOptions>(\n  'ES_ALERT_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "ES_AUTOCOMPLETE_ANIMATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  trigger('panel', [\n    state('void', style({ transform: 'scaleY(0.8)', opacity: 0 })),\n    state('*', style({ opacity: 1, transform: 'scaleY(1)' })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n  ])\n]"
            },
            {
                "name": "ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESAutocompleteMultipleDefaultOptions>(\n  'ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  chipLeftMargin: 4,\n  countBadgeMaxWidth: 40\n}"
            },
            {
                "name": "ES_AVATAR_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESAvatarDefaultOptions>(\n  'ES_AVATAR_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "ES_BREADCRUMBS_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESBreadcrumbsDefaultOptions>(\n  'ES_BREADCRUMBS_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "ES_BREADCRUMBS_DEFAULT_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  itemPadding: 4,\n  icon: 24,\n  iconMargin: 4,\n  menu: 20,\n  separator: 16,\n  more: 24\n}"
            },
            {
                "name": "ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'es-caption'"
            },
            {
                "name": "ES_DROPZONE_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/dropzone/dropzone.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESDropzoneDefaultOptions>(\n  'ES_DROPZONE_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "ES_EMPTY_STATE_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/empty-state/empty-state.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESEmptyStateDefaultOptions>(\n  'ES_EMPTY_STATE_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESInlineFormFieldDefaultOptions>(\n  'ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "ES_PAGINATOR_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/paginator/paginator.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESPaginatorDefaultOptions>(\n  'ES_PAGINATOR_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "ES_SVG_ICONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/icons/icons.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  'es-empty-state': [\n    'bell',\n    'box',\n    'cart',\n    'chat',\n    'face',\n    'file',\n    'filter',\n    'lock',\n    'search',\n    'smile',\n    'wi-fi',\n    'wi-fi-off'\n  ] as const,\n  'es-audio-player': [\n    'check',\n    'chevron-left',\n    'chevron-right',\n    'download',\n    'more-vert',\n    'mute',\n    'pause',\n    'play',\n    'speed',\n    'un-mute'\n  ] as const,\n  'es-autocomplete-multiple': ['clear-small', 'clear', 'magnify', 'menu-down', 'menu-up'] as const\n}"
            },
            {
                "name": "ES_TOOLTIP_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ESTooltipDefaultOptions>(\n  'ES_TOOLTIP_DEFAULT_OPTIONS'\n)"
            },
            {
                "name": "FOCUSABLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'a, button, input, textarea, select, details,[tabindex]:not([tabindex=\"-1\"])'"
            },
            {
                "name": "INLINE_FORM_FIELD_STORY_BASIC_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-basic/inline-form-field-story-basic.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-inline-form-field [text]=\"text\">\n    <mat-form-field>\n      <input [(ngModel)]=\"text\" matInput />\n    </mat-form-field>\n  </es-inline-form-field>\n  `\n}"
            },
            {
                "name": "INLINE_FORM_FIELD_STORY_COMPOSITION_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-composition/inline-form-field-story-composition.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-inline-form-field [text]=\"date | date: 'M/d/yyyy'\">\n    <mat-form-field>\n      <input [(ngModel)]=\"date\" matInput [matDatepicker]=\"picker\" />\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n  </es-inline-form-field>\n\n  <es-inline-form-field [text]=\"text\">\n    <mat-form-field>\n      <button matPrefix mat-icon-button>\n        <mat-icon>favorite</mat-icon>\n      </button>\n      <input [(ngModel)]=\"text\" matInput />\n      <button matSuffix mat-icon-button>\n        <mat-icon>thumb_up</mat-icon>\n      </button>\n    </mat-form-field>\n  </es-inline-form-field>\n\n  <es-inline-form-field [text]=\"select\">\n    <mat-form-field>\n      <mat-select [(ngModel)]=\"select\">\n        <mat-option value=\"Apple\">\n          Apple\n        </mat-option>\n        <mat-option value=\"Grape\">\n          Grape\n        </mat-option>\n        <mat-option value=\"Pineapple\">\n          Pineapple\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </es-inline-form-field>\n\n  <es-inline-form-field [text]=\"hint\">\n    <mat-form-field>\n      <input [(ngModel)]=\"hint\" matInput />\n      <mat-hint>This is a hint</mat-hint>\n    </mat-form-field>\n  </es-inline-form-field>\n  `\n}"
            },
            {
                "name": "INLINE_FORM_FIELD_STORY_TYPOGRAPHY_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-inline-form-field [text]=\"text\" typography=\"mat-h2\">\n    <mat-form-field>\n      <input [(ngModel)]=\"text\" matInput />\n    </mat-form-field>\n  </es-inline-form-field>\n  `\n}"
            },
            {
                "name": "INLINE_FORM_FIELD_STORY_VALIDATION_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ts: `\n  @Component({\n    ...\n  })\n  export class InlineFormFieldStoryValidationComponent {\n    form: FormGroup;\n\n    constructor(private changeDetector: ChangeDetectorRef, private formBuilder: FormBuilder) {\n      this.form = this.formBuilder.group({\n        text: ['Hello World', [Validators.required]],\n        server: 'Hello Server Side Validation'\n      });\n    }\n\n    onSave(inlineFormField: ESInlineFormFieldComponent) {\n      const value: string = this.form.get('server').value;\n\n      save(value).subscribe(\n        () => {\n          inlineFormField.setHidden(true);\n        },\n        errors => {\n          this.form.get('server').setErrors(errors);\n          this.changeDetector.detectChanges();\n        }\n      );\n    }\n  }\n  `,\n  html: `\n  <form [formGroup]=\"form\">\n    <es-inline-form-field [text]=\"form.get('text').value\">\n      <mat-form-field>\n        <input formControlName=\"text\" matInput />\n        <mat-error *ngIf=\"form.get('text').hasError('required')\">\n          This field is required\n        </mat-error>\n      </mat-form-field>\n    </es-inline-form-field>\n\n    <es-inline-form-field\n      [text]=\"form.get('server').value\"\n      [manualSave]=\"true\"\n      (save)=\"onSave($event)\"\n    >\n      <mat-form-field>\n        <input formControlName=\"server\" matInput />\n        <mat-error *ngIf=\"form.get('server').hasError('required')\">\n          This field is required\n        </mat-error>\n      </mat-form-field>\n    </es-inline-form-field>\n  </form>\n  `\n}"
            },
            {
                "name": "ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 1,\n    categoryId: 1,\n    title: `Item #1-1`\n  },\n  {\n    id: 2,\n    categoryId: 1,\n    title: `Item #1-2`\n  },\n  {\n    id: 3,\n    categoryId: 1,\n    title: `Item #1-3`\n  },\n  {\n    id: 4,\n    categoryId: 2,\n    title: `Item #2-1`\n  },\n  {\n    id: 5,\n    categoryId: 2,\n    title: `Item #2-2`\n  },\n  {\n    id: 6,\n    categoryId: 2,\n    title: `Item #2-3`\n  },\n  {\n    id: 7,\n    categoryId: 3,\n    title: `Item #3-1`\n  },\n  {\n    id: 8,\n    categoryId: 3,\n    title: `Item #3-2`\n  },\n  {\n    id: 9,\n    categoryId: 3,\n    title: `Item #3-3`\n  }\n]"
            },
            {
                "name": "ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 1,\n    categoryId: 1,\n    title: `Item #1-1`\n  },\n  {\n    id: 2,\n    categoryId: 1,\n    title: `Item #1-2`\n  },\n  {\n    id: 3,\n    categoryId: 1,\n    title: `Item #1-3`\n  },\n  {\n    id: 4,\n    categoryId: 2,\n    title: `Item #2-1`\n  },\n  {\n    id: 5,\n    categoryId: 2,\n    title: `Item #2-2`\n  },\n  {\n    id: 6,\n    categoryId: 2,\n    title: `Item #2-3`\n  },\n  {\n    id: 7,\n    categoryId: 3,\n    title: `Item #3-1`\n  },\n  {\n    id: 8,\n    categoryId: 3,\n    title: `Item #3-2`\n  },\n  {\n    id: 9,\n    categoryId: 3,\n    title: `Item #3-3`\n  }\n]"
            },
            {
                "name": "LONGPRESS_DELAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "500",
                "rawdescription": "Time between the user putting the pointer on a tooltip\ntrigger and the long press event being fired.",
                "description": "<p>Time between the user putting the pointer on a tooltip\ntrigger and the long press event being fired.</p>\n"
            },
            {
                "name": "MIN_PANEL_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "320"
            },
            {
                "name": "MOUSE_AIM_DELAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "300",
                "rawdescription": "Delay in ms before closing a tooltip when mouse moves towards the component.",
                "description": "<p>Delay in ms before closing a tooltip when mouse moves towards the component.</p>\n"
            },
            {
                "name": "MOUSE_LOCATIONS_TRACKED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "3",
                "rawdescription": "Number of past mouse locations to track.",
                "description": "<p>Number of past mouse locations to track.</p>\n"
            },
            {
                "name": "OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { id: 1, name: 'Estonia' },\n  { id: 2, name: 'Iceland' },\n  { id: 3, name: 'Norway' },\n  { id: 4, name: 'Lithuania' },\n  { id: 5, name: 'Sweden' },\n  { id: 6, name: 'Austria' },\n  { id: 7, name: 'Switzerland' },\n  { id: 8, name: 'Albania' },\n  { id: 9, name: 'Portugal' },\n  { id: 10, name: 'Russia' },\n  { id: 11, name: 'India' },\n  { id: 12, name: 'Oman' }\n]"
            },
            {
                "name": "PAGINATOR_STORY_BASIC_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/paginator/__stories__/paginator-story-basic/paginator-story-basic.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ts: `\n  @Component({\n    ...\n  })\n  export class PaginatableDataComponent {\n    count = 100;\n\n    page = 1;\n    pageSize = 5;\n\n    onPageChange(page: number) {\n      this.page = page;\n    }\n\n    onPageSizeChange(pageSize: number) {\n      this.pageSize = pageSize;\n      this.page = 1;\n    }\n  }\n  `,\n  html: `\n  <es-paginator\n    [count]=\"count\"\n    [page]=\"page\"\n    [pageSize]=\"pageSize\"\n    (pageChange)=\"onPageChange($event)\"\n    (pageSizeChange)=\"onPageSizeChange($event)\"\n  ></es-paginator>\n  `\n}"
            },
            {
                "name": "PAGINATOR_STORY_PAGE_SIZE_OPTIONS_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/paginator/__stories__/paginator-story-page-size-options/paginator-story-page-size-options.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <es-paginator\n    [count]=\"count\"\n    [page]=\"page\"\n    [pageSize]=\"pageSize\"\n    [pageSizeOptions]=\"[5, 6, 7, 8, 9, 10]\"\n    (pageChange)=\"onPageChange($event)\"\n    (pageSizeChange)=\"onPageSizeChange($event)\"\n  ></es-paginator>\n  `\n}"
            },
            {
                "name": "PALETTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/theming/__stories__/colors/colors.component.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  primary: [\n    '50',\n    '100',\n    '200',\n    '300',\n    '400',\n    '500',\n    '600',\n    '700',\n    '800',\n    '900',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900',\n  ],\n  accent: [\n    '50',\n    '100',\n    '200',\n    '300',\n    '400',\n    '500',\n    '600',\n    '700',\n    '800',\n    '900',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900',\n  ],\n  warn: [\n    '50',\n    '100',\n    '200',\n    '300',\n    '400',\n    '500',\n    '600',\n    '700',\n    '800',\n    '900',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900',\n  ],\n  info: ['500', 'A50', 'A75', 'A100', 'A150', 'A200', 'A300', 'A400', 'A500'],\n  positive: ['500', 'A50', 'A75', 'A100', 'A150', 'A200', 'A300', 'A400', 'A500'],\n  attention: ['500', 'A50', 'A75', 'A100', 'A150', 'A200', 'A300', 'A400', 'A500'],\n  'mono-a': [\n    '500',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900'\n  ],\n  'mono-b': [\n    '500',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900'\n  ],\n  grayscale: ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900'],\n  surface: ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900', 'on'],\n  white: [\n    '500',\n    'A50',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A600',\n    'A700',\n    'A800',\n    'A900'\n  ],\n  black: [\n    '500',\n    'A50',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A600',\n    'A700',\n    'A800',\n    'A900'\n  ],\n  other: [\n    'background',\n    'background-2',\n    'overlay-gallery',\n    'overlay-modal',\n    'overlay-filter',\n    'link',\n    'link-visited',\n    'switch'\n  ]\n}"
            },
            {
                "name": "passiveListenerOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "normalizePassiveListenerOptions({ passive: true })",
                "rawdescription": "Options used to bind passive event listeners.",
                "description": "<p>Options used to bind passive event listeners.</p>\n"
            },
            {
                "name": "resizeObserver",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/utils/resize-observer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(target: HTMLElement) => {\n  return new Observable<void>((observer) => {\n    let width = target.clientWidth;\n\n    // @ts-ignore\n    const resizeObserver = new ResizeObserver((entries: any[]) => {\n      entries.forEach((entry) => {\n        if (entry.contentRect) {\n          if (width !== entry.contentRect.width) {\n            width = entry.contentRect.width;\n            observer.next();\n          }\n        }\n      });\n    });\n\n    resizeObserver.observe(target);\n\n    const unsubscribe = () => {\n      resizeObserver.disconnect();\n    };\n\n    return unsubscribe;\n  });\n}"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    path: '',\n    data: {\n      breadcrumb: { icon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsLeafComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsLeafComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsLeafComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsLeafComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsLeafComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    path: '',\n    data: {\n      breadcrumb: { svgIcon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsStoryBasicHomeComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsStoryBasicCategoriesListComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsStoryBasicItemsListComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsStoryBasicItemsShowComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsStoryBasicItemsEditComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    path: '',\n    data: {\n      breadcrumb: { icon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsStoryBasicHomeComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsStoryBasicCategoriesListComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsStoryBasicItemsListComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsStoryBasicItemsShowComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsStoryBasicItemsEditComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]"
            },
            {
                "name": "ru",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/locale/locales/ru.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  alert: {\n    labelClose: 'Закрыть'\n  },\n  breadcrumbs: {\n    labelMore: 'Ещё',\n    labelBack: 'Назад'\n  },\n  inlineFormField: {\n    labelEdit: 'Редактировать',\n    labelSave: 'Сохранить',\n    labelCancel: 'Отменить'\n  },\n  paginator: {\n    labelItemsPerPage: 'Показывать по',\n    labelOf: 'из',\n    labelPrev: 'Предыдущая страница',\n    labelNext: 'Следующая страница',\n    labelGoTo: 'Перейти на страницу',\n    labelPage: 'стр'\n  },\n  timepicker: {\n    labelHH: 'ЧЧ',\n    labelMM: 'ММ',\n    labelSS: 'СС'\n  },\n  audioPlayer: {\n    labelPlay: 'Слушать',\n    labelPause: 'Пауза',\n    labelMute: 'Выключить звук',\n    labelUnmute: 'Включить звук',\n    labelOptions: 'Опции',\n    labelRate: 'Скорость',\n    labelDownload: 'Скачать',\n    labelBack: 'Назад',\n    labelNormal: 'Обычная'\n  },\n  avatar: {\n    labelAvatar: 'Аватар',\n    labelStatus: 'Статус'\n  },\n  autocompliteMultiple: {\n    labelTabAll: 'Все',\n    labelTabSelected: 'Выбранные',\n    labelTabNotSelected: 'Не выбранные',\n    labelShown: 'Показано',\n    labelOf: 'из',\n    labelAllSelected: 'Все выбранные',\n    labelSelected: 'Выбрано',\n    labelSearchScopeAll: 'Область поиска Все',\n    labelSearchScopeSelected: 'Область поиска Выбранные',\n    labelSearchScopeNotSelected: 'Область поиска Не выбранные',\n\n    labelClear: 'Очистить',\n    labelCloseMenu: 'Закрыть меню',\n    labelChoose: 'Выбрать',\n    labelChooseAll: 'Выбрать все',\n    labelOpenMenu: 'Открыть меню',\n    labelRemoveAll: 'Удалить все',\n    labelRemoveChoice: 'Снять выбор',\n    labelSearch: 'Найти',\n    labelShowSelected: 'Показать выбранные'\n  }\n}"
            },
            {
                "name": "save",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: string) =>\n  of(value).pipe(\n    delay(100),\n    switchMap((v) => {\n      if (v.length) {\n        return of(v);\n      }\n      return throwError({ required: true });\n    })\n  )"
            },
            {
                "name": "SURFACE_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/surface/surface.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <div class=\"es-surface-50\">Surface 50</div>\n  <div class=\"es-surface-100\">Surface 100</div>\n  <div class=\"es-surface-200\">Surface 200</div>\n  <div class=\"es-surface-300\">Surface 300</div>\n  <div class=\"es-surface-400\">Surface 400</div>\n  <div class=\"es-surface-500\">Surface 500</div>\n  <div class=\"es-surface-600\">Surface 600</div>\n  <div class=\"es-surface-700\">Surface 700</div>\n  <div class=\"es-surface-800\">Surface 800</div>\n  <div class=\"es-surface-900\">Surface 900</div>\n  <div class=\"es-surface-on\">Surface On</div>\n  `\n}"
            },
            {
                "name": "TEXT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Hello World'"
            },
            {
                "name": "TEXT_MMULTILINE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`Hello World\nGood Morning World`"
            },
            {
                "name": "toFile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/dropzone/dropzone.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(type: string, file: File) =>\n  new Promise<ESDropzoneFile>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      resolve({\n        content: type === 'binary' ? file : (reader.result as string),\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        base64: reader.result as string\n      });\n    };\n    reader.onerror = (error) => reject(error);\n  })"
            },
            {
                "name": "TOOLTIP_MARGIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "12",
                "rawdescription": "Margin of .es-tooltip container",
                "description": "<p>Margin of .es-tooltip container</p>\n"
            },
            {
                "name": "TOOLTIP_PANEL_CLASS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'es-tooltip-panel'",
                "rawdescription": "CSS class that will be attached to the overlay panel.",
                "description": "<p>CSS class that will be attached to the overlay panel.</p>\n"
            },
            {
                "name": "TOOLTIP_STORY_BASIC_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-basic/tooltip-story-basic.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <button\n    mat-flat-button\n    color=\"primary\"\n    esTooltip=\"Information about the action\"\n    esTooltipArrow\n  >\n    Button\n  </button>\n  `\n}"
            },
            {
                "name": "TOOLTIP_STORY_INTERACTIVE_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-interactive/tooltip-story-interactive.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <button\n    mat-flat-button\n    color=\"primary\"\n    esTooltip\n    esTooltipArrow\n    esTooltipInteractive\n    [esTooltipContent]=\"content\"\n  >\n    Button\n  </button>\n  <ng-template #content>\n    This is a tooltip with an interactive content\n    <button mat-flat-button>Action</button>\n  </ng-template>\n  `\n}"
            },
            {
                "name": "TOOLTIP_STORY_LISTENERS_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-listeners/tooltip-story-listeners.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <button\n    mat-flat-button\n    color=\"primary\"\n    esTooltip\n    [esTooltipContent]=\"content\"\n    esTooltipArrow\n    esTooltipInteractive\n    esTooltipDisableFocusListener\n    esTooltipDisableCloseHoverListener\n    esTooltipDisableCloseClickListener\n  >\n    Button\n  </button>\n  <ng-template #content let-hide=\"hide\">\n    Click this button to close the tooltip.\n    <br /><br />\n    <button mat-flat-button (click)=\"hide()\">Close</button>\n  </ng-template>\n  `\n}"
            },
            {
                "name": "TOOLTIP_STORY_THEMING_SOURCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-theming/tooltip-story-theming.source.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  html: `\n  <button\n    mat-stroked-button\n    esTooltip=\"This is a customized tooltip\"\n    esTooltipArrow\n    esTooltipClass=\"es-tooltip_purple\"\n  >\n    1\n  </button>\n\n  <button\n    mat-stroked-button\n    esTooltip=\"This is a customized tooltip\"\n    esTooltipArrow\n    esTooltipClass=\"es-tooltip_marine\"\n  >\n    2\n  </button>\n  `,\n  scss: `\n  .es-tooltip {\n    &_purple {\n      @include es-tooltip-color(#9b78ff, #fff);\n    }\n\n    &_marine {\n      @include es-tooltip-color(#3acac0, #fff);\n    }\n  }\n  `\n}"
            },
            {
                "name": "typeMatchesFilenameExtension",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/utils/validate-file-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(type: string, fileName: string): boolean =>\n  type.charAt(0) === '.' && fileName.toLowerCase().endsWith(type)"
            },
            {
                "name": "typeMatchesFileType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/utils/validate-file-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(type: string, fileType: string): boolean =>\n  type.endsWith('/*') && fileType.startsWith(type.replace(/\\/.*$/, ''))"
            },
            {
                "name": "typesMatch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/utils/validate-file-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(types: string[], file: File): boolean =>\n  types.some(\n    (type) =>\n      type === file.type ||\n      typeMatchesFileType(type, file.type) ||\n      typeMatchesFilenameExtension(type, file.name)\n  )"
            },
            {
                "name": "Typography",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/theming/__stories__/typography/typography.component.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "React.FC",
                "defaultValue": "() => {\n  return (\n    <div className='es-typography-story es-body-100'>\n      <table>\n        <thead>\n          <tr>\n            <th style={{ width: '1px' }}>Class</th>\n            <th>Display</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <code>es-h1</code>\n            </td>\n            <td>\n              <div className='es-h1'>Heading 1</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h2</code>\n            </td>\n            <td>\n              <div className='es-h2'>Heading 2</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h3</code>\n            </td>\n            <td>\n              <div className='es-h3'>Heading 3</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h4</code>\n            </td>\n            <td>\n              <div className='es-h4'>Heading 4</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h5</code>\n            </td>\n            <td>\n              <div className='es-h5'>Heading 5</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h6</code>\n            </td>\n            <td>\n              <div className='es-h6'>Heading 6</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-subtitle-1</code>\n            </td>\n            <td>\n              <div className='es-subtitle-1'>Subtitle 1</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-subtitle-2</code>\n            </td>\n            <td>\n              <div className='es-subtitle-2'>Subtitle 2</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-400</code>\n            </td>\n            <td>\n              <div className='es-body-400'>Body 400</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-400-medium</code>\n            </td>\n            <td>\n              <div className='es-body-400-medium'>Body 400 | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-400-bold</code>\n            </td>\n            <td>\n              <div className='es-body-400-bold'>Body 400 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-300</code>\n            </td>\n            <td>\n              <div className='es-body-300'>Body 300</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-300-medium</code>\n            </td>\n            <td>\n              <div className='es-body-300-medium'>Body 300 | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-300-bold</code>\n            </td>\n            <td>\n              <div className='es-body-300-bold'>Body 300 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-200</code>\n            </td>\n            <td>\n              <div className='es-body-200'>Body 200</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-200-medium</code>\n            </td>\n            <td>\n              <div className='es-body-200-medium'>Body 200 | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-200-bold</code>\n            </td>\n            <td>\n              <div className='es-body-200-bold'>Body 200 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-100</code>\n            </td>\n            <td>\n              <div className='es-body-100'>Body 100</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-100-medium</code>\n            </td>\n            <td>\n              <div className='es-body-100-medium'>Body 100 | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-100-bold</code>\n            </td>\n            <td>\n              <div className='es-body-100-bold'>Body 100 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-button</code>\n            </td>\n            <td>\n              <div className='es-button'>BUTTON</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-caption</code>\n            </td>\n            <td>\n              <div className='es-caption'>Caption</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-caption-medium</code>\n            </td>\n            <td>\n              <div className='es-caption-medium'>Caption | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-caption-bold</code>\n            </td>\n            <td>\n              <div className='es-caption-bold'>Caption | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-overline</code>\n            </td>\n            <td>\n              <div className='es-overline'>OVERLINE</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-mini-200</code>\n            </td>\n            <td>\n              <div className='es-mini-200'>Mini 200</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-mini-100</code>\n            </td>\n            <td>\n              <div className='es-mini-100'>Mini 100</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-mini-100-bold</code>\n            </td>\n            <td>\n              <div className='es-mini-100-bold'>Mini 100 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-micro</code>\n            </td>\n            <td>\n              <div className='es-micro'>Micro</div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}"
            },
            {
                "name": "validateFileType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/elonkit/src/utils/validate-file-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(file: any, types: string): boolean => {\n  const typesArr = types.split(',').map((v) => v.trim());\n  return typesArr.includes('*') || typesMatch(typesArr, file);\n}"
            }
        ],
        "functions": [
            {
                "name": "Canvas",
                "file": "projects/elonkit/storybook/components/canvas/canvas.tsx",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFocusableElemets",
                "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "parent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "HTMLElement[]",
                "jsdoctags": [
                    {
                        "name": "parent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getInnerFocusableElement",
                "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNextFocusableElement",
                "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getPrevFocusableElement",
                "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "range",
                "file": "projects/elonkit/src/ui/paginator/paginator.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "start",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "end",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "start",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "end",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "slope",
                "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ESActionHeadingType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
                "file": "projects/elonkit/src/ui/action-heading/action-heading.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ESAlertVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"info\" | \"success\" | \"warning\" | \"error\"",
                "file": "projects/elonkit/src/ui/alert/alert.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ESEmptyStateIcon",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"bell\" | \"box\" | \"cart\" | \"chat\" | \"face\" | \"file\" | \"filter\" | \"lock\" | \"search\" | \"smile\" | \"wi-fi\" | \"wi-fi-off\"",
                "file": "projects/elonkit/src/ui/empty-state/empty-state.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ESLocale",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/elonkit/src/ui/locale/locale.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "ESAutocompleteMultipleSearchScope",
                "childs": [
                    {
                        "name": "ALL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "all"
                    },
                    {
                        "name": "SELECTED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "selected"
                    },
                    {
                        "name": "NOT_SELECTED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "not_selected"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.types.ts"
            },
            {
                "name": "ESAvatarVariant",
                "childs": [
                    {
                        "name": "Round",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "round"
                    },
                    {
                        "name": "Square",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "square"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/elonkit/src/ui/avatar/avatar.types.ts"
            }
        ],
        "groupedVariables": {
            "projects/elonkit/src/ui/action-heading/__stories__/action-heading-story-basic/action-heading-story-basic.source.ts": [
                {
                    "name": "ACTION_HEADING_STORY_BASIC_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/action-heading/__stories__/action-heading-story-basic/action-heading-story-basic.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n    <es-action-heading\n      [text]=\"text\"\n      [type]=\"type\"\n      [typography]=\"typography\"\n      [actionLabel]=\"actionLabel\"\n      [actionIcon]=\"actionIcon\"\n      [actionSvgIcon]=\"actionSvgIcon\"\n      [color]=\"color\"\n      (action)=\"onAction()\">\n    </es-action-heading>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/alert/__stories__/alert-story-actions/alert-story-actions.source.ts": [
                {
                    "name": "ALERT_STORY_ACTIONS_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/alert/__stories__/alert-story-actions/alert-story-actions.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-alert>\n    Message\n    <es-alert-actions>\n      <button mat-flat-button (click)=\"onAction()\">Action</button>\n      <button mat-button (click)=\"onCancel()\">Cancel</button>\n    </es-alert-actions>\n  </es-alert>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/alert/__stories__/alert-story-basic/alert-story-basic.source.ts": [
                {
                    "name": "ALERT_STORY_BASIC_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/alert/__stories__/alert-story-basic/alert-story-basic.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-alert variant=\"info\">Message</es-alert>\n\n  <es-alert closable (closed)=\"onClose()\">Message</es-alert>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/alert/__stories__/alert-story-icon-mapping/alert-story-icon-mapping.source.ts": [
                {
                    "name": "ALERT_STORY_ICON_MAPPING_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/alert/__stories__/alert-story-icon-mapping/alert-story-icon-mapping.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ts: `\n  import { ES_ALERT_DEFAULT_OPTIONS } from '@elonkit/angular/ui/alert';\n\n  @NgModule({\n    ...\n    providers: [{\n      provide: ES_ALERT_DEFAULT_OPTIONS,\n      useValue: {\n        iconMapping: {\n          warning: { svgIcon: 'warning' },\n          error: { svgIcon: 'error' }\n        }\n      }\n    }]\n  })\n  export class AppModule {}\n  `,\n  html: `\n  <es-alert variant=\"default\" icon=\"new_releases\">\n    Message\n  </es-alert>\n\n  <es-alert variant=\"info\" svgIcon=\"warning\">\n    Message\n  </es-alert>\n\n  <es-alert variant=\"success\">\n    Message\n  </es-alert>\n\n  <es-alert variant=\"warning\">\n    Message\n  </es-alert>\n\n  <es-alert variant=\"error\">\n    Message\n  </es-alert>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.source.ts": [
                {
                    "name": "AUTOCOMPLETE_MULTIPLE_STORY_SERVICE_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ts: `\n  import { Component, Input, ViewEncapsulation } from '@angular/core';\n  import { FormBuilder, FormGroup } from '@angular/forms';\n\n  import { of } from 'rxjs';\n  import { map, tap } from 'rxjs/operators';\n\n  import { AutocompleteMultipleStoryService } from './autocomplete-multiple-story-service.service';\n\n  @Component({\n    selector: 'es-autocomplete-multiple-story-service',\n    styleUrls: ['./autocomplete-multiple-story-service.component.scss'],\n    encapsulation: ViewEncapsulation.None\n  })\n  export class AutocompleteMultipleStoryServiceComponent {\n    @Input() public width: number;\n\n    @Input() public showedOptionCount = null;\n\n    @Input() public required: boolean;\n\n    @Input() public disabled: boolean;\n\n    public form: FormGroup;\n\n    public totalOptionCount: number;\n\n    constructor(private service: AutocompleteMultipleStoryService, private formBuilder: FormBuilder) {\n      this.form = this.formBuilder.group({\n        autocomplete: [\n          [\n            { id: 3, name: 'Norway' },\n            { id: 9, name: 'Portugal' },\n            { id: 10, name: 'Russia' }\n          ]\n        ]\n      });\n    }\n\n    public searchService = (text: string, options?: any[]) => {\n      const lowerText = text ? text.toLowerCase() : '';\n\n      this.totalOptionCount = 0;\n\n      if (options) {\n        return of(options.filter((option) => option.name.toLowerCase().includes(lowerText))).pipe(\n          tap((o) => {\n            this.totalOptionCount = o.length;\n          })\n        );\n      } else {\n        return this.service.getOptions(lowerText, this.showedOptionCount).pipe(\n          map((o) => {\n            this.totalOptionCount = o.totalCount;\n\n            return o.options;\n          })\n        );\n      }\n    };\n\n    public displayWith = (value: { id: number; name: string }) => value.name;\n  }\n\n  `,\n  html: `\n  <form class=\"es-autocomplete-multiple-story-service\" [formGroup]=\"form\">\n    <mat-form-field\n      appearance=\"outline\"\n      class=\"es-autocomplete-multiple-story-service__field\"\n      [ngStyle]=\"{ 'width.px': width }\"\n    >\n      <mat-label>Country</mat-label>\n\n      <es-autocomplete-multiple\n        formControlName=\"autocomplete\"\n        [service]=\"searchService\"\n        [required]=\"required\"\n        [disabled]=\"disabled\"\n        [optionsCount]=\"totalOptionCount\"\n        [displayWith]=\"displayWith\"\n      ></es-autocomplete-multiple>\n    </mat-form-field>\n  </form>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/avatar/__stories__/avatar-story-group/avatar-story-group.source.ts": [
                {
                    "name": "AVATAR_STORY_GROUP_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-group/avatar-story-group.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-avatar-group\n    [size]=\"size\"\n  >\n    <es-avatar\n      [size]=\"size\"\n      [alt]=\"alt\"\n      [src]=\"src\"\n    ></es-avatar>\n    <es-avatar\n      [size]=\"size\"\n      [alt]=\"alt\"\n      [src]=\"src\"\n    ></es-avatar>\n    <es-avatar\n      [size]=\"size\"\n      [alt]=\"alt\"\n      [src]=\"src\"\n    ></es-avatar>\n  </es-avatar-group>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/avatar/__stories__/avatar-story-image/avatar-story-image.source.ts": [
                {
                    "name": "AVATAR_STORY_IMAGE_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-image/avatar-story-image.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-avatar\n    [size]=\"size\"\n    [alt]=\"alt\"\n    [src]=\"src\"\n    [variant]=\"variant\"\n  ></es-avatar>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/avatar/__stories__/avatar-story-no-image-icon/avatar-story-no-image-icon.source.ts": [
                {
                    "name": "AVATAR_STORY_NO_IMAGE_ICON_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-no-image-icon/avatar-story-no-image-icon.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-avatar\n    [size]=\"size\"\n    [variant]=\"variant\"\n  >\n    <mat-icon>person</mat-icon>\n  </es-avatar>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/avatar/__stories__/avatar-story-no-image-typography/avatar-story-no-image-typography.source.ts": [
                {
                    "name": "AVATAR_STORY_NO_IMAGE_TYPOGRAPHY_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-no-image-typography/avatar-story-no-image-typography.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-avatar\n    [size]=\"size\"\n    [variant]=\"variant\"\n    НФ\n  </es-avatar>`\n}"
                }
            ],
            "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.source.ts": [
                {
                    "name": "BREADCRUMBS_STORY_BASIC_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-breadcrumbs [withBackButton]=\"withBackButton\"></es-breadcrumbs>\n  `,\n  ts: `\n  import { ESBreadcrumbsModule, ESBreadcrumbsResolver } from '@elonkit/angular/ui/breadcrumbs';\n\n  const ROUTES = [\n    {\n      path: '',\n      data: {\n        breadcrumb: { icon: 'home', ariaLabel: 'Home' },\n      },\n      resolve: {\n        breadcrumb: ESBreadcrumbsResolver\n      },\n      children: [\n        {\n          path: '',\n          component: HomeComponent\n        },\n        {\n          path: 'categories',\n          data: {\n            breadcrumb: { label: 'Categories' }\n          },\n          resolve: {\n            data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n            breadcrumb: ESBreadcrumbsResolver\n          },\n          children: [\n            {\n              path: '',\n              component: CategoriesListComponent\n            },\n            {\n              path: ':category',\n              resolve: {\n                data: CategoriesShowResolver,\n                breadcrumb: CategoriesShowBreadcrumbsResolver\n              },\n              children: [\n                {\n                  path: '',\n                  component: ItemsListComponent,\n                  resolve: {\n                    data: ItemsListResolver\n                  }\n                },\n                {\n                  path: ':item',\n                  resolve: {\n                    data: ItemsShowResolver\n                  },\n                  children: [\n                    {\n                      path: '',\n                      resolve: {\n                        breadcrumb: ItemsShowBreadcrumbsResolver\n                      },\n                      children: [\n                        {\n                          path: '',\n                          component: ItemsShowComponent\n                        },\n                        {\n                          path: 'edit',\n                          component: ItemsEditComponent,\n                          data: {\n                            breadcrumb: { label: 'Edit' }\n                          },\n                          resolve: {\n                            breadcrumb: ESBreadcrumbsResolver\n                          }\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ];\n\n  @NgModule({\n    imports: [..., ESBreadcrumbsModule, RouterModule.forRoot(ROUTES)],\n    ...\n  })\n  export class AppModule {}\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.source.ts": [
                {
                    "name": "BREADCRUMBS_STORY_CUSTOMIZATION_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ts: `\n  import { ES_BREADCRUMBS_DEFAULT_SIZES } from '@elonkit/angular/ui/breadcrumbs';\n\n  ...\n\n  public sizes = {\n    ...ES_BREADCRUMBS_DEFAULT_SIZES,\n    separator: 24\n  };\n  `,\n  html: `\n  <es-breadcrumbs typography=\"mat-body-2\" [sizes]=\"sizes\" [withBackButton]=\"withBackButton\">\n    <mat-icon *esBreadcrumbsSeparator class=\"es-breadcrumbs__separator\">\n      chevron_right\n    </mat-icon>\n    <mat-icon *esBreadcrumbsBack>\n      keyboard_backspace\n    </mat-icon>\n    <mat-icon *esBreadcrumbsMore>\n      more_horiz\n    </mat-icon>\n  </es-breadcrumbs>\n  `,\n  scss: `\n  .es-breadcrumbs__separator {\n    margin: 0;\n  }\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts": [
                {
                    "name": "CATEGORIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 1,\n    title: `Category #1`\n  },\n  {\n    id: 2,\n    title: `Category #2`\n  },\n  {\n    id: 3,\n    title: `Category #3`\n  }\n]"
                },
                {
                    "name": "ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 1,\n    categoryId: 1,\n    title: `Item #1-1`\n  },\n  {\n    id: 2,\n    categoryId: 1,\n    title: `Item #1-2`\n  },\n  {\n    id: 3,\n    categoryId: 1,\n    title: `Item #1-3`\n  },\n  {\n    id: 4,\n    categoryId: 2,\n    title: `Item #2-1`\n  },\n  {\n    id: 5,\n    categoryId: 2,\n    title: `Item #2-2`\n  },\n  {\n    id: 6,\n    categoryId: 2,\n    title: `Item #2-3`\n  },\n  {\n    id: 7,\n    categoryId: 3,\n    title: `Item #3-1`\n  },\n  {\n    id: 8,\n    categoryId: 3,\n    title: `Item #3-2`\n  },\n  {\n    id: 9,\n    categoryId: 3,\n    title: `Item #3-3`\n  }\n]"
                }
            ],
            "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts": [
                {
                    "name": "CATEGORIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 1,\n    title: `Category #1`\n  },\n  {\n    id: 2,\n    title: `Category #2`\n  },\n  {\n    id: 3,\n    title: `Category #3`\n  }\n]"
                },
                {
                    "name": "ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 1,\n    categoryId: 1,\n    title: `Item #1-1`\n  },\n  {\n    id: 2,\n    categoryId: 1,\n    title: `Item #1-2`\n  },\n  {\n    id: 3,\n    categoryId: 1,\n    title: `Item #1-3`\n  },\n  {\n    id: 4,\n    categoryId: 2,\n    title: `Item #2-1`\n  },\n  {\n    id: 5,\n    categoryId: 2,\n    title: `Item #2-2`\n  },\n  {\n    id: 6,\n    categoryId: 2,\n    title: `Item #2-3`\n  },\n  {\n    id: 7,\n    categoryId: 3,\n    title: `Item #3-1`\n  },\n  {\n    id: 8,\n    categoryId: 3,\n    title: `Item #3-2`\n  },\n  {\n    id: 9,\n    categoryId: 3,\n    title: `Item #3-3`\n  }\n]"
                }
            ],
            "projects/elonkit/src/theming/__stories__/colors/colors.component.tsx": [
                {
                    "name": "Colors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/theming/__stories__/colors/colors.component.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "React.FC",
                    "defaultValue": "() => {\n  return (\n    <div className='es-colors-story es-body-200'>\n      {Object.keys(PALETTES).map((palette) => (\n        <div key={palette} className='es-colors-story__palette'>\n          <h6 className='es-colors-story__title mat-h4'>{palette}</h6>\n          <div className='es-colors-story__colors'>\n            {PALETTES[palette].map((hue) => (\n              <div\n                key={hue}\n                className={`es-colors-story__color es-colors-story__color_${palette}_${hue}`}\n              >\n                {hue}\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}"
                },
                {
                    "name": "PALETTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/theming/__stories__/colors/colors.component.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  primary: [\n    '50',\n    '100',\n    '200',\n    '300',\n    '400',\n    '500',\n    '600',\n    '700',\n    '800',\n    '900',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900',\n  ],\n  accent: [\n    '50',\n    '100',\n    '200',\n    '300',\n    '400',\n    '500',\n    '600',\n    '700',\n    '800',\n    '900',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900',\n  ],\n  warn: [\n    '50',\n    '100',\n    '200',\n    '300',\n    '400',\n    '500',\n    '600',\n    '700',\n    '800',\n    '900',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900',\n  ],\n  info: ['500', 'A50', 'A75', 'A100', 'A150', 'A200', 'A300', 'A400', 'A500'],\n  positive: ['500', 'A50', 'A75', 'A100', 'A150', 'A200', 'A300', 'A400', 'A500'],\n  attention: ['500', 'A50', 'A75', 'A100', 'A150', 'A200', 'A300', 'A400', 'A500'],\n  'mono-a': [\n    '500',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900'\n  ],\n  'mono-b': [\n    '500',\n    'A25',\n    'A50',\n    'A75',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A550',\n    'A600',\n    'A700',\n    'A800',\n    'A900'\n  ],\n  grayscale: ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900'],\n  surface: ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900', 'on'],\n  white: [\n    '500',\n    'A50',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A600',\n    'A700',\n    'A800',\n    'A900'\n  ],\n  black: [\n    '500',\n    'A50',\n    'A100',\n    'A150',\n    'A200',\n    'A300',\n    'A400',\n    'A500',\n    'A600',\n    'A700',\n    'A800',\n    'A900'\n  ],\n  other: [\n    'background',\n    'background-2',\n    'overlay-gallery',\n    'overlay-modal',\n    'overlay-filter',\n    'link',\n    'link-visited',\n    'switch'\n  ]\n}"
                }
            ],
            "projects/elonkit/src/ui/alert/alert.component.ts": [
                {
                    "name": "DEFAULT_ICON_MAPPING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/alert/alert.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  default: { icon: 'info' },\n  info: { icon: 'info' },\n  success: { icon: 'check_circle' },\n  warning: { icon: 'warning' },\n  error: { icon: 'error' }\n}"
                },
                {
                    "name": "DEFAULT_TITLE_TYPOGRAPHY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/alert/alert.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'es-body-100'"
                },
                {
                    "name": "DEFAULT_TYPOGRAPHY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/alert/alert.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'es-body-100'"
                },
                {
                    "name": "ES_ALERT_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/alert/alert.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESAlertDefaultOptions>(\n  'ES_ALERT_DEFAULT_OPTIONS'\n)"
                }
            ],
            "projects/elonkit/src/ui/locale/locale.service.ts": [
                {
                    "name": "DEFAULT_LANGUAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/locale/locale.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'en'"
                }
            ],
            "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts": [
                {
                    "name": "DEFAULT_TYPOGRAPHY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'es-body-200'"
                },
                {
                    "name": "ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESInlineFormFieldDefaultOptions>(\n  'ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS'\n)"
                }
            ],
            "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-basic/dropzone-story-basic.source.ts": [
                {
                    "name": "DROPZONE_STORY_BASIC_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-basic/dropzone-story-basic.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ts: `\n  export class AppComponent {\n    public docs = new FormControl([]);\n  }\n  `,\n  html: `\n  <div class=\"dropzone\">\n    <es-dropzone\n      [heading]=\"heading\"\n      [subheading]=\"subheading\"\n      [maxSize]=\"maxSize\"\n      [accept]=\"accept\"\n      [type]=\"type\"\n      [formControl]=\"docs\"\n      (validate)=\"validate($event)\"\n    >\n      <mat-hint>This is an example of a hint message</mat-hint>\n    </es-dropzone>\n  </div>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-custom-icon/dropzone-story-custom-icon.source.ts": [
                {
                    "name": "DROPZONE_STORY_CUSTOM_ICON_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-custom-icon/dropzone-story-custom-icon.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ts: `\n  export class AppComponent {\n    public form = new FormGroup({\n      docs: new FormControl([])\n    });\n\n    constructor(private iconRegistry: MatIconRegistry, private sanitizer: DomSanitizer) {\n      iconRegistry.addSvgIcon(\n        'upload',\n        sanitizer.bypassSecurityTrustResourceUrl('/icons/upload.svg')\n      );\n    }\n  }\n  `,\n  html: `\n  <form class=\"form\" [formGroup]=\"form\">\n    <es-dropzone\n      heading=\"CHOOSE FILES\"\n      subheading=\"or drag files in this area (max size: 50 MB)\"\n      svgIcon=\"upload\"\n      formControlName=\"docs\"\n    >\n      <mat-hint>This is an example of a hint message</mat-hint>\n    </es-dropzone>\n  </form>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-required/dropzone-story-required.source.ts": [
                {
                    "name": "DROPZONE_STORY_REQUIRED_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-required/dropzone-story-required.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ts: `\n  export class AppComponent {\n    public form = new FormGroup({\n      docs: new FormControl([], Validators.required)\n    });\n    ...\n    public onSubmit(form: any) {}\n  }\n  `,\n  html: `\n  <form #f=\"ngForm\" class=\"form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit(f)\">\n    <es-dropzone\n      chooseText=\"CHOOSE FILES\"\n      dragText=\"or drag files in this area (max size: 50 MB)\"\n      formControlName=\"docs\"\n    >\n      <mat-hint>This is an example of a hint message</mat-hint>\n      <mat-error>Select at least one file</mat-error>\n    </es-dropzone>\n    <button class=\"form__submit\" color=\"primary\" mat-raised-button type=\"submit\">Submit</button>\n  </form>\n  `,\n  scss: `\n  .form {\n    max-width: 400px;\n\n    &__submit {\n      margin-top: 15px;\n      text-transform: uppercase;\n    }\n  }\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/empty-state/__stories__/empty-state-story-basic/empty-state-story-basic.source.ts": [
                {
                    "name": "EMPTY_STATE_STORY_BASIC_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/empty-state/__stories__/empty-state-story-basic/empty-state-story-basic.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-empty-state></es-empty-state>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/empty-state/__stories__/empty-state-story-button/empty-state-story-button.source.ts": [
                {
                    "name": "EMPTY_STATE_STORY_BUTTON_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/empty-state/__stories__/empty-state-story-button/empty-state-story-button.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-empty-state>\n    <button mat-stroked-button color=\"primary\">CREATE NEW</button>\n  </es-empty-state>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/locale/locales/en.ts": [
                {
                    "name": "en",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/locale/locales/en.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  alert: {\n    labelClose: 'Close'\n  },\n  breadcrumbs: {\n    labelMore: 'More',\n    labelBack: 'Back'\n  },\n  inlineFormField: {\n    labelEdit: 'Edit',\n    labelSave: 'Save',\n    labelCancel: 'Cancel'\n  },\n  paginator: {\n    labelItemsPerPage: 'Items per page',\n    labelOf: 'of',\n    labelPrev: 'Previous page',\n    labelNext: 'Next page',\n    labelGoTo: 'Go to page',\n    labelPage: 'page'\n  },\n  timepicker: {\n    labelHH: 'HH',\n    labelMM: 'MM',\n    labelSS: 'SS'\n  },\n  audioPlayer: {\n    labelPlay: 'Play',\n    labelPause: 'Pause',\n    labelMute: 'Mute',\n    labelUnmute: 'Unmute',\n    labelOptions: 'Options',\n    labelRate: 'Rate',\n    labelDownload: 'Download',\n    labelBack: 'Back',\n    labelNormal: 'Normal'\n  },\n  avatar: {\n    labelAvatar: 'Avatar',\n    labelStatus: 'Status'\n  },\n  autocompliteMultiple: {\n    labelTabAll: 'All',\n    labelTabSelected: 'Selected',\n    labelTabNotSelected: 'Not selected',\n    labelShown: 'Shown',\n    labelOf: 'of',\n    labelSelected: 'Selected',\n    labelAllSelected: 'All selected',\n    labelSearchScopeAll: 'Search scope all',\n    labelSearchScopeSelected: 'Search scope Selected',\n    labelSearchScopeNotSelected: 'Search scope Not selected',\n\n    labelClear: 'Clear',\n    labelCloseMenu: ' Close menu',\n    labelChoose: 'Choose',\n    labelChooseAll: 'Choose all',\n    labelOpenMenu: 'Open menu',\n    labelRemoveAll: 'Remove all',\n    labelRemoveChoice: 'Remove choice',\n    labelSearch: 'Search',\n    labelShowSelected: 'Show selected'\n  }\n}"
                }
            ],
            "projects/elonkit/src/ui/action-heading/action-heading.component.ts": [
                {
                    "name": "ES_ACTION_HEADING_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/action-heading/action-heading.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESActonHeadingDefaultOptions>(\n  'ES_ACTION_HEADING_DEFAULT_OPTIONS'\n)"
                }
            ],
            "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.animations.ts": [
                {
                    "name": "ES_AUTOCOMPLETE_ANIMATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  trigger('panel', [\n    state('void', style({ transform: 'scaleY(0.8)', opacity: 0 })),\n    state('*', style({ opacity: 1, transform: 'scaleY(1)' })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n  ])\n]"
                }
            ],
            "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts": [
                {
                    "name": "ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESAutocompleteMultipleDefaultOptions>(\n  'ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS'\n)"
                },
                {
                    "name": "ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  chipLeftMargin: 4,\n  countBadgeMaxWidth: 40\n}"
                },
                {
                    "name": "MIN_PANEL_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "320"
                }
            ],
            "projects/elonkit/src/ui/avatar/avatar.component.ts": [
                {
                    "name": "ES_AVATAR_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESAvatarDefaultOptions>(\n  'ES_AVATAR_DEFAULT_OPTIONS'\n)"
                }
            ],
            "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts": [
                {
                    "name": "ES_BREADCRUMBS_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESBreadcrumbsDefaultOptions>(\n  'ES_BREADCRUMBS_DEFAULT_OPTIONS'\n)"
                },
                {
                    "name": "ES_BREADCRUMBS_DEFAULT_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  itemPadding: 4,\n  icon: 24,\n  iconMargin: 4,\n  menu: 20,\n  separator: 16,\n  more: 24\n}"
                },
                {
                    "name": "ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'es-caption'"
                }
            ],
            "projects/elonkit/src/ui/dropzone/dropzone.component.ts": [
                {
                    "name": "ES_DROPZONE_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/dropzone/dropzone.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESDropzoneDefaultOptions>(\n  'ES_DROPZONE_DEFAULT_OPTIONS'\n)"
                },
                {
                    "name": "toFile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/dropzone/dropzone.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(type: string, file: File) =>\n  new Promise<ESDropzoneFile>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      resolve({\n        content: type === 'binary' ? file : (reader.result as string),\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        base64: reader.result as string\n      });\n    };\n    reader.onerror = (error) => reject(error);\n  })"
                }
            ],
            "projects/elonkit/src/ui/empty-state/empty-state.component.ts": [
                {
                    "name": "ES_EMPTY_STATE_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/empty-state/empty-state.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESEmptyStateDefaultOptions>(\n  'ES_EMPTY_STATE_DEFAULT_OPTIONS'\n)"
                }
            ],
            "projects/elonkit/src/ui/paginator/paginator.component.ts": [
                {
                    "name": "ES_PAGINATOR_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/paginator/paginator.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESPaginatorDefaultOptions>(\n  'ES_PAGINATOR_DEFAULT_OPTIONS'\n)"
                }
            ],
            "projects/elonkit/src/ui/icons/icons.service.ts": [
                {
                    "name": "ES_SVG_ICONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/icons/icons.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  'es-empty-state': [\n    'bell',\n    'box',\n    'cart',\n    'chat',\n    'face',\n    'file',\n    'filter',\n    'lock',\n    'search',\n    'smile',\n    'wi-fi',\n    'wi-fi-off'\n  ] as const,\n  'es-audio-player': [\n    'check',\n    'chevron-left',\n    'chevron-right',\n    'download',\n    'more-vert',\n    'mute',\n    'pause',\n    'play',\n    'speed',\n    'un-mute'\n  ] as const,\n  'es-autocomplete-multiple': ['clear-small', 'clear', 'magnify', 'menu-down', 'menu-up'] as const\n}"
                }
            ],
            "projects/elonkit/src/ui/tooltip/tooltip.directive.ts": [
                {
                    "name": "ES_TOOLTIP_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ESTooltipDefaultOptions>(\n  'ES_TOOLTIP_DEFAULT_OPTIONS'\n)"
                },
                {
                    "name": "LONGPRESS_DELAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "500",
                    "rawdescription": "Time between the user putting the pointer on a tooltip\ntrigger and the long press event being fired.",
                    "description": "<p>Time between the user putting the pointer on a tooltip\ntrigger and the long press event being fired.</p>\n"
                },
                {
                    "name": "MOUSE_AIM_DELAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "300",
                    "rawdescription": "Delay in ms before closing a tooltip when mouse moves towards the component.",
                    "description": "<p>Delay in ms before closing a tooltip when mouse moves towards the component.</p>\n"
                },
                {
                    "name": "MOUSE_LOCATIONS_TRACKED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "3",
                    "rawdescription": "Number of past mouse locations to track.",
                    "description": "<p>Number of past mouse locations to track.</p>\n"
                },
                {
                    "name": "passiveListenerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "normalizePassiveListenerOptions({ passive: true })",
                    "rawdescription": "Options used to bind passive event listeners.",
                    "description": "<p>Options used to bind passive event listeners.</p>\n"
                },
                {
                    "name": "TOOLTIP_MARGIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "12",
                    "rawdescription": "Margin of .es-tooltip container",
                    "description": "<p>Margin of .es-tooltip container</p>\n"
                },
                {
                    "name": "TOOLTIP_PANEL_CLASS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'es-tooltip-panel'",
                    "rawdescription": "CSS class that will be attached to the overlay panel.",
                    "description": "<p>CSS class that will be attached to the overlay panel.</p>\n"
                }
            ],
            "projects/elonkit/src/cdk/a11y/focusable/focusable.ts": [
                {
                    "name": "FOCUSABLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'a, button, input, textarea, select, details,[tabindex]:not([tabindex=\"-1\"])'"
                }
            ],
            "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-basic/inline-form-field-story-basic.source.ts": [
                {
                    "name": "INLINE_FORM_FIELD_STORY_BASIC_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-basic/inline-form-field-story-basic.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-inline-form-field [text]=\"text\">\n    <mat-form-field>\n      <input [(ngModel)]=\"text\" matInput />\n    </mat-form-field>\n  </es-inline-form-field>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-composition/inline-form-field-story-composition.source.ts": [
                {
                    "name": "INLINE_FORM_FIELD_STORY_COMPOSITION_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-composition/inline-form-field-story-composition.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-inline-form-field [text]=\"date | date: 'M/d/yyyy'\">\n    <mat-form-field>\n      <input [(ngModel)]=\"date\" matInput [matDatepicker]=\"picker\" />\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n  </es-inline-form-field>\n\n  <es-inline-form-field [text]=\"text\">\n    <mat-form-field>\n      <button matPrefix mat-icon-button>\n        <mat-icon>favorite</mat-icon>\n      </button>\n      <input [(ngModel)]=\"text\" matInput />\n      <button matSuffix mat-icon-button>\n        <mat-icon>thumb_up</mat-icon>\n      </button>\n    </mat-form-field>\n  </es-inline-form-field>\n\n  <es-inline-form-field [text]=\"select\">\n    <mat-form-field>\n      <mat-select [(ngModel)]=\"select\">\n        <mat-option value=\"Apple\">\n          Apple\n        </mat-option>\n        <mat-option value=\"Grape\">\n          Grape\n        </mat-option>\n        <mat-option value=\"Pineapple\">\n          Pineapple\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </es-inline-form-field>\n\n  <es-inline-form-field [text]=\"hint\">\n    <mat-form-field>\n      <input [(ngModel)]=\"hint\" matInput />\n      <mat-hint>This is a hint</mat-hint>\n    </mat-form-field>\n  </es-inline-form-field>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.source.ts": [
                {
                    "name": "INLINE_FORM_FIELD_STORY_TYPOGRAPHY_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-inline-form-field [text]=\"text\" typography=\"mat-h2\">\n    <mat-form-field>\n      <input [(ngModel)]=\"text\" matInput />\n    </mat-form-field>\n  </es-inline-form-field>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.source.ts": [
                {
                    "name": "INLINE_FORM_FIELD_STORY_VALIDATION_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ts: `\n  @Component({\n    ...\n  })\n  export class InlineFormFieldStoryValidationComponent {\n    form: FormGroup;\n\n    constructor(private changeDetector: ChangeDetectorRef, private formBuilder: FormBuilder) {\n      this.form = this.formBuilder.group({\n        text: ['Hello World', [Validators.required]],\n        server: 'Hello Server Side Validation'\n      });\n    }\n\n    onSave(inlineFormField: ESInlineFormFieldComponent) {\n      const value: string = this.form.get('server').value;\n\n      save(value).subscribe(\n        () => {\n          inlineFormField.setHidden(true);\n        },\n        errors => {\n          this.form.get('server').setErrors(errors);\n          this.changeDetector.detectChanges();\n        }\n      );\n    }\n  }\n  `,\n  html: `\n  <form [formGroup]=\"form\">\n    <es-inline-form-field [text]=\"form.get('text').value\">\n      <mat-form-field>\n        <input formControlName=\"text\" matInput />\n        <mat-error *ngIf=\"form.get('text').hasError('required')\">\n          This field is required\n        </mat-error>\n      </mat-form-field>\n    </es-inline-form-field>\n\n    <es-inline-form-field\n      [text]=\"form.get('server').value\"\n      [manualSave]=\"true\"\n      (save)=\"onSave($event)\"\n    >\n      <mat-form-field>\n        <input formControlName=\"server\" matInput />\n        <mat-error *ngIf=\"form.get('server').hasError('required')\">\n          This field is required\n        </mat-error>\n      </mat-form-field>\n    </es-inline-form-field>\n  </form>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.service.ts": [
                {
                    "name": "OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { id: 1, name: 'Estonia' },\n  { id: 2, name: 'Iceland' },\n  { id: 3, name: 'Norway' },\n  { id: 4, name: 'Lithuania' },\n  { id: 5, name: 'Sweden' },\n  { id: 6, name: 'Austria' },\n  { id: 7, name: 'Switzerland' },\n  { id: 8, name: 'Albania' },\n  { id: 9, name: 'Portugal' },\n  { id: 10, name: 'Russia' },\n  { id: 11, name: 'India' },\n  { id: 12, name: 'Oman' }\n]"
                }
            ],
            "projects/elonkit/src/ui/paginator/__stories__/paginator-story-basic/paginator-story-basic.source.ts": [
                {
                    "name": "PAGINATOR_STORY_BASIC_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/paginator/__stories__/paginator-story-basic/paginator-story-basic.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ts: `\n  @Component({\n    ...\n  })\n  export class PaginatableDataComponent {\n    count = 100;\n\n    page = 1;\n    pageSize = 5;\n\n    onPageChange(page: number) {\n      this.page = page;\n    }\n\n    onPageSizeChange(pageSize: number) {\n      this.pageSize = pageSize;\n      this.page = 1;\n    }\n  }\n  `,\n  html: `\n  <es-paginator\n    [count]=\"count\"\n    [page]=\"page\"\n    [pageSize]=\"pageSize\"\n    (pageChange)=\"onPageChange($event)\"\n    (pageSizeChange)=\"onPageSizeChange($event)\"\n  ></es-paginator>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/paginator/__stories__/paginator-story-page-size-options/paginator-story-page-size-options.source.ts": [
                {
                    "name": "PAGINATOR_STORY_PAGE_SIZE_OPTIONS_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/paginator/__stories__/paginator-story-page-size-options/paginator-story-page-size-options.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <es-paginator\n    [count]=\"count\"\n    [page]=\"page\"\n    [pageSize]=\"pageSize\"\n    [pageSizeOptions]=\"[5, 6, 7, 8, 9, 10]\"\n    (pageChange)=\"onPageChange($event)\"\n    (pageSizeChange)=\"onPageSizeChange($event)\"\n  ></es-paginator>\n  `\n}"
                }
            ],
            "projects/elonkit/src/utils/resize-observer.ts": [
                {
                    "name": "resizeObserver",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/utils/resize-observer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(target: HTMLElement) => {\n  return new Observable<void>((observer) => {\n    let width = target.clientWidth;\n\n    // @ts-ignore\n    const resizeObserver = new ResizeObserver((entries: any[]) => {\n      entries.forEach((entry) => {\n        if (entry.contentRect) {\n          if (width !== entry.contentRect.width) {\n            width = entry.contentRect.width;\n            observer.next();\n          }\n        }\n      });\n    });\n\n    resizeObserver.observe(target);\n\n    const unsubscribe = () => {\n      resizeObserver.disconnect();\n    };\n\n    return unsubscribe;\n  });\n}"
                }
            ],
            "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.routes.ts": [
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    path: '',\n    data: {\n      breadcrumb: { icon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsLeafComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsLeafComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsLeafComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsLeafComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsLeafComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]"
                }
            ],
            "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.module.ts": [
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    path: '',\n    data: {\n      breadcrumb: { svgIcon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsStoryBasicHomeComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsStoryBasicCategoriesListComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsStoryBasicItemsListComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsStoryBasicItemsShowComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsStoryBasicItemsEditComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]"
                }
            ],
            "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.module.ts": [
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    path: '',\n    data: {\n      breadcrumb: { icon: 'home', ariaLabel: 'Home' }\n    },\n    resolve: {\n      breadcrumb: ESBreadcrumbsResolver\n    },\n    children: [\n      {\n        path: '',\n        component: BreadcrumbsStoryBasicHomeComponent\n      },\n      {\n        path: 'categories',\n        data: {\n          breadcrumb: { label: 'Categories' }\n        },\n        resolve: {\n          data: CategoriesListResolver, // We need to move list resolver one level up in order to use horizontal navigation.\n          breadcrumb: ESBreadcrumbsResolver\n        },\n        children: [\n          {\n            path: '',\n            component: BreadcrumbsStoryBasicCategoriesListComponent\n          },\n          {\n            path: ':category',\n            resolve: {\n              data: CategoriesShowResolver,\n              breadcrumb: CategoriesShowBreadcrumbsResolver\n            },\n            children: [\n              {\n                path: '',\n                component: BreadcrumbsStoryBasicItemsListComponent,\n                resolve: {\n                  data: ItemsListResolver\n                }\n              },\n              {\n                path: ':item',\n                resolve: {\n                  data: ItemsShowResolver\n                },\n                children: [\n                  {\n                    path: '',\n                    resolve: {\n                      breadcrumb: ItemsShowBreadcrumbsResolver\n                    },\n                    children: [\n                      {\n                        path: '',\n                        component: BreadcrumbsStoryBasicItemsShowComponent\n                      },\n                      {\n                        path: 'edit',\n                        component: BreadcrumbsStoryBasicItemsEditComponent,\n                        data: {\n                          breadcrumb: { label: 'Edit' }\n                        },\n                        resolve: {\n                          breadcrumb: ESBreadcrumbsResolver\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]"
                }
            ],
            "projects/elonkit/src/ui/locale/locales/ru.ts": [
                {
                    "name": "ru",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/locale/locales/ru.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  alert: {\n    labelClose: 'Закрыть'\n  },\n  breadcrumbs: {\n    labelMore: 'Ещё',\n    labelBack: 'Назад'\n  },\n  inlineFormField: {\n    labelEdit: 'Редактировать',\n    labelSave: 'Сохранить',\n    labelCancel: 'Отменить'\n  },\n  paginator: {\n    labelItemsPerPage: 'Показывать по',\n    labelOf: 'из',\n    labelPrev: 'Предыдущая страница',\n    labelNext: 'Следующая страница',\n    labelGoTo: 'Перейти на страницу',\n    labelPage: 'стр'\n  },\n  timepicker: {\n    labelHH: 'ЧЧ',\n    labelMM: 'ММ',\n    labelSS: 'СС'\n  },\n  audioPlayer: {\n    labelPlay: 'Слушать',\n    labelPause: 'Пауза',\n    labelMute: 'Выключить звук',\n    labelUnmute: 'Включить звук',\n    labelOptions: 'Опции',\n    labelRate: 'Скорость',\n    labelDownload: 'Скачать',\n    labelBack: 'Назад',\n    labelNormal: 'Обычная'\n  },\n  avatar: {\n    labelAvatar: 'Аватар',\n    labelStatus: 'Статус'\n  },\n  autocompliteMultiple: {\n    labelTabAll: 'Все',\n    labelTabSelected: 'Выбранные',\n    labelTabNotSelected: 'Не выбранные',\n    labelShown: 'Показано',\n    labelOf: 'из',\n    labelAllSelected: 'Все выбранные',\n    labelSelected: 'Выбрано',\n    labelSearchScopeAll: 'Область поиска Все',\n    labelSearchScopeSelected: 'Область поиска Выбранные',\n    labelSearchScopeNotSelected: 'Область поиска Не выбранные',\n\n    labelClear: 'Очистить',\n    labelCloseMenu: 'Закрыть меню',\n    labelChoose: 'Выбрать',\n    labelChooseAll: 'Выбрать все',\n    labelOpenMenu: 'Открыть меню',\n    labelRemoveAll: 'Удалить все',\n    labelRemoveChoice: 'Снять выбор',\n    labelSearch: 'Найти',\n    labelShowSelected: 'Показать выбранные'\n  }\n}"
                }
            ],
            "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.component.ts": [
                {
                    "name": "save",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: string) =>\n  of(value).pipe(\n    delay(100),\n    switchMap((v) => {\n      if (v.length) {\n        return of(v);\n      }\n      return throwError({ required: true });\n    })\n  )"
                }
            ],
            "projects/elonkit/src/ui/surface/surface.source.ts": [
                {
                    "name": "SURFACE_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/surface/surface.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <div class=\"es-surface-50\">Surface 50</div>\n  <div class=\"es-surface-100\">Surface 100</div>\n  <div class=\"es-surface-200\">Surface 200</div>\n  <div class=\"es-surface-300\">Surface 300</div>\n  <div class=\"es-surface-400\">Surface 400</div>\n  <div class=\"es-surface-500\">Surface 500</div>\n  <div class=\"es-surface-600\">Surface 600</div>\n  <div class=\"es-surface-700\">Surface 700</div>\n  <div class=\"es-surface-800\">Surface 800</div>\n  <div class=\"es-surface-900\">Surface 900</div>\n  <div class=\"es-surface-on\">Surface On</div>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.component.ts": [
                {
                    "name": "TEXT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Hello World'"
                },
                {
                    "name": "TEXT_MMULTILINE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`Hello World\nGood Morning World`"
                }
            ],
            "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-basic/tooltip-story-basic.source.ts": [
                {
                    "name": "TOOLTIP_STORY_BASIC_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-basic/tooltip-story-basic.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <button\n    mat-flat-button\n    color=\"primary\"\n    esTooltip=\"Information about the action\"\n    esTooltipArrow\n  >\n    Button\n  </button>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-interactive/tooltip-story-interactive.source.ts": [
                {
                    "name": "TOOLTIP_STORY_INTERACTIVE_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-interactive/tooltip-story-interactive.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <button\n    mat-flat-button\n    color=\"primary\"\n    esTooltip\n    esTooltipArrow\n    esTooltipInteractive\n    [esTooltipContent]=\"content\"\n  >\n    Button\n  </button>\n  <ng-template #content>\n    This is a tooltip with an interactive content\n    <button mat-flat-button>Action</button>\n  </ng-template>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-listeners/tooltip-story-listeners.source.ts": [
                {
                    "name": "TOOLTIP_STORY_LISTENERS_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-listeners/tooltip-story-listeners.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <button\n    mat-flat-button\n    color=\"primary\"\n    esTooltip\n    [esTooltipContent]=\"content\"\n    esTooltipArrow\n    esTooltipInteractive\n    esTooltipDisableFocusListener\n    esTooltipDisableCloseHoverListener\n    esTooltipDisableCloseClickListener\n  >\n    Button\n  </button>\n  <ng-template #content let-hide=\"hide\">\n    Click this button to close the tooltip.\n    <br /><br />\n    <button mat-flat-button (click)=\"hide()\">Close</button>\n  </ng-template>\n  `\n}"
                }
            ],
            "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-theming/tooltip-story-theming.source.ts": [
                {
                    "name": "TOOLTIP_STORY_THEMING_SOURCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-theming/tooltip-story-theming.source.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  html: `\n  <button\n    mat-stroked-button\n    esTooltip=\"This is a customized tooltip\"\n    esTooltipArrow\n    esTooltipClass=\"es-tooltip_purple\"\n  >\n    1\n  </button>\n\n  <button\n    mat-stroked-button\n    esTooltip=\"This is a customized tooltip\"\n    esTooltipArrow\n    esTooltipClass=\"es-tooltip_marine\"\n  >\n    2\n  </button>\n  `,\n  scss: `\n  .es-tooltip {\n    &_purple {\n      @include es-tooltip-color(#9b78ff, #fff);\n    }\n\n    &_marine {\n      @include es-tooltip-color(#3acac0, #fff);\n    }\n  }\n  `\n}"
                }
            ],
            "projects/elonkit/src/utils/validate-file-type.ts": [
                {
                    "name": "typeMatchesFilenameExtension",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/utils/validate-file-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(type: string, fileName: string): boolean =>\n  type.charAt(0) === '.' && fileName.toLowerCase().endsWith(type)"
                },
                {
                    "name": "typeMatchesFileType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/utils/validate-file-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(type: string, fileType: string): boolean =>\n  type.endsWith('/*') && fileType.startsWith(type.replace(/\\/.*$/, ''))"
                },
                {
                    "name": "typesMatch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/utils/validate-file-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(types: string[], file: File): boolean =>\n  types.some(\n    (type) =>\n      type === file.type ||\n      typeMatchesFileType(type, file.type) ||\n      typeMatchesFilenameExtension(type, file.name)\n  )"
                },
                {
                    "name": "validateFileType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/utils/validate-file-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(file: any, types: string): boolean => {\n  const typesArr = types.split(',').map((v) => v.trim());\n  return typesArr.includes('*') || typesMatch(typesArr, file);\n}"
                }
            ],
            "projects/elonkit/src/theming/__stories__/typography/typography.component.tsx": [
                {
                    "name": "Typography",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/elonkit/src/theming/__stories__/typography/typography.component.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "React.FC",
                    "defaultValue": "() => {\n  return (\n    <div className='es-typography-story es-body-100'>\n      <table>\n        <thead>\n          <tr>\n            <th style={{ width: '1px' }}>Class</th>\n            <th>Display</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <code>es-h1</code>\n            </td>\n            <td>\n              <div className='es-h1'>Heading 1</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h2</code>\n            </td>\n            <td>\n              <div className='es-h2'>Heading 2</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h3</code>\n            </td>\n            <td>\n              <div className='es-h3'>Heading 3</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h4</code>\n            </td>\n            <td>\n              <div className='es-h4'>Heading 4</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h5</code>\n            </td>\n            <td>\n              <div className='es-h5'>Heading 5</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-h6</code>\n            </td>\n            <td>\n              <div className='es-h6'>Heading 6</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-subtitle-1</code>\n            </td>\n            <td>\n              <div className='es-subtitle-1'>Subtitle 1</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-subtitle-2</code>\n            </td>\n            <td>\n              <div className='es-subtitle-2'>Subtitle 2</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-400</code>\n            </td>\n            <td>\n              <div className='es-body-400'>Body 400</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-400-medium</code>\n            </td>\n            <td>\n              <div className='es-body-400-medium'>Body 400 | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-400-bold</code>\n            </td>\n            <td>\n              <div className='es-body-400-bold'>Body 400 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-300</code>\n            </td>\n            <td>\n              <div className='es-body-300'>Body 300</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-300-medium</code>\n            </td>\n            <td>\n              <div className='es-body-300-medium'>Body 300 | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-300-bold</code>\n            </td>\n            <td>\n              <div className='es-body-300-bold'>Body 300 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-200</code>\n            </td>\n            <td>\n              <div className='es-body-200'>Body 200</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-200-medium</code>\n            </td>\n            <td>\n              <div className='es-body-200-medium'>Body 200 | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-200-bold</code>\n            </td>\n            <td>\n              <div className='es-body-200-bold'>Body 200 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-100</code>\n            </td>\n            <td>\n              <div className='es-body-100'>Body 100</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-100-medium</code>\n            </td>\n            <td>\n              <div className='es-body-100-medium'>Body 100 | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-body-100-bold</code>\n            </td>\n            <td>\n              <div className='es-body-100-bold'>Body 100 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-button</code>\n            </td>\n            <td>\n              <div className='es-button'>BUTTON</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-caption</code>\n            </td>\n            <td>\n              <div className='es-caption'>Caption</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-caption-medium</code>\n            </td>\n            <td>\n              <div className='es-caption-medium'>Caption | Medium</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-caption-bold</code>\n            </td>\n            <td>\n              <div className='es-caption-bold'>Caption | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-overline</code>\n            </td>\n            <td>\n              <div className='es-overline'>OVERLINE</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-mini-200</code>\n            </td>\n            <td>\n              <div className='es-mini-200'>Mini 200</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-mini-100</code>\n            </td>\n            <td>\n              <div className='es-mini-100'>Mini 100</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-mini-100-bold</code>\n            </td>\n            <td>\n              <div className='es-mini-100-bold'>Mini 100 | Bold</div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>es-micro</code>\n            </td>\n            <td>\n              <div className='es-micro'>Micro</div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/elonkit/storybook/components/canvas/canvas.tsx": [
                {
                    "name": "Canvas",
                    "file": "projects/elonkit/storybook/components/canvas/canvas.tsx",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/elonkit/src/cdk/a11y/focusable/focusable.ts": [
                {
                    "name": "getFocusableElemets",
                    "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "parent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "HTMLElement[]",
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInnerFocusableElement",
                    "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNextFocusableElement",
                    "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPrevFocusableElement",
                    "file": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/elonkit/src/ui/paginator/paginator.component.ts": [
                {
                    "name": "range",
                    "file": "projects/elonkit/src/ui/paginator/paginator.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "start",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "start",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/elonkit/src/ui/tooltip/tooltip.directive.ts": [
                {
                    "name": "slope",
                    "file": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.types.ts": [
                {
                    "name": "ESAutocompleteMultipleSearchScope",
                    "childs": [
                        {
                            "name": "ALL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "all"
                        },
                        {
                            "name": "SELECTED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "selected"
                        },
                        {
                            "name": "NOT_SELECTED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "not_selected"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.types.ts"
                }
            ],
            "projects/elonkit/src/ui/avatar/avatar.types.ts": [
                {
                    "name": "ESAvatarVariant",
                    "childs": [
                        {
                            "name": "Round",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "round"
                        },
                        {
                            "name": "Square",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "square"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/elonkit/src/ui/avatar/avatar.types.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/elonkit/src/ui/action-heading/action-heading.component.ts": [
                {
                    "name": "ESActionHeadingType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
                    "file": "projects/elonkit/src/ui/action-heading/action-heading.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/elonkit/src/ui/alert/alert.types.ts": [
                {
                    "name": "ESAlertVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"info\" | \"success\" | \"warning\" | \"error\"",
                    "file": "projects/elonkit/src/ui/alert/alert.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/elonkit/src/ui/empty-state/empty-state.types.ts": [
                {
                    "name": "ESEmptyStateIcon",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"bell\" | \"box\" | \"cart\" | \"chat\" | \"face\" | \"file\" | \"filter\" | \"lock\" | \"search\" | \"smile\" | \"wi-fi\" | \"wi-fi-off\"",
                    "file": "projects/elonkit/src/ui/empty-state/empty-state.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/elonkit/src/ui/locale/locale.service.ts": [
                {
                    "name": "ESLocale",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/elonkit/src/ui/locale/locale.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 7,
        "status": "low",
        "files": [
            {
                "filePath": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFocusableElemets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getInnerFocusableElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNextFocusableElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getPrevFocusableElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/cdk/a11y/focusable/focusable.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FOCUSABLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/theming/__stories__/colors/colors.component.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Colors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/theming/__stories__/colors/colors.component.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PALETTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/theming/__stories__/typography/typography.component.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typography",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/action-heading/__stories__/action-heading-story-basic/action-heading-story-basic.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTION_HEADING_STORY_BASIC_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/action-heading/action-heading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESActionHeadingComponent",
                "coveragePercent": 57,
                "coverageCount": "8/14",
                "status": "good"
            },
            {
                "filePath": "projects/elonkit/src/ui/action-heading/action-heading.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESActonHeadingDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/action-heading/action-heading.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_ACTION_HEADING_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/__stories__/alert-story-actions/alert-story-actions.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALERT_STORY_ACTIONS_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/__stories__/alert-story-basic/alert-story-basic.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALERT_STORY_BASIC_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/__stories__/alert-story-icon-mapping/alert-story-icon-mapping.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertStoryIconMappingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/__stories__/alert-story-icon-mapping/alert-story-icon-mapping.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALERT_STORY_ICON_MAPPING_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESAlertComponent",
                "coveragePercent": 58,
                "coverageCount": "7/12",
                "status": "good"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/alert.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESAlertDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/alert.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_ICON_MAPPING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/alert.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_TITLE_TYPOGRAPHY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/alert.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_TYPOGRAPHY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/alert.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_ALERT_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/alert/components/alert-actions/alert-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESAlertActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteMultipleStoryServiceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AutocompleteMultipleStoryService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/__stories__/autocomplete-multiple-story-service/autocomplete-multiple-story-service.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTOCOMPLETE_MULTIPLE_STORY_SERVICE_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_AUTOCOMPLETE_ANIMATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESAutocompleteMultipleComponent",
                "coveragePercent": 32,
                "coverageCount": "8/25",
                "status": "medium"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESAutocompleteMultipleDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESAutocompleteMultipleDefaultOptionsSizes",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_AUTOCOMPLETE_MULTIPLE_DEFAULT_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/autocomplete-multiple/autocomplete-multiple.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_PANEL_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-group/avatar-story-group.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AVATAR_STORY_GROUP_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-image/avatar-story-image.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AVATAR_STORY_IMAGE_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-no-image-icon/avatar-story-no-image-icon.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AVATAR_STORY_NO_IMAGE_ICON_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/avatar/__stories__/avatar-story-no-image-typography/avatar-story-no-image-typography.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AVATAR_STORY_NO_IMAGE_TYPOGRAPHY_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/avatar/avatar-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESAvatarGroupComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESAvatarComponent",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "projects/elonkit/src/ui/avatar/avatar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_AVATAR_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/avatar/avatar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESAvatarDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesListResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesShowBreadcrumbsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesShowResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItemsListResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItemsShowBreadcrumbsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItemsShowResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.routes.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsLeafComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.routes.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsRootComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItemsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CATEGORIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__specs__/breadcrumbs.spec.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsStoryBasicCategoriesListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsStoryBasicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsStoryBasicHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsStoryBasicItemsEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsStoryBasicItemsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsStoryBasicItemsShowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesListResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesShowBreadcrumbsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesShowResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItemsListResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItemsShowBreadcrumbsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItemsShowResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItemsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CATEGORIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-basic/breadcrumbs-story-basic.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BREADCRUMBS_STORY_BASIC_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsStoryCustomizationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/__stories__/breadcrumbs-story-customization/breadcrumbs-story-customization.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BREADCRUMBS_STORY_CUSTOMIZATION_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESBreadcrumbsComponent",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESBreadcrumbsDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESBreadcrumbsDefaultOptionsSizes",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_BREADCRUMBS_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_BREADCRUMBS_DEFAULT_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_BREADCRUMBS_DEFAULT_TYPOGRAPHY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ESBreadcrumbsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ESBreadcrumbsService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESBreadcrumb",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/breadcrumbs.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESBreadcrumbData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/components/breadcrumbs-breadcrumb/breadcrumbs-breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESBreadcrumbsBreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/components/breadcrumbs-collapse/breadcrumbs-collapse.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESBreadcrumbsCollapseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/directives/breadcrumbs-back.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ESBreadcrumbsBackDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/directives/breadcrumbs-more.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ESBreadcrumbsMoreDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/breadcrumbs/directives/breadcrumbs-separator.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ESBreadcrumbsSeparatorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-basic/dropzone-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropzoneStoryBasicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-basic/dropzone-story-basic.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DROPZONE_STORY_BASIC_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-custom-icon/dropzone-story-custom-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropzoneStoryCustomIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-custom-icon/dropzone-story-custom-icon.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DROPZONE_STORY_CUSTOM_ICON_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-required/dropzone-story-required.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropzoneStoryRequiredComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/__stories__/dropzone-story-required/dropzone-story-required.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DROPZONE_STORY_REQUIRED_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/dropzone.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESDropzoneComponent",
                "coveragePercent": 39,
                "coverageCount": "9/23",
                "status": "medium"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/dropzone.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_DROPZONE_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/dropzone.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toFile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/dropzones.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESDropzoneDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/dropzones.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESDropzoneFile",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/dropzone/dropzones.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESDropzoneValidationError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/empty-state/__stories__/empty-state-story-basic/empty-state-story-basic.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMPTY_STATE_STORY_BASIC_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/empty-state/__stories__/empty-state-story-button/empty-state-story-button.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMPTY_STATE_STORY_BUTTON_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/empty-state/empty-state.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESEmptyStateComponent",
                "coveragePercent": 60,
                "coverageCount": "6/10",
                "status": "good"
            },
            {
                "filePath": "projects/elonkit/src/ui/empty-state/empty-state.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESEmptyStateDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/empty-state/empty-state.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_EMPTY_STATE_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/icons/icons.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ESIconsService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/elonkit/src/ui/icons/icons.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_SVG_ICONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-basic/inline-form-field-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineFormFieldStoryBasicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-basic/inline-form-field-story-basic.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INLINE_FORM_FIELD_STORY_BASIC_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-composition/inline-form-field-story-composition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineFormFieldStoryCompositionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-composition/inline-form-field-story-composition.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INLINE_FORM_FIELD_STORY_COMPOSITION_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineFormFieldStoryTypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEXT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEXT_MMULTILINE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-typography/inline-form-field-story-typography.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INLINE_FORM_FIELD_STORY_TYPOGRAPHY_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineFormFieldStoryValidationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "save",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/__stories__/inline-form-field-story-validation/inline-form-field-story-validation.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INLINE_FORM_FIELD_STORY_VALIDATION_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESInlineFormFieldComponent",
                "coveragePercent": 46,
                "coverageCount": "7/15",
                "status": "medium"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESInlineFormFieldDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_TYPOGRAPHY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/inline-form-field/inline-form-field.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_INLINE_FORM_FIELD_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/locale/locale.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ESLocaleService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/locale/locale.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LANGUAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/locale/locales/en.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "en",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/locale/locales/ru.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ru",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/paginator/__stories__/paginator-story-basic/paginator-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorStoryBasicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/paginator/__stories__/paginator-story-basic/paginator-story-basic.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PAGINATOR_STORY_BASIC_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/paginator/__stories__/paginator-story-page-size-options/paginator-story-page-size-options.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PAGINATOR_STORY_PAGE_SIZE_OPTIONS_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESPaginatorComponent",
                "coveragePercent": 47,
                "coverageCount": "9/19",
                "status": "medium"
            },
            {
                "filePath": "projects/elonkit/src/ui/paginator/paginator.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESPaginatorDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/paginator/paginator.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "range",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/paginator/paginator.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_PAGINATOR_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/surface/surface.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SURFACE_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-basic/tooltip-story-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipStoryBasicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-basic/tooltip-story-basic.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOOLTIP_STORY_BASIC_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-interactive/tooltip-story-interactive.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipStoryInteractiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-interactive/tooltip-story-interactive.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOOLTIP_STORY_INTERACTIVE_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-listeners/tooltip-story-listeners.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipStoryListenersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-listeners/tooltip-story-listeners.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOOLTIP_STORY_LISTENERS_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-theming/tooltip-story-theming.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipStoryThemingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/_stories_/tooltip-story-theming/tooltip-story-theming.source.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOOLTIP_STORY_THEMING_SOURCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ESTooltipComponent",
                "coveragePercent": 31,
                "coverageCount": "6/19",
                "status": "medium"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ESTooltipDirective",
                "coveragePercent": 56,
                "coverageCount": "33/58",
                "status": "good"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESTooltipDefaultOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ESTooltipMouseLocation",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "slope",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ES_TOOLTIP_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LONGPRESS_DELAY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOUSE_AIM_DELAY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOUSE_LOCATIONS_TRACKED",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passiveListenerOptions",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOOLTIP_MARGIN",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOOLTIP_PANEL_CLASS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/elonkit/src/ui/tooltip/tooltip.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ESTooltipService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/utils/resize-observer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resizeObserver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/utils/validate-file-type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "typeMatchesFilenameExtension",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/utils/validate-file-type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "typeMatchesFileType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/utils/validate-file-type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "typesMatch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/src/utils/validate-file-type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validateFileType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/storybook/components/canvas/canvas.tsx",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Canvas",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/elonkit/storybook/components/canvas/canvas.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICanvasProps",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            }
        ]
    }
}